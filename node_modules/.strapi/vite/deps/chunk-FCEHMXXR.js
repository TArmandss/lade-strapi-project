import {
  require_escape_string_regexp
} from "./chunk-6LY4MOO2.js";
import {
  require_pluralize
} from "./chunk-XNACAI67.js";
import {
  require_cloneDeep
} from "./chunk-RTTTMNU7.js";
import {
  create6 as create,
  require_snakeCase
} from "./chunk-MQS2CIH6.js";
import {
  require_set
} from "./chunk-RRAKTOMO.js";
import {
  $010c2913dbd2fe3d$export$5cae361ad82dce8b,
  $11d87f3f76e88657$export$93522d1a439f3617,
  $11d87f3f76e88657$export$b21e0b124e224484,
  $14e0f24ef4ac5c92$export$2061056d06d7cdf7,
  $14e0f24ef4ac5c92$export$42c81a444fbfb5d4,
  $14e0f24ef4ac5c92$export$5c333a116e949cdd,
  $14e0f24ef4ac5c92$export$a2258d9c4118825c,
  $14e0f24ef4ac5c92$export$a5a3b454ada2268e,
  $14e0f24ef4ac5c92$export$a75f2bff57811055,
  $14e0f24ef4ac5c92$export$aa8b41735afcabd2,
  $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3,
  $14e0f24ef4ac5c92$export$ea39ec197993aef0,
  $1746a345f3d73bb7$export$f680877a34711e37,
  $1bf158f521e1b1b4$export$41fb9f06171c75f4,
  $1bf158f521e1b1b4$export$6d08773d2e66f8f2,
  $1bf158f521e1b1b4$export$7c6e2c02157bb7d2,
  $1bf158f521e1b1b4$export$8b251419efc915eb,
  $1bf158f521e1b1b4$export$be92b6f5f03c0fe9,
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c,
  $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5,
  $57acba87d6e25586$export$6521433ed15a34db,
  $57acba87d6e25586$export$9a4e88b92edfce6b,
  $57acba87d6e25586$export$be92b6f5f03c0fe9,
  $57acba87d6e25586$export$d5c6c08dc2d3ca7,
  $5cb92bef7577960e$export$177fb62ff3ec1f22,
  $5cb92bef7577960e$export$be92b6f5f03c0fe9,
  $5d3850c4d0b4e6c7$export$41fb9f06171c75f4,
  $5d3850c4d0b4e6c7$export$602eac185826482c,
  $5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2,
  $5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9,
  $5d3850c4d0b4e6c7$export$c6fdb837b070b4ff,
  $5d3850c4d0b4e6c7$export$f39c2d165cd861fe,
  $5d3850c4d0b4e6c7$export$f99233281efd08a0,
  $5e63c961fc1ce211$export$8c6ed5c666ac1360,
  $67824d98245208a0$export$adb584737d712b70,
  $67824d98245208a0$export$be92b6f5f03c0fe9,
  $69cb30bb0017df05$export$41fb9f06171c75f4,
  $69cb30bb0017df05$export$54c2e3dc7acea9f5,
  $69cb30bb0017df05$export$7c6e2c02157bb7d2,
  $69cb30bb0017df05$export$be92b6f5f03c0fe9,
  $6be4966fd9bbc698$export$6521433ed15a34db,
  $6be4966fd9bbc698$export$be92b6f5f03c0fe9,
  $6c7bd7858deea686$export$cd11ab140839f11d,
  $6ed0406888f73fc4$export$c7b2cbe3552a0d05,
  $71cd76cc60e0454e$export$6f32135080cb4c3,
  $8927f6f2acc4f386$export$250ffa63cdc0d034,
  $905f4ae918aab1aa$export$393edc798c47379d,
  $905f4ae918aab1aa$export$41fb9f06171c75f4,
  $905f4ae918aab1aa$export$602eac185826482c,
  $905f4ae918aab1aa$export$7c6e2c02157bb7d2,
  $905f4ae918aab1aa$export$848c9b7ead0df967,
  $905f4ae918aab1aa$export$be92b6f5f03c0fe9,
  $905f4ae918aab1aa$export$c6fdb837b070b4ff,
  $905f4ae918aab1aa$export$e19cd5f9376f8cee,
  $905f4ae918aab1aa$export$f99233281efd08a0,
  $9f79659886946c16$export$e5c5a5f917a5871c,
  $a093c7e1ec25a057$export$41fb9f06171c75f4,
  $a093c7e1ec25a057$export$602eac185826482c,
  $a093c7e1ec25a057$export$7c6e2c02157bb7d2,
  $a093c7e1ec25a057$export$be92b6f5f03c0fe9,
  $ae6933e535247d3d$export$7d15b64cf5a3a4c4,
  $b1b2314f5f9a1d84$export$25bec8c6f54ee79a,
  $c512c27ab02ef895$export$50c7b4e9d9f19c1,
  $c512c27ab02ef895$export$fd42f52fd3ae1109,
  $cb5cc270b50c6fcd$export$41fb9f06171c75f4,
  $cb5cc270b50c6fcd$export$602eac185826482c,
  $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2,
  $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9,
  $cddcb0b647441e34$export$3e431a229df88919,
  $cddcb0b647441e34$export$be92b6f5f03c0fe9,
  $cddcb0b647441e34$export$fb8d7f40caaeea67,
  $cf1ac5d9fe0e8206$export$21b07c8f274aebd5,
  $cf1ac5d9fe0e8206$export$722aac194ae923,
  $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2,
  $cf1ac5d9fe0e8206$export$b688253958b8dfe7,
  $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9,
  $d08ef79370b62062$export$1ff3c3f08ae963c0,
  $d08ef79370b62062$export$2ea8a7a591ac5eac,
  $d08ef79370b62062$export$41fb9f06171c75f4,
  $d08ef79370b62062$export$602eac185826482c,
  $d08ef79370b62062$export$6d08773d2e66f8f2,
  $d08ef79370b62062$export$6d4de93b380beddf,
  $d08ef79370b62062$export$7c6e2c02157bb7d2,
  $d08ef79370b62062$export$b04be29aa201d4f5,
  $d08ef79370b62062$export$be92b6f5f03c0fe9,
  $d08ef79370b62062$export$d7a01e11500dfb6f,
  $d3863c46a17e8a28$export$20e40289641fbbb6,
  $e02a7d9cb1dc128c$export$c74125a8e3af6bb2,
  $e42e1063c40fb3ef$export$b9ecd428b558ff10,
  $e698a72e93240346$export$adb584737d712b70,
  $e698a72e93240346$export$be92b6f5f03c0fe9,
  $ea1ef594cf570d83$export$439d29a4e110a164,
  $f1701beae083dbae$export$602eac185826482c,
  $f631663db3294ace$export$b39126d51d94e6f3,
  $f99a8c78507165f7$export$6d08773d2e66f8f2,
  $f99a8c78507165f7$export$adb584737d712b70,
  $f99a8c78507165f7$export$be92b6f5f03c0fe9,
  $fae977aafc393c5c$export$5adfdab05168c219,
  $fae977aafc393c5c$export$8e384432362ed0f0,
  $fb18d541ea1ad717$export$ad991b66133851cf,
  Combination_default,
  Decoration,
  EditorView,
  R,
  StateEffect,
  StateField,
  autoUpdate,
  createSlice,
  flip,
  hideOthers,
  json,
  jsonParseLinter,
  offset,
  require_get,
  require_lodash,
  shift,
  useCodeMirror,
  useFloating,
  useIntl
} from "./chunk-OQLJGFIT.js";
import {
  require_react_dom
} from "./chunk-FOD4ENRR.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt,
  ft,
  lt,
  mt,
  nt
} from "./chunk-URZ32MVD.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/lodash.deburr/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.deburr/index.js"(exports, module) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    var deburredLetters = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module.exports = deburr;
  }
});

// node_modules/@sindresorhus/transliterate/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp2 = __commonJS({
  "node_modules/@sindresorhus/transliterate/node_modules/escape-string-regexp/index.js"(exports, module) {
    "use strict";
    var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
    module.exports = (string) => {
      if (typeof string !== "string") {
        throw new TypeError("Expected a string");
      }
      return string.replace(matchOperatorsRegex, "\\$&");
    };
  }
});

// node_modules/@sindresorhus/transliterate/replacements.js
var require_replacements = __commonJS({
  "node_modules/@sindresorhus/transliterate/replacements.js"(exports, module) {
    "use strict";
    module.exports = [
      // German umlauts
      ["ß", "ss"],
      ["ä", "ae"],
      ["Ä", "Ae"],
      ["ö", "oe"],
      ["Ö", "Oe"],
      ["ü", "ue"],
      ["Ü", "Ue"],
      // Latin
      ["À", "A"],
      ["Á", "A"],
      ["Â", "A"],
      ["Ã", "A"],
      ["Ä", "Ae"],
      ["Å", "A"],
      ["Æ", "AE"],
      ["Ç", "C"],
      ["È", "E"],
      ["É", "E"],
      ["Ê", "E"],
      ["Ë", "E"],
      ["Ì", "I"],
      ["Í", "I"],
      ["Î", "I"],
      ["Ï", "I"],
      ["Ð", "D"],
      ["Ñ", "N"],
      ["Ò", "O"],
      ["Ó", "O"],
      ["Ô", "O"],
      ["Õ", "O"],
      ["Ö", "Oe"],
      ["Ő", "O"],
      ["Ø", "O"],
      ["Ù", "U"],
      ["Ú", "U"],
      ["Û", "U"],
      ["Ü", "Ue"],
      ["Ű", "U"],
      ["Ý", "Y"],
      ["Þ", "TH"],
      ["ß", "ss"],
      ["à", "a"],
      ["á", "a"],
      ["â", "a"],
      ["ã", "a"],
      ["ä", "ae"],
      ["å", "a"],
      ["æ", "ae"],
      ["ç", "c"],
      ["è", "e"],
      ["é", "e"],
      ["ê", "e"],
      ["ë", "e"],
      ["ì", "i"],
      ["í", "i"],
      ["î", "i"],
      ["ï", "i"],
      ["ð", "d"],
      ["ñ", "n"],
      ["ò", "o"],
      ["ó", "o"],
      ["ô", "o"],
      ["õ", "o"],
      ["ö", "oe"],
      ["ő", "o"],
      ["ø", "o"],
      ["ù", "u"],
      ["ú", "u"],
      ["û", "u"],
      ["ü", "ue"],
      ["ű", "u"],
      ["ý", "y"],
      ["þ", "th"],
      ["ÿ", "y"],
      ["ẞ", "SS"],
      // Vietnamese
      ["à", "a"],
      ["À", "A"],
      ["á", "a"],
      ["Á", "A"],
      ["â", "a"],
      ["Â", "A"],
      ["ã", "a"],
      ["Ã", "A"],
      ["è", "e"],
      ["È", "E"],
      ["é", "e"],
      ["É", "E"],
      ["ê", "e"],
      ["Ê", "E"],
      ["ì", "i"],
      ["Ì", "I"],
      ["í", "i"],
      ["Í", "I"],
      ["ò", "o"],
      ["Ò", "O"],
      ["ó", "o"],
      ["Ó", "O"],
      ["ô", "o"],
      ["Ô", "O"],
      ["õ", "o"],
      ["Õ", "O"],
      ["ù", "u"],
      ["Ù", "U"],
      ["ú", "u"],
      ["Ú", "U"],
      ["ý", "y"],
      ["Ý", "Y"],
      ["ă", "a"],
      ["Ă", "A"],
      ["Đ", "D"],
      ["đ", "d"],
      ["ĩ", "i"],
      ["Ĩ", "I"],
      ["ũ", "u"],
      ["Ũ", "U"],
      ["ơ", "o"],
      ["Ơ", "O"],
      ["ư", "u"],
      ["Ư", "U"],
      ["ạ", "a"],
      ["Ạ", "A"],
      ["ả", "a"],
      ["Ả", "A"],
      ["ấ", "a"],
      ["Ấ", "A"],
      ["ầ", "a"],
      ["Ầ", "A"],
      ["ẩ", "a"],
      ["Ẩ", "A"],
      ["ẫ", "a"],
      ["Ẫ", "A"],
      ["ậ", "a"],
      ["Ậ", "A"],
      ["ắ", "a"],
      ["Ắ", "A"],
      ["ằ", "a"],
      ["Ằ", "A"],
      ["ẳ", "a"],
      ["Ẳ", "A"],
      ["ẵ", "a"],
      ["Ẵ", "A"],
      ["ặ", "a"],
      ["Ặ", "A"],
      ["ẹ", "e"],
      ["Ẹ", "E"],
      ["ẻ", "e"],
      ["Ẻ", "E"],
      ["ẽ", "e"],
      ["Ẽ", "E"],
      ["ế", "e"],
      ["Ế", "E"],
      ["ề", "e"],
      ["Ề", "E"],
      ["ể", "e"],
      ["Ể", "E"],
      ["ễ", "e"],
      ["Ễ", "E"],
      ["ệ", "e"],
      ["Ệ", "E"],
      ["ỉ", "i"],
      ["Ỉ", "I"],
      ["ị", "i"],
      ["Ị", "I"],
      ["ọ", "o"],
      ["Ọ", "O"],
      ["ỏ", "o"],
      ["Ỏ", "O"],
      ["ố", "o"],
      ["Ố", "O"],
      ["ồ", "o"],
      ["Ồ", "O"],
      ["ổ", "o"],
      ["Ổ", "O"],
      ["ỗ", "o"],
      ["Ỗ", "O"],
      ["ộ", "o"],
      ["Ộ", "O"],
      ["ớ", "o"],
      ["Ớ", "O"],
      ["ờ", "o"],
      ["Ờ", "O"],
      ["ở", "o"],
      ["Ở", "O"],
      ["ỡ", "o"],
      ["Ỡ", "O"],
      ["ợ", "o"],
      ["Ợ", "O"],
      ["ụ", "u"],
      ["Ụ", "U"],
      ["ủ", "u"],
      ["Ủ", "U"],
      ["ứ", "u"],
      ["Ứ", "U"],
      ["ừ", "u"],
      ["Ừ", "U"],
      ["ử", "u"],
      ["Ử", "U"],
      ["ữ", "u"],
      ["Ữ", "U"],
      ["ự", "u"],
      ["Ự", "U"],
      ["ỳ", "y"],
      ["Ỳ", "Y"],
      ["ỵ", "y"],
      ["Ỵ", "Y"],
      ["ỷ", "y"],
      ["Ỷ", "Y"],
      ["ỹ", "y"],
      ["Ỹ", "Y"],
      // Arabic
      ["ء", "e"],
      ["آ", "a"],
      ["أ", "a"],
      ["ؤ", "w"],
      ["إ", "i"],
      ["ئ", "y"],
      ["ا", "a"],
      ["ب", "b"],
      ["ة", "t"],
      ["ت", "t"],
      ["ث", "th"],
      ["ج", "j"],
      ["ح", "h"],
      ["خ", "kh"],
      ["د", "d"],
      ["ذ", "dh"],
      ["ر", "r"],
      ["ز", "z"],
      ["س", "s"],
      ["ش", "sh"],
      ["ص", "s"],
      ["ض", "d"],
      ["ط", "t"],
      ["ظ", "z"],
      ["ع", "e"],
      ["غ", "gh"],
      ["ـ", "_"],
      ["ف", "f"],
      ["ق", "q"],
      ["ك", "k"],
      ["ل", "l"],
      ["م", "m"],
      ["ن", "n"],
      ["ه", "h"],
      ["و", "w"],
      ["ى", "a"],
      ["ي", "y"],
      ["َ‎", "a"],
      ["ُ", "u"],
      ["ِ‎", "i"],
      ["٠", "0"],
      ["١", "1"],
      ["٢", "2"],
      ["٣", "3"],
      ["٤", "4"],
      ["٥", "5"],
      ["٦", "6"],
      ["٧", "7"],
      ["٨", "8"],
      ["٩", "9"],
      // Persian / Farsi
      ["چ", "ch"],
      ["ک", "k"],
      ["گ", "g"],
      ["پ", "p"],
      ["ژ", "zh"],
      ["ی", "y"],
      ["۰", "0"],
      ["۱", "1"],
      ["۲", "2"],
      ["۳", "3"],
      ["۴", "4"],
      ["۵", "5"],
      ["۶", "6"],
      ["۷", "7"],
      ["۸", "8"],
      ["۹", "9"],
      // Pashto
      ["ټ", "p"],
      ["ځ", "z"],
      ["څ", "c"],
      ["ډ", "d"],
      ["ﺫ", "d"],
      ["ﺭ", "r"],
      ["ړ", "r"],
      ["ﺯ", "z"],
      ["ږ", "g"],
      ["ښ", "x"],
      ["ګ", "g"],
      ["ڼ", "n"],
      ["ۀ", "e"],
      ["ې", "e"],
      ["ۍ", "ai"],
      // Urdu
      ["ٹ", "t"],
      ["ڈ", "d"],
      ["ڑ", "r"],
      ["ں", "n"],
      ["ہ", "h"],
      ["ھ", "h"],
      ["ے", "e"],
      // Russian
      ["А", "A"],
      ["а", "a"],
      ["Б", "B"],
      ["б", "b"],
      ["В", "V"],
      ["в", "v"],
      ["Г", "G"],
      ["г", "g"],
      ["Д", "D"],
      ["д", "d"],
      ["Е", "E"],
      ["е", "e"],
      ["Ж", "Zh"],
      ["ж", "zh"],
      ["З", "Z"],
      ["з", "z"],
      ["И", "I"],
      ["и", "i"],
      ["Й", "J"],
      ["й", "j"],
      ["К", "K"],
      ["к", "k"],
      ["Л", "L"],
      ["л", "l"],
      ["М", "M"],
      ["м", "m"],
      ["Н", "N"],
      ["н", "n"],
      ["О", "O"],
      ["о", "o"],
      ["П", "P"],
      ["п", "p"],
      ["Р", "R"],
      ["р", "r"],
      ["С", "S"],
      ["с", "s"],
      ["Т", "T"],
      ["т", "t"],
      ["У", "U"],
      ["у", "u"],
      ["Ф", "F"],
      ["ф", "f"],
      ["Х", "H"],
      ["х", "h"],
      ["Ц", "Cz"],
      ["ц", "cz"],
      ["Ч", "Ch"],
      ["ч", "ch"],
      ["Ш", "Sh"],
      ["ш", "sh"],
      ["Щ", "Shh"],
      ["щ", "shh"],
      ["Ъ", ""],
      ["ъ", ""],
      ["Ы", "Y"],
      ["ы", "y"],
      ["Ь", ""],
      ["ь", ""],
      ["Э", "E"],
      ["э", "e"],
      ["Ю", "Yu"],
      ["ю", "yu"],
      ["Я", "Ya"],
      ["я", "ya"],
      ["Ё", "Yo"],
      ["ё", "yo"],
      // Romanian
      ["ă", "a"],
      ["Ă", "A"],
      ["ș", "s"],
      ["Ș", "S"],
      ["ț", "t"],
      ["Ț", "T"],
      ["ţ", "t"],
      ["Ţ", "T"],
      // Turkish
      ["ş", "s"],
      ["Ş", "S"],
      ["ç", "c"],
      ["Ç", "C"],
      ["ğ", "g"],
      ["Ğ", "G"],
      ["ı", "i"],
      ["İ", "I"],
      // Armenian
      ["ա", "a"],
      ["Ա", "A"],
      ["բ", "b"],
      ["Բ", "B"],
      ["գ", "g"],
      ["Գ", "G"],
      ["դ", "d"],
      ["Դ", "D"],
      ["ե", "ye"],
      ["Ե", "Ye"],
      ["զ", "z"],
      ["Զ", "Z"],
      ["է", "e"],
      ["Է", "E"],
      ["ը", "y"],
      ["Ը", "Y"],
      ["թ", "t"],
      ["Թ", "T"],
      ["ժ", "zh"],
      ["Ժ", "Zh"],
      ["ի", "i"],
      ["Ի", "I"],
      ["լ", "l"],
      ["Լ", "L"],
      ["խ", "kh"],
      ["Խ", "Kh"],
      ["ծ", "ts"],
      ["Ծ", "Ts"],
      ["կ", "k"],
      ["Կ", "K"],
      ["հ", "h"],
      ["Հ", "H"],
      ["ձ", "dz"],
      ["Ձ", "Dz"],
      ["ղ", "gh"],
      ["Ղ", "Gh"],
      ["ճ", "tch"],
      ["Ճ", "Tch"],
      ["մ", "m"],
      ["Մ", "M"],
      ["յ", "y"],
      ["Յ", "Y"],
      ["ն", "n"],
      ["Ն", "N"],
      ["շ", "sh"],
      ["Շ", "Sh"],
      ["ո", "vo"],
      ["Ո", "Vo"],
      ["չ", "ch"],
      ["Չ", "Ch"],
      ["պ", "p"],
      ["Պ", "P"],
      ["ջ", "j"],
      ["Ջ", "J"],
      ["ռ", "r"],
      ["Ռ", "R"],
      ["ս", "s"],
      ["Ս", "S"],
      ["վ", "v"],
      ["Վ", "V"],
      ["տ", "t"],
      ["Տ", "T"],
      ["ր", "r"],
      ["Ր", "R"],
      ["ց", "c"],
      ["Ց", "C"],
      ["ու", "u"],
      ["ՈՒ", "U"],
      ["Ու", "U"],
      ["փ", "p"],
      ["Փ", "P"],
      ["ք", "q"],
      ["Ք", "Q"],
      ["օ", "o"],
      ["Օ", "O"],
      ["ֆ", "f"],
      ["Ֆ", "F"],
      ["և", "yev"],
      // Georgian
      ["ა", "a"],
      ["ბ", "b"],
      ["გ", "g"],
      ["დ", "d"],
      ["ე", "e"],
      ["ვ", "v"],
      ["ზ", "z"],
      ["თ", "t"],
      ["ი", "i"],
      ["კ", "k"],
      ["ლ", "l"],
      ["მ", "m"],
      ["ნ", "n"],
      ["ო", "o"],
      ["პ", "p"],
      ["ჟ", "zh"],
      ["რ", "r"],
      ["ს", "s"],
      ["ტ", "t"],
      ["უ", "u"],
      ["ფ", "ph"],
      ["ქ", "q"],
      ["ღ", "gh"],
      ["ყ", "k"],
      ["შ", "sh"],
      ["ჩ", "ch"],
      ["ც", "ts"],
      ["ძ", "dz"],
      ["წ", "ts"],
      ["ჭ", "tch"],
      ["ხ", "kh"],
      ["ჯ", "j"],
      ["ჰ", "h"],
      // Czech
      ["č", "c"],
      ["ď", "d"],
      ["ě", "e"],
      ["ň", "n"],
      ["ř", "r"],
      ["š", "s"],
      ["ť", "t"],
      ["ů", "u"],
      ["ž", "z"],
      ["Č", "C"],
      ["Ď", "D"],
      ["Ě", "E"],
      ["Ň", "N"],
      ["Ř", "R"],
      ["Š", "S"],
      ["Ť", "T"],
      ["Ů", "U"],
      ["Ž", "Z"],
      // Dhivehi
      ["ހ", "h"],
      ["ށ", "sh"],
      ["ނ", "n"],
      ["ރ", "r"],
      ["ބ", "b"],
      ["ޅ", "lh"],
      ["ކ", "k"],
      ["އ", "a"],
      ["ވ", "v"],
      ["މ", "m"],
      ["ފ", "f"],
      ["ދ", "dh"],
      ["ތ", "th"],
      ["ލ", "l"],
      ["ގ", "g"],
      ["ޏ", "gn"],
      ["ސ", "s"],
      ["ޑ", "d"],
      ["ޒ", "z"],
      ["ޓ", "t"],
      ["ޔ", "y"],
      ["ޕ", "p"],
      ["ޖ", "j"],
      ["ޗ", "ch"],
      ["ޘ", "tt"],
      ["ޙ", "hh"],
      ["ޚ", "kh"],
      ["ޛ", "th"],
      ["ޜ", "z"],
      ["ޝ", "sh"],
      ["ޞ", "s"],
      ["ޟ", "d"],
      ["ޠ", "t"],
      ["ޡ", "z"],
      ["ޢ", "a"],
      ["ޣ", "gh"],
      ["ޤ", "q"],
      ["ޥ", "w"],
      ["ަ", "a"],
      ["ާ", "aa"],
      ["ި", "i"],
      ["ީ", "ee"],
      ["ު", "u"],
      ["ޫ", "oo"],
      ["ެ", "e"],
      ["ޭ", "ey"],
      ["ޮ", "o"],
      ["ޯ", "oa"],
      ["ް", ""],
      // Greek
      ["α", "a"],
      ["β", "v"],
      ["γ", "g"],
      ["δ", "d"],
      ["ε", "e"],
      ["ζ", "z"],
      ["η", "i"],
      ["θ", "th"],
      ["ι", "i"],
      ["κ", "k"],
      ["λ", "l"],
      ["μ", "m"],
      ["ν", "n"],
      ["ξ", "ks"],
      ["ο", "o"],
      ["π", "p"],
      ["ρ", "r"],
      ["σ", "s"],
      ["τ", "t"],
      ["υ", "y"],
      ["φ", "f"],
      ["χ", "x"],
      ["ψ", "ps"],
      ["ω", "o"],
      ["ά", "a"],
      ["έ", "e"],
      ["ί", "i"],
      ["ό", "o"],
      ["ύ", "y"],
      ["ή", "i"],
      ["ώ", "o"],
      ["ς", "s"],
      ["ϊ", "i"],
      ["ΰ", "y"],
      ["ϋ", "y"],
      ["ΐ", "i"],
      ["Α", "A"],
      ["Β", "B"],
      ["Γ", "G"],
      ["Δ", "D"],
      ["Ε", "E"],
      ["Ζ", "Z"],
      ["Η", "I"],
      ["Θ", "TH"],
      ["Ι", "I"],
      ["Κ", "K"],
      ["Λ", "L"],
      ["Μ", "M"],
      ["Ν", "N"],
      ["Ξ", "KS"],
      ["Ο", "O"],
      ["Π", "P"],
      ["Ρ", "R"],
      ["Σ", "S"],
      ["Τ", "T"],
      ["Υ", "Y"],
      ["Φ", "F"],
      ["Χ", "X"],
      ["Ψ", "PS"],
      ["Ω", "O"],
      ["Ά", "A"],
      ["Έ", "E"],
      ["Ί", "I"],
      ["Ό", "O"],
      ["Ύ", "Y"],
      ["Ή", "I"],
      ["Ώ", "O"],
      ["Ϊ", "I"],
      ["Ϋ", "Y"],
      // Disabled as it conflicts with German and Latin.
      // Hungarian
      // ['ä', 'a'],
      // ['Ä', 'A'],
      // ['ö', 'o'],
      // ['Ö', 'O'],
      // ['ü', 'u'],
      // ['Ü', 'U'],
      // ['ű', 'u'],
      // ['Ű', 'U'],
      // Latvian
      ["ā", "a"],
      ["ē", "e"],
      ["ģ", "g"],
      ["ī", "i"],
      ["ķ", "k"],
      ["ļ", "l"],
      ["ņ", "n"],
      ["ū", "u"],
      ["Ā", "A"],
      ["Ē", "E"],
      ["Ģ", "G"],
      ["Ī", "I"],
      ["Ķ", "K"],
      ["Ļ", "L"],
      ["Ņ", "N"],
      ["Ū", "U"],
      ["č", "c"],
      ["š", "s"],
      ["ž", "z"],
      ["Č", "C"],
      ["Š", "S"],
      ["Ž", "Z"],
      // Lithuanian
      ["ą", "a"],
      ["č", "c"],
      ["ę", "e"],
      ["ė", "e"],
      ["į", "i"],
      ["š", "s"],
      ["ų", "u"],
      ["ū", "u"],
      ["ž", "z"],
      ["Ą", "A"],
      ["Č", "C"],
      ["Ę", "E"],
      ["Ė", "E"],
      ["Į", "I"],
      ["Š", "S"],
      ["Ų", "U"],
      ["Ū", "U"],
      // Macedonian
      ["Ќ", "Kj"],
      ["ќ", "kj"],
      ["Љ", "Lj"],
      ["љ", "lj"],
      ["Њ", "Nj"],
      ["њ", "nj"],
      ["Тс", "Ts"],
      ["тс", "ts"],
      // Polish
      ["ą", "a"],
      ["ć", "c"],
      ["ę", "e"],
      ["ł", "l"],
      ["ń", "n"],
      ["ś", "s"],
      ["ź", "z"],
      ["ż", "z"],
      ["Ą", "A"],
      ["Ć", "C"],
      ["Ę", "E"],
      ["Ł", "L"],
      ["Ń", "N"],
      ["Ś", "S"],
      ["Ź", "Z"],
      ["Ż", "Z"],
      // Disabled as it conflicts with Vietnamese.
      // Serbian
      // ['љ', 'lj'],
      // ['њ', 'nj'],
      // ['Љ', 'Lj'],
      // ['Њ', 'Nj'],
      // ['đ', 'dj'],
      // ['Đ', 'Dj'],
      // ['ђ', 'dj'],
      // ['ј', 'j'],
      // ['ћ', 'c'],
      // ['џ', 'dz'],
      // ['Ђ', 'Dj'],
      // ['Ј', 'j'],
      // ['Ћ', 'C'],
      // ['Џ', 'Dz'],
      // Disabled as it conflicts with German and Latin.
      // Slovak
      // ['ä', 'a'],
      // ['Ä', 'A'],
      // ['ľ', 'l'],
      // ['ĺ', 'l'],
      // ['ŕ', 'r'],
      // ['Ľ', 'L'],
      // ['Ĺ', 'L'],
      // ['Ŕ', 'R'],
      // Disabled as it conflicts with German and Latin.
      // Swedish
      // ['å', 'o'],
      // ['Å', 'o'],
      // ['ä', 'a'],
      // ['Ä', 'A'],
      // ['ë', 'e'],
      // ['Ë', 'E'],
      // ['ö', 'o'],
      // ['Ö', 'O'],
      // Ukrainian
      ["Є", "Ye"],
      ["І", "I"],
      ["Ї", "Yi"],
      ["Ґ", "G"],
      ["є", "ye"],
      ["і", "i"],
      ["ї", "yi"],
      ["ґ", "g"]
      // Danish
      // ['Æ', 'Ae'],
      // ['Ø', 'Oe'],
      // ['Å', 'Aa'],
      // ['æ', 'ae'],
      // ['ø', 'oe'],
      // ['å', 'aa']
    ];
  }
});

// node_modules/@sindresorhus/transliterate/index.js
var require_transliterate = __commonJS({
  "node_modules/@sindresorhus/transliterate/index.js"(exports, module) {
    "use strict";
    var deburr = require_lodash2();
    var escapeStringRegexp = require_escape_string_regexp2();
    var builtinReplacements = require_replacements();
    var doCustomReplacements = (string, replacements) => {
      for (const [key, value] of replacements) {
        string = string.replace(new RegExp(escapeStringRegexp(key), "g"), value);
      }
      return string;
    };
    module.exports = (string, options) => {
      if (typeof string !== "string") {
        throw new TypeError(`Expected a string, got \`${typeof string}\``);
      }
      options = {
        customReplacements: [],
        ...options
      };
      const customReplacements = new Map([
        ...builtinReplacements,
        ...options.customReplacements
      ]);
      string = string.normalize();
      string = doCustomReplacements(string, customReplacements);
      string = deburr(string);
      return string;
    };
  }
});

// node_modules/@sindresorhus/slugify/overridable-replacements.js
var require_overridable_replacements = __commonJS({
  "node_modules/@sindresorhus/slugify/overridable-replacements.js"(exports, module) {
    "use strict";
    module.exports = [
      ["&", " and "],
      ["🦄", " unicorn "],
      ["♥", " love "]
    ];
  }
});

// node_modules/@sindresorhus/slugify/index.js
var require_slugify = __commonJS({
  "node_modules/@sindresorhus/slugify/index.js"(exports, module) {
    "use strict";
    var escapeStringRegexp = require_escape_string_regexp();
    var transliterate = require_transliterate();
    var builtinOverridableReplacements = require_overridable_replacements();
    var decamelize = (string) => {
      return string.replace(/([A-Z]{2,})(\d+)/g, "$1 $2").replace(/([a-z\d]+)([A-Z]{2,})/g, "$1 $2").replace(/([a-z\d])([A-Z])/g, "$1 $2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1 $2");
    };
    var removeMootSeparators = (string, separator) => {
      const escapedSeparator = escapeStringRegexp(separator);
      return string.replace(new RegExp(`${escapedSeparator}{2,}`, "g"), separator).replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, "g"), "");
    };
    var slugify2 = (string, options) => {
      if (typeof string !== "string") {
        throw new TypeError(`Expected a string, got \`${typeof string}\``);
      }
      options = {
        separator: "-",
        lowercase: true,
        decamelize: true,
        customReplacements: [],
        preserveLeadingUnderscore: false,
        ...options
      };
      const shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith("_");
      const customReplacements = new Map([
        ...builtinOverridableReplacements,
        ...options.customReplacements
      ]);
      string = transliterate(string, { customReplacements });
      if (options.decamelize) {
        string = decamelize(string);
      }
      let patternSlug = /[^a-zA-Z\d]+/g;
      if (options.lowercase) {
        string = string.toLowerCase();
        patternSlug = /[^a-z\d]+/g;
      }
      string = string.replace(patternSlug, options.separator);
      string = string.replace(/\\/g, "");
      if (options.separator) {
        string = removeMootSeparators(string, options.separator);
      }
      if (shouldPrependUnderscore) {
        string = `_${string}`;
      }
      return string;
    };
    var counter = () => {
      const occurrences = /* @__PURE__ */ new Map();
      const countable = (string, options) => {
        string = slugify2(string, options);
        if (!string) {
          return "";
        }
        const stringLower = string.toLowerCase();
        const numberless = occurrences.get(stringLower.replace(/(?:-\d+?)+?$/, "")) || 0;
        const counter2 = occurrences.get(stringLower);
        occurrences.set(stringLower, typeof counter2 === "number" ? counter2 + 1 : 1);
        const newCounter = occurrences.get(stringLower) || 2;
        if (newCounter >= 2 || numberless > 2) {
          string = `${string}-${newCounter}`;
        }
        return string;
      };
      countable.reset = () => {
        occurrences.clear();
      };
      return countable;
    };
    module.exports = slugify2;
    module.exports.counter = counter;
  }
});

// node_modules/@strapi/content-type-builder/node_modules/@strapi/icons/dist/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var SvgAlien = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 2A12.014 12.014 0 0 0 4 14c0 3 1.57 6.883 4.201 10.375C10.85 27.894 13.764 30 16 30s5.151-2.101 7.799-5.625C26.43 20.875 28 17 28 14A12.014 12.014 0 0 0 16 2M8 14.5A1.5 1.5 0 0 1 9.5 13a4.5 4.5 0 0 1 4.5 4.5 1.5 1.5 0 0 1-1.5 1.5A4.5 4.5 0 0 1 8 14.5M18 25h-4a1 1 0 0 1 0-2h4a1 1 0 0 1 0 2m1.5-6a1.5 1.5 0 0 1-1.5-1.5 4.5 4.5 0 0 1 4.5-4.5 1.5 1.5 0 0 1 1.5 1.5 4.5 4.5 0 0 1-4.5 4.5" }) });
};
var ForwardRef$5q = (0, import_react.forwardRef)(SvgAlien);
var ForwardRef$5r = ForwardRef$5q;
var SvgArchive = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28 6H4a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2v11a2 2 0 0 0 2 2h20a2 2 0 0 0 2-2V13a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2m-9 12h-6a1 1 0 0 1 0-2h6a1 1 0 0 1 0 2m9-7H4V8h24z" }) });
};
var ForwardRef$5o = (0, import_react.forwardRef)(SvgArchive);
var ForwardRef$5p = ForwardRef$5o;
var SvgArrowClockwise = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30.5 7v6a1.5 1.5 0 0 1-1.5 1.5h-6a1.5 1.5 0 0 1 0-3h2.137l-2.375-2.173-.047-.046a9.5 9.5 0 1 0-6.84 16.219H16a9.44 9.44 0 0 0 6.519-2.59 1.5 1.5 0 1 1 2.061 2.181A12.43 12.43 0 0 1 16 28.5h-.171a12.5 12.5 0 1 1 8.985-21.368L27.5 9.59V7a1.5 1.5 0 0 1 3 0" }) });
};
var ForwardRef$5m = (0, import_react.forwardRef)(SvgArrowClockwise);
var ForwardRef$5n = ForwardRef$5m;
var SvgArrowDown = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m26.061 19.061-9 9a1.503 1.503 0 0 1-2.125 0l-9-9a1.503 1.503 0 1 1 2.125-2.125l6.439 6.439V5a1.5 1.5 0 1 1 3 0v18.375l6.439-6.44a1.502 1.502 0 1 1 2.125 2.125z" }) });
};
var ForwardRef$5k = (0, import_react.forwardRef)(SvgArrowDown);
var ForwardRef$5l = ForwardRef$5k;
var SvgArrowLeft = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5H8.625l6.44 6.439a1.502 1.502 0 1 1-2.125 2.125l-9-9a1.5 1.5 0 0 1 0-2.125l9-9a1.503 1.503 0 0 1 2.125 2.125L8.625 14.5H27a1.5 1.5 0 0 1 1.5 1.5" }) });
};
var ForwardRef$5i = (0, import_react.forwardRef)(SvgArrowLeft);
var ForwardRef$5j = ForwardRef$5i;
var SvgArrowLineLeft = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill, viewBox: "0 0 16 16", stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M14.75 8a.75.75 0 0 1-.75.75H6.813l3.22 3.22a.751.751 0 1 1-1.063 1.062l-4.5-4.5a.75.75 0 0 1 0-1.063l4.5-4.5a.751.751 0 0 1 1.063 1.063L6.813 7.25H14a.75.75 0 0 1 .75.75M2.5 1.75a.75.75 0 0 0-.75.75v11a.75.75 0 0 0 1.5 0v-11a.75.75 0 0 0-.75-.75" }) });
};
var ForwardRef$5g = (0, import_react.forwardRef)(SvgArrowLineLeft);
var SvgArrowLineRight = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill, viewBox: "0 0 16 16", stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M11.53 7.47a.75.75 0 0 1 0 1.062l-4.5 4.5a.751.751 0 1 1-1.062-1.063l3.22-3.219H2a.75.75 0 1 1 0-1.5h7.188L5.969 4.03a.751.751 0 1 1 1.063-1.062zm1.97-5.72a.75.75 0 0 0-.75.75v11a.75.75 0 0 0 1.5 0v-11a.75.75 0 0 0-.75-.75" }) });
};
var ForwardRef$5e = (0, import_react.forwardRef)(SvgArrowLineRight);
var SvgArrowRight = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m28.061 17.061-9 9a1.503 1.503 0 1 1-2.125-2.125l6.439-6.436H5a1.5 1.5 0 1 1 0-3h18.375l-6.436-6.44a1.503 1.503 0 0 1 2.125-2.125l9 9a1.5 1.5 0 0 1-.003 2.126" }) });
};
var ForwardRef$5c = (0, import_react.forwardRef)(SvgArrowRight);
var ForwardRef$5d = ForwardRef$5c;
var SvgArrowUp = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26.061 15.061a1.5 1.5 0 0 1-2.125 0L17.5 8.625V27a1.5 1.5 0 1 1-3 0V8.625l-6.439 6.436a1.503 1.503 0 1 1-2.125-2.125l9-9a1.5 1.5 0 0 1 2.125 0l9 9a1.5 1.5 0 0 1 0 2.125" }) });
};
var ForwardRef$5a = (0, import_react.forwardRef)(SvgArrowUp);
var ForwardRef$5b = ForwardRef$5a;
var SvgArrowsCounterClockwise = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M11 13.5H5A1.5 1.5 0 0 1 3.5 12V6a1.5 1.5 0 0 1 3 0v1.733C8.581 5.683 11.786 3.5 16 3.5c5.558 0 8.92 3.299 9.061 3.439a1.5 1.5 0 0 1-2.117 2.125C22.889 9.01 20.25 6.5 16 6.5c-3.625 0-6.367 2.21-8 4h3a1.5 1.5 0 1 1 0 3m16 5h-6a1.5 1.5 0 1 0 0 3h3c-1.625 1.79-4.375 4-8 4-4.25 0-6.889-2.511-6.944-2.565A1.5 1.5 0 0 0 6.94 25.06c.141.141 3.504 3.44 9.061 3.44 4.214 0 7.419-2.183 9.5-4.233V26a1.5 1.5 0 1 0 3 0v-6a1.5 1.5 0 0 0-1.5-1.5" }) });
};
var ForwardRef$58 = (0, import_react.forwardRef)(SvgArrowsCounterClockwise);
var ForwardRef$59 = ForwardRef$58;
var SvgArrowsOut = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 256 256", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M220 48v48a12 12 0 0 1-24 0V77l-39.51 39.52a12 12 0 0 1-17-17L179 60h-19a12 12 0 0 1 0-24h48a12 12 0 0 1 12 12M99.51 139.51 60 179v-19a12 12 0 0 0-24 0v48a12 12 0 0 0 12 12h48a12 12 0 0 0 0-24H77l39.52-39.51a12 12 0 0 0-17-17Z" }) });
};
var ForwardRef$56 = (0, import_react.forwardRef)(SvgArrowsOut);
var SvgBell = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27.725 21.993C27.031 20.798 26 17.416 26 13a10 10 0 0 0-20 0c0 4.418-1.032 7.797-1.726 8.993A2 2 0 0 0 6 25h5.101a5 5 0 0 0 9.798 0H26a2 2 0 0 0 1.725-3.008M16 27a3 3 0 0 1-2.828-2h5.656A3 3 0 0 1 16 27" }) });
};
var ForwardRef$54 = (0, import_react.forwardRef)(SvgBell);
var ForwardRef$55 = ForwardRef$54;
var SvgBold = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M22.135 14.308A6.001 6.001 0 0 0 17.5 4.5H9A1.5 1.5 0 0 0 7.5 6v19A1.5 1.5 0 0 0 9 26.5h10a6.5 6.5 0 0 0 3.135-12.192M10.5 7.5h7a3 3 0 0 1 0 6h-7zm8.5 16h-8.5v-7H19a3.5 3.5 0 1 1 0 7" }) });
};
var ForwardRef$52 = (0, import_react.forwardRef)(SvgBold);
var ForwardRef$53 = ForwardRef$52;
var SvgBook = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 4v20a1 1 0 0 1-1 1H9a2 2 0 0 0-2 2h17a1 1 0 0 1 0 2H6a1 1 0 0 1-1-1V7a4 4 0 0 1 4-4h17a1 1 0 0 1 1 1" }) });
};
var ForwardRef$50 = (0, import_react.forwardRef)(SvgBook);
var ForwardRef$51 = ForwardRef$50;
var SvgBriefcase = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M19 14a1 1 0 0 1-1 1h-4a1 1 0 0 1 0-2h4a1 1 0 0 1 1 1m10-5v16a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h5V6a3 3 0 0 1 3-3h6a3 3 0 0 1 3 3v1h5a2 2 0 0 1 2 2M12 7h8V6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1zm15 7.201V9H5v5.201A23 23 0 0 0 16 17a23 23 0 0 0 11-2.799" }) });
};
var ForwardRef$4_ = (0, import_react.forwardRef)(SvgBriefcase);
var ForwardRef$4$ = ForwardRef$4_;
var SvgBulletList = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M9.5 8A1.5 1.5 0 0 1 11 6.5h16a1.5 1.5 0 0 1 0 3H11A1.5 1.5 0 0 1 9.5 8M27 14.5H11a1.5 1.5 0 1 0 0 3h16a1.5 1.5 0 1 0 0-3m0 8H11a1.5 1.5 0 1 0 0 3h16a1.5 1.5 0 1 0 0-3M5.5 14a2 2 0 1 0 0 4 2 2 0 0 0 0-4m0-8a2 2 0 1 0 0 4 2 2 0 0 0 0-4m0 16a2 2 0 1 0 0 4 2 2 0 0 0 0-4" }) });
};
var ForwardRef$4Y = (0, import_react.forwardRef)(SvgBulletList);
var ForwardRef$4Z = ForwardRef$4Y;
var SvgCalendar = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26 4h-3V3a1 1 0 0 0-2 0v1H11V3a1 1 0 0 0-2 0v1H6a2 2 0 0 0-2 2v20a2 2 0 0 0 2 2h20a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2m0 6H6V6h3v1a1 1 0 0 0 2 0V6h10v1a1 1 0 0 0 2 0V6h3z" }) });
};
var ForwardRef$4W = (0, import_react.forwardRef)(SvgCalendar);
var ForwardRef$4X = ForwardRef$4W;
var SvgCar = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30 14h-1.35l-3.472-7.812A2 2 0 0 0 23.35 5H8.65a2 2 0 0 0-1.828 1.188L3.35 14H2a1 1 0 0 0 0 2h1v10a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2v-2h12v2a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2V16h1a1 1 0 0 0 0-2m-20 6H8a1 1 0 0 1 0-2h2a1 1 0 0 1 0 2m12 0a1 1 0 0 1 0-2h2a1 1 0 0 1 0 2z" }) });
};
var ForwardRef$4U = (0, import_react.forwardRef)(SvgCar);
var ForwardRef$4V = ForwardRef$4U;
var SvgCaretDown = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m26.708 12.708-10 10a1 1 0 0 1-1.415 0l-10-10A1 1 0 0 1 6 11h20a1 1 0 0 1 .707 1.707" }) });
};
var ForwardRef$4S = (0, import_react.forwardRef)(SvgCaretDown);
var ForwardRef$4T = ForwardRef$4S;
var SvgCaretUp = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26.924 20.383A1 1 0 0 1 26 21H6a1 1 0 0 1-.708-1.707l10-10a1 1 0 0 1 1.415 0l10 10a1 1 0 0 1 .217 1.09" }) });
};
var ForwardRef$4Q = (0, import_react.forwardRef)(SvgCaretUp);
var SvgCast = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M7 26a1 1 0 1 1-2 0 1 1 0 0 0-1-1 1 1 0 0 1 0-2 3 3 0 0 1 3 3m-3-7a1 1 0 0 0 0 2 5 5 0 0 1 5 5 1 1 0 1 0 2 0 7.01 7.01 0 0 0-7-7m0-4a1 1 0 0 0 0 2 9.01 9.01 0 0 1 9 9 1 1 0 0 0 2 0A11.01 11.01 0 0 0 4 15M27 5H5a2 2 0 0 0-2 2v5a1 1 0 0 0 1 1 13.014 13.014 0 0 1 13 13 1 1 0 0 0 1 1h9a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2" }) });
};
var ForwardRef$4O = (0, import_react.forwardRef)(SvgCast);
var ForwardRef$4P = ForwardRef$4O;
var SvgCastleTurret = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M25 3h-1a2 2 0 0 0-2 2v2h-3.5V5a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v2H10V5a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v5.586A1.98 1.98 0 0 0 5.586 12L7 13.414V27a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V13.414L26.414 12A1.98 1.98 0 0 0 27 10.586V5a2 2 0 0 0-2-2m-6 24h-6v-8a3 3 0 0 1 6 0z" }) });
};
var ForwardRef$4M = (0, import_react.forwardRef)(SvgCastleTurret);
var ForwardRef$4N = ForwardRef$4M;
var SvgChartBubble = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 5H5a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h22a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-3.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m0 7a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m-5-2a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m-3-5a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m-3 7a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3M25 24H7a1 1 0 0 1-1-1V9a1 1 0 0 1 2 0v13h17a1 1 0 0 1 0 2" }) });
};
var ForwardRef$4K = (0, import_react.forwardRef)(SvgChartBubble);
var ForwardRef$4L = ForwardRef$4K;
var SvgChartCircle = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M3.094 14.443a12.8 12.8 0 0 1 2.914-6.72 2 2 0 0 1 2.953-.138l3.459 3.533a1.98 1.98 0 0 1 .211 2.56 3.2 3.2 0 0 0-.462.968.5.5 0 0 1-.478.354h-8.1a.5.5 0 0 1-.497-.557m14.08-11.435A2 2 0 0 0 15 5v5.084a1.98 1.98 0 0 0 1.656 1.97 4 4 0 0 1 .677 7.72.51.51 0 0 0-.333.476v8.154a.5.5 0 0 0 .558.5A13.04 13.04 0 0 0 29 16.185C29.094 9.4 23.899 3.61 17.174 3.008M14.656 19.77a4 4 0 0 1-2.425-2.427.51.51 0 0 0-.475-.343H3.59a.5.5 0 0 0-.5.556A13.01 13.01 0 0 0 14.443 28.91a.5.5 0 0 0 .556-.5V20.25a.51.51 0 0 0-.343-.48" }) });
};
var ForwardRef$4I = (0, import_react.forwardRef)(SvgChartCircle);
var ForwardRef$4J = ForwardRef$4I;
var SvgChartPie = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m0 2a11 11 0 0 1 8.984 4.659L16 14.845zm0 22a11 11 0 0 1-8.984-4.659l18.97-10.951A11 11 0 0 1 16 27" }) });
};
var ForwardRef$4G = (0, import_react.forwardRef)(SvgChartPie);
var ForwardRef$4H = ForwardRef$4G;
var SvgCheck = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m29.061 10.061-16 16a1.5 1.5 0 0 1-2.125 0l-7-7a1.504 1.504 0 0 1 2.125-2.125L12 22.875 26.939 7.939a1.502 1.502 0 1 1 2.125 2.125z" }) });
};
var ForwardRef$4E = (0, import_react.forwardRef)(SvgCheck);
var ForwardRef$4F = ForwardRef$4E;
var SvgCheckCircle = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m5.708 10.708-7 7a1 1 0 0 1-1.415 0l-3-3a1 1 0 0 1 1.415-1.415L14 18.586l6.293-6.293a1 1 0 0 1 1.415 1.415" }) });
};
var ForwardRef$4C = (0, import_react.forwardRef)(SvgCheckCircle);
var SvgCheckCircleEmpty = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 256 256", fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M176.49 95.51a12 12 0 0 1 0 17l-56 56a12 12 0 0 1-17 0l-24-24a12 12 0 1 1 17-17L112 143l47.51-47.52a12 12 0 0 1 16.98.03M236 128A108 108 0 1 1 128 20a108.12 108.12 0 0 1 108 108m-24 0a84 84 0 1 0-84 84 84.09 84.09 0 0 0 84-84" }) });
};
var ForwardRef$4A = (0, import_react.forwardRef)(SvgCheckCircleEmpty);
var SvgChevronDown = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m27.061 13.061-10 10a1.503 1.503 0 0 1-2.125 0l-10-10a1.503 1.503 0 1 1 2.125-2.125L16 19.875l8.939-8.94a1.502 1.502 0 1 1 2.125 2.125z" }) });
};
var ForwardRef$4y = (0, import_react.forwardRef)(SvgChevronDown);
var SvgChevronLeft = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M21.061 24.939a1.503 1.503 0 0 1-2.125 2.125l-10-10a1.5 1.5 0 0 1 0-2.125l10-10a1.503 1.503 0 0 1 2.125 2.125L12.125 16z" }) });
};
var ForwardRef$4w = (0, import_react.forwardRef)(SvgChevronLeft);
var ForwardRef$4x = ForwardRef$4w;
var SvgChevronRight = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m23.061 17.061-10 10a1.503 1.503 0 0 1-2.125-2.125L19.875 16l-8.936-8.939a1.502 1.502 0 1 1 2.125-2.125l10 10a1.5 1.5 0 0 1-.003 2.125" }) });
};
var ForwardRef$4u = (0, import_react.forwardRef)(SvgChevronRight);
var ForwardRef$4v = ForwardRef$4u;
var SvgChevronUp = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27.061 21.061a1.503 1.503 0 0 1-2.125 0L16 12.125l-8.939 8.936a1.503 1.503 0 0 1-2.125-2.125l10-10a1.5 1.5 0 0 1 2.125 0l10 10a1.5 1.5 0 0 1 0 2.125" }) });
};
var ForwardRef$4s = (0, import_react.forwardRef)(SvgChevronUp);
var SvgClock = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m7 14h-7a1 1 0 0 1-1-1V9a1 1 0 0 1 2 0v6h6a1 1 0 0 1 0 2" }) });
};
var ForwardRef$4q = (0, import_react.forwardRef)(SvgClock);
var ForwardRef$4r = ForwardRef$4q;
var SvgClockCounterClockwise = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28 16a12 12 0 0 1-20.236 8.728 1.002 1.002 0 0 1 1.375-1.456 10 10 0 1 0-.21-14.343c-.441.446-.857.885-1.26 1.321l2.039 2.043A1 1 0 0 1 9 14H4a1 1 0 0 1-1-1V8a1 1 0 0 1 1.707-.707L6.25 8.838c.402-.437.817-.875 1.258-1.32A12 12 0 0 1 28 16M16 9a1 1 0 0 0-1 1v6a1 1 0 0 0 .485.858l5 3a.999.999 0 0 0 1.486-1.1 1 1 0 0 0-.456-.616L17 15.434V10a1 1 0 0 0-1-1" }) });
};
var ForwardRef$4o = (0, import_react.forwardRef)(SvgClockCounterClockwise);
var SvgCloud = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M20.008 5a11.01 11.01 0 0 0-9.847 6.084A10.9 10.9 0 0 0 9 15.966 1.023 1.023 0 0 1 8.071 17 1 1 0 0 1 7 16a13 13 0 0 1 .668-4.115.5.5 0 0 0-.594-.647A8.01 8.01 0 0 0 1 19c0 4.399 3.719 8 8.125 8H20a11.01 11.01 0 0 0 10.991-11.435C30.764 9.693 25.884 5 20.008 5" }) });
};
var ForwardRef$4m = (0, import_react.forwardRef)(SvgCloud);
var ForwardRef$4n = ForwardRef$4m;
var SvgCloudUpload = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30.991 15.565C30.764 9.693 25.884 5 20.008 5a11.01 11.01 0 0 0-9.847 6.084A10.9 10.9 0 0 0 9 15.966 1.023 1.023 0 0 1 8.071 17 1 1 0 0 1 7 16a13 13 0 0 1 .668-4.115.5.5 0 0 0-.594-.647A8.01 8.01 0 0 0 1 19c0 4.399 3.719 8 8.125 8H20a11.01 11.01 0 0 0 10.991-11.435m-7.283 3.143a1 1 0 0 1-1.415 0L20 16.414V24a1 1 0 0 1-2 0v-7.586l-2.293 2.293a1 1 0 0 1-1.415-1.415l4-4a1 1 0 0 1 1.415 0l4 4a1 1 0 0 1 0 1.415" }) });
};
var ForwardRef$4k = (0, import_react.forwardRef)(SvgCloudUpload);
var SvgCode = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M8.96 12.153 4.342 16l4.618 3.848a1.5 1.5 0 1 1-1.92 2.305l-6-5a1.5 1.5 0 0 1 0-2.305l6-5a1.5 1.5 0 0 1 1.92 2.304m22 2.694-6-5a1.5 1.5 0 1 0-1.92 2.306L27.658 16l-4.618 3.848a1.5 1.5 0 1 0 1.92 2.305l6-5a1.5 1.5 0 0 0 0-2.305M20.512 3.59a1.5 1.5 0 0 0-1.922.898l-8 22a1.5 1.5 0 0 0 2.82 1.024l8-22a1.5 1.5 0 0 0-.898-1.922" }) });
};
var ForwardRef$4i = (0, import_react.forwardRef)(SvgCode);
var ForwardRef$4j = ForwardRef$4i;
var SvgCodeBlock = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 256 256", fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M200 40h-32a16 16 0 0 0-16-16H32a16 16 0 0 0-16 16v80a16 16 0 0 0 16 16h8v64a16 16 0 0 0 16 16h144a16 16 0 0 0 16-16V56a16 16 0 0 0-16-16m-93.66 21.66a8 8 0 0 1 11.32-11.32l24 24a8 8 0 0 1 0 11.32l-24 24a8 8 0 0 1-11.32-11.32L124.69 80Zm-64 24a8 8 0 0 1 0-11.32l24-24a8 8 0 0 1 11.32 11.32L59.31 80l18.35 18.34a8 8 0 0 1-11.32 11.32ZM200 200H56v-64h96a16 16 0 0 0 16-16V56h32Z" }) });
};
var ForwardRef$4g = (0, import_react.forwardRef)(SvgCodeBlock);
var SvgCoffee = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26 10H4a1 1 0 0 0-1 1v6a12.04 12.04 0 0 0 4.068 9H4a1 1 0 0 0 0 2h22a1 1 0 0 0 0-2h-3.067a12.1 12.1 0 0 0 3.375-5.011A5 5 0 0 0 31 16v-1a5 5 0 0 0-5-5m3 6a3 3 0 0 1-2.15 2.875Q27 17.944 27 17v-4.828A3 3 0 0 1 29 15zM14 7V3a1 1 0 0 1 2 0v4a1 1 0 0 1-2 0m4 0V3a1 1 0 0 1 2 0v4a1 1 0 0 1-2 0m-8 0V3a1 1 0 0 1 2 0v4a1 1 0 0 1-2 0" }) });
};
var ForwardRef$4e = (0, import_react.forwardRef)(SvgCoffee);
var ForwardRef$4f = ForwardRef$4e;
var SvgCog = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29.743 13.401a1 1 0 0 0-.487-.675l-3.729-2.125-.015-4.202a1 1 0 0 0-.353-.76 14 14 0 0 0-4.59-2.584 1 1 0 0 0-.808.074L16 5.23l-3.765-2.106a1 1 0 0 0-.809-.075 14 14 0 0 0-4.585 2.594 1 1 0 0 0-.354.758L6.47 10.61 2.74 12.734a1 1 0 0 0-.486.675 13.3 13.3 0 0 0 0 5.195 1 1 0 0 0 .486.675l3.729 2.125.015 4.204a1 1 0 0 0 .353.76 14 14 0 0 0 4.59 2.583 1 1 0 0 0 .808-.073L16 26.768l3.765 2.107a1.013 1.013 0 0 0 .809.073 14 14 0 0 0 4.585-2.592 1 1 0 0 0 .354-.759l.018-4.206 3.729-2.125a1 1 0 0 0 .486-.675c.34-1.713.338-3.477-.003-5.19M16 21a5 5 0 1 1 0-10 5 5 0 0 1 0 10" }) });
};
var ForwardRef$4c = (0, import_react.forwardRef)(SvgCog);
var ForwardRef$4d = ForwardRef$4c;
var SvgCollapse = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M18.5 12V6a1.5 1.5 0 1 1 3 0v4.5H26a1.5 1.5 0 1 1 0 3h-6a1.5 1.5 0 0 1-1.5-1.5M12 18.5H6a1.5 1.5 0 1 0 0 3h4.5V26a1.5 1.5 0 1 0 3 0v-6a1.5 1.5 0 0 0-1.5-1.5m14 0h-6a1.5 1.5 0 0 0-1.5 1.5v6a1.5 1.5 0 1 0 3 0v-4.5H26a1.5 1.5 0 1 0 0-3m-14-14A1.5 1.5 0 0 0 10.5 6v4.5H6a1.5 1.5 0 1 0 0 3h6a1.5 1.5 0 0 0 1.5-1.5V6A1.5 1.5 0 0 0 12 4.5" }) });
};
var ForwardRef$4a = (0, import_react.forwardRef)(SvgCollapse);
var ForwardRef$4b = ForwardRef$4a;
var SvgCommand = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M22.5 17.5h-2v-3h2a5 5 0 1 0-5-5v2h-3v-2a5 5 0 1 0-5 5h2v3h-2a5 5 0 1 0 5 5v-2h3v2a5 5 0 1 0 5-5m-2-8a2 2 0 1 1 2 2h-2zm-13 0a2 2 0 0 1 4 0v2h-2a2 2 0 0 1-2-2m4 13a2 2 0 1 1-2-2h2zm3-8h3v3h-3zm8 10a2 2 0 0 1-2-2v-2h2a2 2 0 0 1 0 4" }) });
};
var ForwardRef$48 = (0, import_react.forwardRef)(SvgCommand);
var ForwardRef$49 = ForwardRef$48;
var SvgCrop = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30.5 24a1.5 1.5 0 0 1-1.5 1.5h-3.5V29a1.5 1.5 0 1 1-3 0v-3.5H8A1.5 1.5 0 0 1 6.5 24V9.5H3a1.5 1.5 0 0 1 0-3h3.5V3a1.5 1.5 0 0 1 3 0v19.5H29a1.5 1.5 0 0 1 1.5 1.5M13 9.5h9.5V19a1.5 1.5 0 1 0 3 0V8A1.5 1.5 0 0 0 24 6.5H13a1.5 1.5 0 0 0 0 3" }) });
};
var ForwardRef$46 = (0, import_react.forwardRef)(SvgCrop);
var ForwardRef$47 = ForwardRef$46;
var SvgCross = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26.061 23.939a1.503 1.503 0 0 1-2.125 2.125L16 18.125l-7.939 7.936a1.503 1.503 0 1 1-2.125-2.125L13.875 16 5.939 8.061a1.503 1.503 0 1 1 2.125-2.125L16 13.875l7.939-7.94a1.502 1.502 0 1 1 2.125 2.125L18.125 16z" }) });
};
var ForwardRef$44 = (0, import_react.forwardRef)(SvgCross);
var ForwardRef$45 = ForwardRef$44;
var SvgCrossCircle = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m4.708 16.293a1 1 0 0 1-1.415 1.415L16 17.414l-3.293 3.293a1 1 0 0 1-1.415-1.415L14.587 16l-3.293-3.293a1 1 0 1 1 1.415-1.415L16 14.587l3.293-3.293a1 1 0 0 1 1.415 1.415L17.414 16z" }) });
};
var ForwardRef$42 = (0, import_react.forwardRef)(SvgCrossCircle);
var SvgCrown = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30.48 9.524a1.51 1.51 0 0 0-1.668-.213l-6.276 3.125-5.24-8.704a1.514 1.514 0 0 0-2.592 0l-5.24 8.708L3.19 9.315a1.514 1.514 0 0 0-2.113 1.825l4.625 14.17a1 1 0 0 0 1.46.55C7.194 25.841 10.39 24 16 24s8.806 1.841 8.835 1.859a1 1 0 0 0 1.464-.549l4.625-14.166a1.51 1.51 0 0 0-.444-1.62M21.98 19.6a1 1 0 0 1-1.159.811 28.5 28.5 0 0 0-9.652 0 1 1 0 0 1-.348-1.97 30.6 30.6 0 0 1 10.348 0 1 1 0 0 1 .816 1.159z" }) });
};
var ForwardRef$40 = (0, import_react.forwardRef)(SvgCrown);
var ForwardRef$41 = ForwardRef$40;
var SvgCursor = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27.414 24a2 2 0 0 1 0 2.829l-.585.585a2 2 0 0 1-2.829 0l-6.906-6.905-2.735 6.292A1.98 1.98 0 0 1 12.533 28h-.098a1.98 1.98 0 0 1-1.801-1.375L4.1 6.615A1.994 1.994 0 0 1 6.615 4.1l20.01 6.534a2 2 0 0 1 .176 3.725l-6.292 2.735z" }) });
};
var ForwardRef$3_ = (0, import_react.forwardRef)(SvgCursor);
var ForwardRef$3$ = ForwardRef$3_;
var SvgDatabase = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3C9.271 3 4 6.075 4 10v12c0 3.925 5.271 7 12 7s12-3.075 12-7V10c0-3.925-5.271-7-12-7m10 13c0 1.203-.985 2.429-2.701 3.365C21.366 20.419 18.774 21 16 21s-5.366-.581-7.299-1.635C6.985 18.429 6 17.203 6 16v-2.08C8.133 15.795 11.779 17 16 17s7.868-1.21 10-3.08zm-2.701 9.365C21.366 26.419 18.774 27 16 27s-5.366-.581-7.299-1.635C6.985 24.429 6 23.203 6 22v-2.08C8.133 21.795 11.779 23 16 23s7.868-1.21 10-3.08V22c0 1.203-.985 2.429-2.701 3.365" }) });
};
var ForwardRef$3Y = (0, import_react.forwardRef)(SvgDatabase);
var ForwardRef$3Z = ForwardRef$3Y;
var SvgDiscuss = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29 12a2 2 0 0 0-2-2h-4V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v16a1 1 0 0 0 1.625.777L9 19.25V23a2 2 0 0 0 2 2h11.699l4.676 3.778A1 1 0 0 0 29 28zm-5.319 11.223a1 1 0 0 0-.625-.223H11v-4h10a2 2 0 0 0 2-2v-5h4v13.906z" }) });
};
var ForwardRef$3W = (0, import_react.forwardRef)(SvgDiscuss);
var ForwardRef$3X = ForwardRef$3W;
var SvgDownload = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 19v7a2.5 2.5 0 0 1-2.5 2.5H6A2.5 2.5 0 0 1 3.5 26v-7a1.5 1.5 0 0 1 3 0v6.5h19V19a1.5 1.5 0 1 1 3 0m-13.561 1.061a1.5 1.5 0 0 0 2.125 0l5-5a1.502 1.502 0 1 0-2.125-2.125L17.5 15.375V5a1.5 1.5 0 1 0-3 0v10.375l-2.439-2.436a1.502 1.502 0 1 0-2.125 2.125z" }) });
};
var ForwardRef$3U = (0, import_react.forwardRef)(SvgDownload);
var SvgDrag = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M13.5 7.5a2 2 0 1 1-4 0 2 2 0 0 1 4 0m7 2a2 2 0 1 0 0-4 2 2 0 0 0 0 4m-9 4.5a2 2 0 1 0 0 4 2 2 0 0 0 0-4m9 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-9 8.5a2 2 0 1 0 0 4 2 2 0 0 0 0-4m9 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4" }) });
};
var ForwardRef$3S = (0, import_react.forwardRef)(SvgDrag);
var SvgDuplicate = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 4H11a1 1 0 0 0-1 1v5H5a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-5h5a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1m-1 16h-4v-9a1 1 0 0 0-1-1h-9V6h14z" }) });
};
var ForwardRef$3Q = (0, import_react.forwardRef)(SvgDuplicate);
var SvgEarth = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m11 13c.001 1.411-.27 2.81-.8 4.118l-5.587-3.437a2 2 0 0 0-.78-.279l-2.853-.385a2.01 2.01 0 0 0-2 .983h-1.09l-.475-.983a1.99 1.99 0 0 0-1.375-1.083l-1-.216.978-1.718h2.088c.338 0 .67-.087.966-.25l1.532-.845q.202-.113.375-.268l3.364-3.042a1.99 1.99 0 0 0 .407-2.458l-.045-.08A11.01 11.01 0 0 1 27 16M5 16a10.94 10.94 0 0 1 1.068-4.725l1.417 3.784a2 2 0 0 0 1.453 1.25l2.678.576.476.99a2.01 2.01 0 0 0 1.8 1.125h.186l-.904 2.029a2 2 0 0 0 .357 2.171l.018.018L16 25.742l-.242 1.25A11.014 11.014 0 0 1 5 16" }) });
};
var ForwardRef$3O = (0, import_react.forwardRef)(SvgEarth);
var ForwardRef$3P = ForwardRef$3O;
var SvgEarthStriked = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: [
    (0, import_jsx_runtime.jsx)("path", { d: "M20.689 3.88A13 13 0 0 0 16 3a13 13 0 0 0-8.155 23.124l1.02-1.765A11 11 0 0 1 5 16a10.94 10.94 0 0 1 1.068-4.724l1.417 3.784a2 2 0 0 0 1.453 1.25l2.678.576.476.99q.113.226.275.418l1.169-2.025-.121-.25a1.99 1.99 0 0 0-1.375-1.084l-1-.217.978-1.717h2.088c.338 0 .67-.087.966-.25l.726-.4z" }),
    (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "m24 2.144 1.732 1-1.58 2.736q.54.435 1.036.932A13.01 13.01 0 0 1 29 16a13 13 0 0 1-17.69 12.124l-1.578 2.732-1.732-1zm-.86 5.49-4.936 8.549 1.628.22c.277.037.543.132.78.278l5.588 3.436c.53-1.308.801-2.706.8-4.117a11.01 11.01 0 0 0-3.86-8.367M13.92 23.6l-1.593 2.76a11 11 0 0 0 3.43.631l.242-1.25z", clipRule: "evenodd" })
  ] });
};
var ForwardRef$3M = (0, import_react.forwardRef)(SvgEarthStriked);
var SvgEmotionHappy = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m-4.5 9a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m10.365 7.5C20.579 21.724 18.441 23 16 23s-4.579-1.275-5.865-3.5a1.001 1.001 0 0 1 1.477-1.31q.157.129.253.31C12.799 20.114 14.266 21 16 21s3.201-.887 4.135-2.5a1 1 0 1 1 1.73 1M20.5 15a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" }) });
};
var ForwardRef$3K = (0, import_react.forwardRef)(SvgEmotionHappy);
var ForwardRef$3L = ForwardRef$3K;
var SvgEmotionUnhappy = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m-4.5 9a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m10 10.865a1 1 0 0 1-1.365-.365C19.201 20.886 17.734 20 16 20s-3.201.887-4.135 2.5a1.001 1.001 0 1 1-1.73-1C11.421 19.276 13.559 18 16 18s4.579 1.275 5.865 3.5a1 1 0 0 1-.365 1.365M20.5 15a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" }) });
};
var ForwardRef$3I = (0, import_react.forwardRef)(SvgEmotionUnhappy);
var ForwardRef$3J = ForwardRef$3I;
var SvgExpand = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27.5 6v5a1.5 1.5 0 1 1-3 0V7.5H21a1.5 1.5 0 0 1 0-3h5A1.5 1.5 0 0 1 27.5 6M11 24.5H7.5V21a1.5 1.5 0 0 0-3 0v5A1.5 1.5 0 0 0 6 27.5h5a1.5 1.5 0 1 0 0-3m15-5a1.5 1.5 0 0 0-1.5 1.5v3.5H21a1.5 1.5 0 1 0 0 3h5a1.5 1.5 0 0 0 1.5-1.5v-5a1.5 1.5 0 0 0-1.5-1.5m-15-15H6A1.5 1.5 0 0 0 4.5 6v5a1.5 1.5 0 0 0 3 0V7.5H11a1.5 1.5 0 0 0 0-3" }) });
};
var ForwardRef$3G = (0, import_react.forwardRef)(SvgExpand);
var ForwardRef$3H = ForwardRef$3G;
var SvgExternalLink = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 13a1.5 1.5 0 1 1-3 0V8.625l-7.439 7.439a1.503 1.503 0 1 1-2.125-2.125L23.375 6.5H19a1.5 1.5 0 0 1 0-3h8A1.5 1.5 0 0 1 28.5 5zM23 16a1.5 1.5 0 0 0-1.5 1.5v8h-15v-15h8a1.5 1.5 0 1 0 0-3H6A2.5 2.5 0 0 0 3.5 10v16A2.5 2.5 0 0 0 6 28.5h16a2.5 2.5 0 0 0 2.5-2.5v-8.5A1.5 1.5 0 0 0 23 16" }) });
};
var ForwardRef$3E = (0, import_react.forwardRef)(SvgExternalLink);
var ForwardRef$3F = ForwardRef$3E;
var SvgEye = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30.914 15.595c-.044-.099-1.103-2.447-3.457-4.801C24.322 7.657 20.36 6 16 6S7.679 7.657 4.542 10.794C2.19 13.148 1.125 15.5 1.086 15.595a1 1 0 0 0 0 .812c.044.1 1.103 2.447 3.456 4.8C7.68 24.344 11.64 26 16 26s8.321-1.657 11.458-4.792c2.353-2.354 3.412-4.702 3.456-4.8a1 1 0 0 0 0-.813M16 21a5 5 0 1 1 0-10 5 5 0 0 1 0 10" }) });
};
var ForwardRef$3C = (0, import_react.forwardRef)(SvgEye);
var ForwardRef$3D = ForwardRef$3C;
var SvgEyeStriked = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M6.74 4.328a1 1 0 1 0-1.48 1.345l2.405 2.646c-4.54 2.786-6.493 7.081-6.579 7.276a1 1 0 0 0 0 .813c.044.098 1.103 2.446 3.456 4.8C7.68 24.343 11.64 26 16 26c2.24.013 4.459-.448 6.509-1.354l2.75 3.027a1 1 0 1 0 1.48-1.345zm11.125 15.21a4 4 0 0 1-5.209-5.73zm13.049-3.13c-.053.117-1.319 2.92-4.17 5.475a1 1 0 0 1-1.408-.072L12.675 7.884a1 1 0 0 1 .575-1.66A17 17 0 0 1 16 6c4.36 0 8.321 1.658 11.458 4.794 2.353 2.354 3.412 4.702 3.456 4.801a1 1 0 0 1 0 .813" }) });
};
var ForwardRef$3A = (0, import_react.forwardRef)(SvgEyeStriked);
var ForwardRef$3B = ForwardRef$3A;
var SvgFaders = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M17 15v12a1 1 0 0 1-2 0V15a1 1 0 0 1 2 0m8 9a1 1 0 0 0-1 1v2a1 1 0 0 0 2 0v-2a1 1 0 0 0-1-1m3-6h-2V5a1 1 0 0 0-2 0v13h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1M7 20a1 1 0 0 0-1 1v6a1 1 0 1 0 2 0v-6a1 1 0 0 0-1-1m3-6H8V5a1 1 0 0 0-2 0v9H4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1m9-6h-2V5a1 1 0 0 0-2 0v3h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1" }) });
};
var ForwardRef$3y = (0, import_react.forwardRef)(SvgFaders);
var ForwardRef$3z = ForwardRef$3y;
var SvgFeather = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m26.48 16.851-7.474 7.559a1.97 1.97 0 0 1-1.4.585H9.415l-3.707 3.712a1.001 1.001 0 0 1-1.415-1.415l2.823-2.822L15.588 16h10.537a.5.5 0 0 1 .355.851m.607-13.03a8 8 0 0 0-10.737.518l-1.2 1.185a.5.5 0 0 0-.15.351v7.875l6.875-6.875a1 1 0 0 1 1.414 1.414L17.589 14h11.047a.5.5 0 0 0 .445-.27 8.01 8.01 0 0 0-1.994-9.909M7.854 20.904 13 15.758V8.845a.5.5 0 0 0-.851-.355L7.586 13A1.99 1.99 0 0 0 7 14.414v6.136a.5.5 0 0 0 .854.354" }) });
};
var ForwardRef$3w = (0, import_react.forwardRef)(SvgFeather);
var ForwardRef$3x = ForwardRef$3w;
var SvgFile = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m26.708 10.293-7-7A1 1 0 0 0 19 3H7a2 2 0 0 0-2 2v22a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V11a1 1 0 0 0-.293-.707M19 11V5.5l5.5 5.5z" }) });
};
var ForwardRef$3u = (0, import_react.forwardRef)(SvgFile);
var ForwardRef$3v = ForwardRef$3u;
var SvgFileCsv = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 256 256", fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m213.66 82.34-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v76a4 4 0 0 0 4 4h168a4 4 0 0 0 4-4V88a8 8 0 0 0-2.34-5.66M152 88V44l44 44ZM48 180c0 11 7.18 20 16 20a14.18 14.18 0 0 0 10.06-4.5 8.21 8.21 0 0 1 10.9-.91 8 8 0 0 1 .82 11.81A30.06 30.06 0 0 1 64 216c-17.64 0-32-16.15-32-36s14.36-36 32-36a30 30 0 0 1 21.39 9.19 8.26 8.26 0 0 1 .73 11.09 8 8 0 0 1-11.9.38A14.17 14.17 0 0 0 64 160c-8.82 0-16 9-16 20m103.81 16.31a20.82 20.82 0 0 1-9.19 15.23C137.43 215 131 216 125.13 216a61.1 61.1 0 0 1-15.13-2 8 8 0 1 1 4.3-15.41c4.38 1.2 14.95 2.7 19.55-.36.88-.59 1.83-1.52 2.14-3.93.35-2.67-.71-4.1-12.78-7.59-9.35-2.7-25-7.23-23-23.11a20.56 20.56 0 0 1 9-14.95c11.84-8 30.71-3.31 32.83-2.76a8 8 0 0 1-4.07 15.48c-4.49-1.17-15.23-2.56-19.83.56a4.54 4.54 0 0 0-2 3.67c-.12.9-.14 1.09 1.11 1.9 2.31 1.49 6.45 2.68 10.45 3.84 9.79 2.83 26.35 7.66 24.11 24.97M215.42 155l-19.89 55.68a8 8 0 0 1-15.06 0L160.58 155a8.21 8.21 0 0 1 4.5-10.45 8 8 0 0 1 10.45 4.76l12.47 34.9 12.47-34.9a8 8 0 0 1 10.45-4.76 8.23 8.23 0 0 1 4.5 10.45" }) });
};
var ForwardRef$3s = (0, import_react.forwardRef)(SvgFileCsv);
var SvgFileError = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m26.708 10.293-7-7A1 1 0 0 0 19 3H7a2 2 0 0 0-2 2v22a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V11a1 1 0 0 0-.293-.707m-7 11a1 1 0 0 1-1.415 1.415L16 20.414l-2.293 2.293a1 1 0 0 1-1.415-1.415L14.587 19l-2.293-2.293a1 1 0 1 1 1.415-1.415L16 17.587l2.293-2.293a1 1 0 0 1 1.415 1.415L17.414 19zM19 11V5.5l5.5 5.5z" }) });
};
var ForwardRef$3q = (0, import_react.forwardRef)(SvgFileError);
var ForwardRef$3r = ForwardRef$3q;
var SvgFilePdf = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M6 15h20a1 1 0 0 0 1-1v-3a1 1 0 0 0-.293-.707l-7-7A1 1 0 0 0 19 3H7a2 2 0 0 0-2 2v9a1 1 0 0 0 1 1m13-9.5 5.5 5.5H19zM28 19a1 1 0 0 1-1 1h-3v2h2a1 1 0 0 1 0 2h-2v2a1 1 0 0 1-2 0v-7a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1M8 18H6a1 1 0 0 0-1 1v7a1 1 0 1 0 2 0v-1h1a3.5 3.5 0 1 0 0-7m0 5H7v-3h1a1.5 1.5 0 1 1 0 3m8-5h-2a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h2a4.5 4.5 0 1 0 0-9m0 7h-1v-5h1a2.5 2.5 0 0 1 0 5" }) });
};
var ForwardRef$3o = (0, import_react.forwardRef)(SvgFilePdf);
var ForwardRef$3p = ForwardRef$3o;
var SvgFileXls = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 256 256", fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M44 120h168a4 4 0 0 0 4-4V88a8 8 0 0 0-2.34-5.66l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v76a4 4 0 0 0 4 4m108-76 44 44h-44Zm4 164.53a8.18 8.18 0 0 1-8.25 7.47H120a8 8 0 0 1-8-8v-55.73a8.18 8.18 0 0 1 7.47-8.25 8 8 0 0 1 8.53 8v48h20a8 8 0 0 1 8 8.51m-61.49-51.88L77.83 180l16.68 23.35a8 8 0 0 1-13 9.3L68 193.76l-13.49 18.89a8 8 0 1 1-13-9.3L58.17 180l-16.68-23.35a8 8 0 0 1 2.3-11.46 8.19 8.19 0 0 1 10.88 2.38L68 166.24l13.49-18.89a8 8 0 0 1 13 9.3Zm121.28 39.66a20.81 20.81 0 0 1-9.18 15.23c-5.19 3.46-11.67 4.46-17.49 4.46a60.6 60.6 0 0 1-15.19-2 8 8 0 0 1 4.31-15.41c4.38 1.21 14.94 2.71 19.54-.35.89-.6 1.84-1.52 2.15-3.93.34-2.67-.72-4.1-12.78-7.59-9.35-2.7-25-7.23-23-23.12a20.58 20.58 0 0 1 8.95-14.94c11.84-8 30.72-3.31 32.83-2.76a8 8 0 0 1-4.07 15.48c-4.48-1.17-15.22-2.56-19.82.56a4.54 4.54 0 0 0-2 3.67c-.11.9-.13 1.08 1.12 1.9 2.31 1.49 6.45 2.68 10.45 3.84 9.87 2.82 26.39 7.65 24.18 24.96" }) });
};
var ForwardRef$3m = (0, import_react.forwardRef)(SvgFileXls);
var SvgFileZip = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 256 256", fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M184 144h-16a8 8 0 0 0-8 8v55.73a8.17 8.17 0 0 0 7.47 8.25 8 8 0 0 0 8.53-8v-8h7.4c15.24 0 28.14-11.92 28.59-27.15A28 28 0 0 0 184 144m-.35 40H176v-24h8a12 12 0 0 1 12 13.16A12.25 12.25 0 0 1 183.65 184M136 152v55.73a8.17 8.17 0 0 1-7.47 8.25 8 8 0 0 1-8.53-8v-55.71a8.17 8.17 0 0 1 7.47-8.25A8 8 0 0 1 136 152m-40 56.53a8.17 8.17 0 0 1-8.27 7.47h-31.5a8.27 8.27 0 0 1-6-2.5 8 8 0 0 1-1.18-9.5l25.16-44H56.27a8.17 8.17 0 0 1-8.27-7.47 8 8 0 0 1 8-8.53h31.77a8.27 8.27 0 0 1 6 2.5A8 8 0 0 1 95 156l-25.21 44H88a8 8 0 0 1 8 8.53M213.66 82.34l-56-56A8 8 0 0 0 152 24H56a16 16 0 0 0-16 16v76a4 4 0 0 0 4 4h168a4 4 0 0 0 4-4V88a8 8 0 0 0-2.34-5.66M152 88V44l44 44Z" }) });
};
var ForwardRef$3k = (0, import_react.forwardRef)(SvgFileZip);
var SvgFilter = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M25.5 16a1.5 1.5 0 0 1-1.5 1.5H8a1.5 1.5 0 1 1 0-3h16a1.5 1.5 0 0 1 1.5 1.5M29 8.5H3a1.5 1.5 0 0 0 0 3h26a1.5 1.5 0 1 0 0-3m-10 12h-6a1.5 1.5 0 1 0 0 3h6a1.5 1.5 0 1 0 0-3" }) });
};
var ForwardRef$3i = (0, import_react.forwardRef)(SvgFilter);
var ForwardRef$3j = ForwardRef$3i;
var SvgFolder = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 9H16.414L13 5.586A1.98 1.98 0 0 0 11.586 5H5a2 2 0 0 0-2 2v18.078A1.926 1.926 0 0 0 4.924 27H27.11A1.89 1.89 0 0 0 29 25.111V11a2 2 0 0 0-2-2M5 7h6.586l2 2H5z" }) });
};
var ForwardRef$3g = (0, import_react.forwardRef)(SvgFolder);
var ForwardRef$3h = ForwardRef$3g;
var SvgGift = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 9h-4.385q.075-.06.146-.125A3.7 3.7 0 0 0 24 6.196 4.08 4.08 0 0 0 19.805 2a3.7 3.7 0 0 0-2.68 1.239A6.9 6.9 0 0 0 16 5.049a6.9 6.9 0 0 0-1.125-1.81A3.7 3.7 0 0 0 12.195 2 4.08 4.08 0 0 0 8 6.196a3.7 3.7 0 0 0 1.239 2.679q.072.06.146.125H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2v8a2 2 0 0 0 2 2h7.5a.5.5 0 0 0 .5-.5V15H5v-4h10v4h2v-4h10v4H17v11.5a.5.5 0 0 0 .5.5H25a2 2 0 0 0 2-2v-8a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2M10.564 7.375A1.7 1.7 0 0 1 10 6.125 2.076 2.076 0 0 1 12.074 4h.061a1.71 1.71 0 0 1 1.25.563c1.049 1.185 1.419 3.15 1.549 4.365-1.22-.13-3.184-.5-4.37-1.553m10.875 0c-1.186 1.05-3.155 1.42-4.375 1.55.148-1.314.561-3.237 1.561-4.361A1.7 1.7 0 0 1 19.875 4h.061A2.077 2.077 0 0 1 22 6.135a1.7 1.7 0 0 1-.564 1.24z" }) });
};
var ForwardRef$3e = (0, import_react.forwardRef)(SvgGift);
var ForwardRef$3f = ForwardRef$3e;
var SvgGlobe = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m9.796 8h-4.428a17.8 17.8 0 0 0-2.533-5.625A11.05 11.05 0 0 1 25.796 11M16 5.014c1.5 1.625 2.625 3.693 3.296 5.986h-6.592C13.375 8.707 14.5 6.641 16 5.014M12 16c0-1.005.084-2.009.25-3h7.5a18.2 18.2 0 0 1 0 6h-7.5a18 18 0 0 1-.25-3m.704 5h6.592c-.671 2.293-1.796 4.359-3.296 5.986-1.5-1.627-2.625-3.693-3.296-5.986m6.131 5.625A17.8 17.8 0 0 0 21.367 21h4.43a11.05 11.05 0 0 1-6.962 5.625M21.776 19a20.2 20.2 0 0 0 0-6h4.808a11 11 0 0 1 0 6z" }) });
};
var ForwardRef$3c = (0, import_react.forwardRef)(SvgGlobe);
var ForwardRef$3d = ForwardRef$3c;
var SvgGraphQl = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "M13.29 28.226 6.765 24.46a2.822 2.822 0 1 1-2.708-4.693v-7.532a2.824 2.824 0 1 1 2.708-4.693l6.525-3.767a2.824 2.824 0 1 1 5.42 0l6.524 3.766a2.822 2.822 0 1 1 2.71 4.693v7.533a2.824 2.824 0 1 1-2.71 4.694l-6.524 3.766A2.825 2.825 0 0 1 16 31.84a2.822 2.822 0 0 1-2.71-3.614M16 5.806q.413-.002.791-.113l8.531 14.776a2.8 2.8 0 0 0-.791 1.37H7.467a2.8 2.8 0 0 0-.79-1.369L15.21 5.693q.377.11.791.112M7.468 23.178l-.033.12 6.526 3.767A2.81 2.81 0 0 1 16 26.195c.802 0 1.526.334 2.04.871l6.523-3.766-.032-.121zM5.397 12.233a2.824 2.824 0 0 0 2.038-3.532l6.526-3.767q.043.045.088.088L5.517 19.8l-.12-.032zM26.482 19.8q.06-.018.121-.033v-7.532a2.824 2.824 0 0 1-2.04-3.534L18.04 4.934q-.045.045-.089.088z", clipRule: "evenodd" }) });
};
var ForwardRef$3a = (0, import_react.forwardRef)(SvgGraphQl);
var SvgGridFour = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 7v7.5a.5.5 0 0 1-.5.5H17V5.5a.5.5 0 0 1 .5-.5H25a2 2 0 0 1 2 2M14.5 5H7a2 2 0 0 0-2 2v7.5a.5.5 0 0 0 .5.5H15V5.5a.5.5 0 0 0-.5-.5m12 12H17v9.5a.5.5 0 0 0 .5.5H25a2 2 0 0 0 2-2v-7.5a.5.5 0 0 0-.5-.5M5 17.5V25a2 2 0 0 0 2 2h7.5a.5.5 0 0 0 .5-.5V17H5.5a.5.5 0 0 0-.5.5" }) });
};
var ForwardRef$38 = (0, import_react.forwardRef)(SvgGridFour);
var ForwardRef$39 = ForwardRef$38;
var SvgGridNine = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M10.5 6.5v5h-7A.5.5 0 0 1 3 11V8a2 2 0 0 1 2-2h5a.5.5 0 0 1 .5.5m2 19a.5.5 0 0 0 .5.5h6a.5.5 0 0 0 .5-.5v-5h-7zM3 21v3a2 2 0 0 0 2 2h5a.5.5 0 0 0 .5-.5v-5h-7a.5.5 0 0 0-.5.5m0-7v4a.5.5 0 0 0 .5.5h7v-5h-7a.5.5 0 0 0-.5.5m16-8h-6a.5.5 0 0 0-.5.5v5h7v-5A.5.5 0 0 0 19 6m9.5 7.5h-7v5h7a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-.5-.5m-16 5h7v-5h-7zM27 6h-5a.5.5 0 0 0-.5.5v5h7a.5.5 0 0 0 .5-.5V8a2 2 0 0 0-2-2m1.5 14.5h-7v5a.5.5 0 0 0 .5.5h5a2 2 0 0 0 2-2v-3a.5.5 0 0 0-.5-.5" }) });
};
var ForwardRef$36 = (0, import_react.forwardRef)(SvgGridNine);
var ForwardRef$37 = ForwardRef$36;
var SvgHandHeart = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.791 17.633a3.04 3.04 0 0 0-2.326-.597C28.813 14.666 30 12.31 30 10c0-3.309-2.661-6-5.933-6A5.95 5.95 0 0 0 19.5 6.094 5.95 5.95 0 0 0 14.932 4C11.663 4 9 6.691 9 10c0 1.375.405 2.711 1.258 4.125a4 4 0 0 0-1.844 1.05L5.586 18H2a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h13q.123 0 .242-.03l8-2a1 1 0 0 0 .15-.05l4.858-2.067.055-.025a3.074 3.074 0 0 0 .491-5.195zm-1.362 3.393-4.75 2.023L14.875 25H7v-5.586l2.829-2.828A1.98 1.98 0 0 1 11.242 16H17.5a1.5 1.5 0 0 1 0 3H14a1 1 0 0 0 0 2h4q.113 0 .224-.025l8.375-1.926.038-.01a1.075 1.075 0 0 1 .788 1.987z" }) });
};
var ForwardRef$34 = (0, import_react.forwardRef)(SvgHandHeart);
var ForwardRef$35 = ForwardRef$34;
var SvgHashtag = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28 10.5h-5.475l.951-5.231a1.5 1.5 0 1 0-2.952-.538L19.475 10.5h-4.95l.951-5.231a1.5 1.5 0 1 0-2.952-.538L11.475 10.5H6a1.5 1.5 0 0 0 0 3h4.93l-.909 5H4a1.5 1.5 0 0 0 0 3h5.475l-.951 5.231a1.5 1.5 0 0 0 1.207 1.75q.134.022.269.019a1.5 1.5 0 0 0 1.475-1.233l1.05-5.767h4.95l-.951 5.231a1.5 1.5 0 1 0 2.952.543l1.049-5.774H26a1.5 1.5 0 1 0 0-3h-4.93l.909-5H28a1.5 1.5 0 1 0 0-3m-9.979 8H13.07l.909-5h4.951z" }) });
};
var ForwardRef$32 = (0, import_react.forwardRef)(SvgHashtag);
var ForwardRef$33 = ForwardRef$32;
var SvgHeadingFive = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M31.5 22.5a5 5 0 0 1-5 5 4.94 4.94 0 0 1-3.571-1.45 1.5 1.5 0 0 1 2.142-2.1 1.94 1.94 0 0 0 1.429.55 2 2 0 0 0 0-4 1.94 1.94 0 0 0-1.429.55 1.5 1.5 0 0 1-2.551-1.3l1-6A1.5 1.5 0 0 1 25 12.5h5a1.5 1.5 0 1 1 0 3h-3.729l-.338 2.029q.283-.03.567-.029a5 5 0 0 1 5 5M18 5.5A1.5 1.5 0 0 0 16.5 7v6h-10V7a1.5 1.5 0 0 0-3 0v15a1.5 1.5 0 0 0 3 0v-6h10v6a1.5 1.5 0 1 0 3 0V7A1.5 1.5 0 0 0 18 5.5" }) });
};
var ForwardRef$30 = (0, import_react.forwardRef)(SvgHeadingFive);
var SvgHeadingFour = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M32 22a1.5 1.5 0 0 1-1.5 1.5V26a1.5 1.5 0 1 1-3 0v-2.5H23a1.5 1.5 0 0 1-1.422-1.974l3-9a1.5 1.5 0 0 1 2.845.948L25.08 20.5H27.5V18a1.5 1.5 0 1 1 3 0v2.5A1.5 1.5 0 0 1 32 22M18 5.5A1.5 1.5 0 0 0 16.5 7v6h-10V7a1.5 1.5 0 0 0-3 0v15a1.5 1.5 0 0 0 3 0v-6h10v6a1.5 1.5 0 1 0 3 0V7A1.5 1.5 0 0 0 18 5.5" }) });
};
var ForwardRef$2_ = (0, import_react.forwardRef)(SvgHeadingFour);
var SvgHeadingOne = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29.5 14v12a1.5 1.5 0 1 1-3 0v-9.198l-.668.448a1.503 1.503 0 0 1-1.665-2.5l3-2A1.5 1.5 0 0 1 29.5 14M18 5.5A1.5 1.5 0 0 0 16.5 7v6h-10V7a1.5 1.5 0 0 0-3 0v15a1.5 1.5 0 0 0 3 0v-6h10v6a1.5 1.5 0 1 0 3 0V7A1.5 1.5 0 0 0 18 5.5" }) });
};
var ForwardRef$2Y = (0, import_react.forwardRef)(SvgHeadingOne);
var SvgHeadingSix = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m27.133 17.541 1.655-2.772a1.5 1.5 0 1 0-2.576-1.538l-4.03 6.75q-.018.029-.032.059a5 5 0 1 0 4.983-2.5zM26.5 24.5a2 2 0 1 1 0-4 2 2 0 0 1 0 4M19.5 7v15a1.5 1.5 0 1 1-3 0v-6h-10v6a1.5 1.5 0 0 1-3 0V7a1.5 1.5 0 0 1 3 0v6h10V7a1.5 1.5 0 1 1 3 0" }) });
};
var ForwardRef$2W = (0, import_react.forwardRef)(SvgHeadingSix);
var SvgHeadingThree = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M31.5 22.5a5 5 0 0 1-8.571 3.5 1.5 1.5 0 1 1 2.142-2.099A2 2 0 1 0 26.5 20.5a1.5 1.5 0 0 1-1.229-2.36l1.854-2.64H24a1.5 1.5 0 1 1 0-3h6a1.5 1.5 0 0 1 1.229 2.36l-2.293 3.275A5 5 0 0 1 31.5 22.5M18 5.5A1.5 1.5 0 0 0 16.5 7v6h-10V7a1.5 1.5 0 0 0-3 0v15a1.5 1.5 0 0 0 3 0v-6h10v6a1.5 1.5 0 1 0 3 0V7A1.5 1.5 0 0 0 18 5.5" }) });
};
var ForwardRef$2U = (0, import_react.forwardRef)(SvgHeadingThree);
var SvgHeadingTwo = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M19.5 7v15a1.5 1.5 0 1 1-3 0v-6h-10v6a1.5 1.5 0 0 1-3 0V7a1.5 1.5 0 0 1 3 0v6h10V7a1.5 1.5 0 1 1 3 0M30 24.5h-3l3.593-4.791a4.499 4.499 0 1 0-7.837-4.209 1.5 1.5 0 1 0 2.829 1q.076-.218.216-.402a1.5 1.5 0 1 1 2.394 1.807L22.8 25.1a1.5 1.5 0 0 0 1.2 2.4h6a1.5 1.5 0 1 0 0-3" }) });
};
var ForwardRef$2S = (0, import_react.forwardRef)(SvgHeadingTwo);
var SvgHeadphones = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29 17v7a3 3 0 0 1-3 3h-2a3 3 0 0 1-3-3v-5a3 3 0 0 1 3-3h2.956A10.964 10.964 0 0 0 16.081 6H16A11 11 0 0 0 5.045 16H8a3 3 0 0 1 3 3v5a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-7a13.014 13.014 0 0 1 22.236-9.167A12.93 12.93 0 0 1 29 17" }) });
};
var ForwardRef$2Q = (0, import_react.forwardRef)(SvgHeadphones);
var ForwardRef$2R = ForwardRef$2Q;
var SvgHeart = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30 11.75c0 8.75-12.974 15.833-13.526 16.125a1 1 0 0 1-.948 0C14.974 27.582 2 20.5 2 11.75A7.76 7.76 0 0 1 9.75 4c2.581 0 4.841 1.11 6.25 2.986C17.409 5.11 19.669 4 22.25 4A7.76 7.76 0 0 1 30 11.75" }) });
};
var ForwardRef$2O = (0, import_react.forwardRef)(SvgHeart);
var ForwardRef$2P = ForwardRef$2O;
var SvgHouse = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28 14.444V26a2 2 0 0 1-2 2h-5a2 2 0 0 1-2-2v-5a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V14.444a2 2 0 0 1 .646-1.473l10-9.435.014-.013a2 2 0 0 1 2.705.013l10 9.435A2 2 0 0 1 28 14.444" }) });
};
var ForwardRef$2M = (0, import_react.forwardRef)(SvgHouse);
var ForwardRef$2N = ForwardRef$2M;
var SvgImage = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 5H5a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h22a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-7.5 6a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3M5 25v-3.5l6.5-6.5 10 10zm22 0h-2.671l-4.5-4.5 2.5-2.5L27 22.672z" }) });
};
var ForwardRef$2K = (0, import_react.forwardRef)(SvgImage);
var ForwardRef$2L = ForwardRef$2K;
var SvgImages = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 5H9a2 2 0 0 0-2 2v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2v-2h2a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3M23 25H5V11h2v10a2 2 0 0 0 2 2h14zm4-4H9v-4.5l4.5-4.5 6.208 6.208a1 1 0 0 0 1.413 0L24.33 15 27 17.672z" }) });
};
var ForwardRef$2I = (0, import_react.forwardRef)(SvgImages);
var ForwardRef$2J = ForwardRef$2I;
var SvgIndentDecrease = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5H15a1.5 1.5 0 0 1 0-3h12a1.5 1.5 0 0 1 1.5 1.5M15 9.5h12a1.5 1.5 0 0 0 0-3H15a1.5 1.5 0 0 0 0 3m12 13H5a1.5 1.5 0 1 0 0 3h22a1.5 1.5 0 0 0 0-3m-18-4a1.5 1.5 0 0 0 1.061-2.561L6.125 12l3.936-3.94a1.503 1.503 0 1 0-2.125-2.125l-5 5a1.5 1.5 0 0 0 0 2.125l5 5A1.5 1.5 0 0 0 9 18.5" }) });
};
var ForwardRef$2G = (0, import_react.forwardRef)(SvgIndentDecrease);
var SvgIndentIncrease = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5H15a1.5 1.5 0 0 1 0-3h12a1.5 1.5 0 0 1 1.5 1.5M15 9.5h12a1.5 1.5 0 0 0 0-3H15a1.5 1.5 0 0 0 0 3m12 13H5a1.5 1.5 0 0 0 0 3h22a1.5 1.5 0 1 0 0-3M3.939 18.06a1.5 1.5 0 0 0 2.125 0l5-5a1.5 1.5 0 0 0 0-2.125l-5-5a1.503 1.503 0 0 0-2.125 2.125L7.875 12l-3.936 3.939a1.5 1.5 0 0 0 0 2.122" }) });
};
var ForwardRef$2E = (0, import_react.forwardRef)(SvgIndentIncrease);
var SvgInformation = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m-.5 6a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3M17 23a2 2 0 0 1-2-2v-5a1 1 0 0 1 0-2 2 2 0 0 1 2 2v5a1 1 0 0 1 0 2" }) });
};
var ForwardRef$2C = (0, import_react.forwardRef)(SvgInformation);
var ForwardRef$2D = ForwardRef$2C;
var SvgItalic = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M25.5 7A1.5 1.5 0 0 1 24 8.5h-3.919l-5 15H18a1.5 1.5 0 1 1 0 3H8a1.5 1.5 0 1 1 0-3h3.919l5-15H14a1.5 1.5 0 0 1 0-3h10A1.5 1.5 0 0 1 25.5 7" }) });
};
var ForwardRef$2A = (0, import_react.forwardRef)(SvgItalic);
var ForwardRef$2B = ForwardRef$2A;
var SvgKey = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M20 2a10.01 10.01 0 0 0-9.511 13.098l-7.196 7.195A1 1 0 0 0 3 23v5a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1v-2h2a1 1 0 0 0 1-1v-2h2a1 1 0 0 0 .707-.293l1.195-1.196A10 10 0 1 0 20 2m2.5 9.5a2 2 0 1 1 0-4 2 2 0 0 1 0 4" }) });
};
var ForwardRef$2y = (0, import_react.forwardRef)(SvgKey);
var ForwardRef$2z = ForwardRef$2y;
var SvgLayout = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 5H5a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h22a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2M5 7h22v5H5zm22 18H14V14h13z" }) });
};
var ForwardRef$2w = (0, import_react.forwardRef)(SvgLayout);
var ForwardRef$2x = ForwardRef$2w;
var SvgLightbulb = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M22 29a1 1 0 0 1-1 1H11a1 1 0 1 1 0-2h10a1 1 0 0 1 1 1m5-16a10.94 10.94 0 0 1-4.205 8.651A2.03 2.03 0 0 0 22 23.25V24a2 2 0 0 1-2 2h-8a2 2 0 0 1-2-2v-.75a2 2 0 0 0-.779-1.582A10.95 10.95 0 0 1 5 13.06C4.967 7.104 9.782 2.143 15.735 2A11 11 0 0 1 27 13m-4.014-1.168a7.2 7.2 0 0 0-5.82-5.818 1 1 0 1 0-.332 1.972c2.071.349 3.829 2.106 4.18 4.182a1 1 0 0 0 1.972-.335" }) });
};
var ForwardRef$2u = (0, import_react.forwardRef)(SvgLightbulb);
var ForwardRef$2v = ForwardRef$2u;
var SvgLightning = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m21.731 14.683-14 15a1 1 0 0 1-1.711-.875l1.832-9.167L.65 16.936a1 1 0 0 1-.375-1.625l14-15a1 1 0 0 1 1.71.875l-1.837 9.177 7.204 2.7a1 1 0 0 1 .375 1.62z" }) });
};
var ForwardRef$2s = (0, import_react.forwardRef)(SvgLightning);
var SvgLink = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M17.046 23.441a1.5 1.5 0 0 1 0 2.125l-.742.743a7.502 7.502 0 1 1-10.61-10.61l3.015-3.014A7.5 7.5 0 0 1 19 12.375a1.506 1.506 0 0 1-2 2.25 4.5 4.5 0 0 0-6.171.184l-3.013 3.01a4.5 4.5 0 0 0 6.365 6.365l.743-.743a1.5 1.5 0 0 1 2.122 0m9.26-17.75a7.51 7.51 0 0 0-10.61 0l-.742.743a1.503 1.503 0 1 0 2.125 2.125l.742-.743a4.5 4.5 0 0 1 6.365 6.365l-3.014 3.015a4.5 4.5 0 0 1-6.172.179 1.506 1.506 0 1 0-2 2.25 7.5 7.5 0 0 0 10.288-.304l3.014-3.014a7.51 7.51 0 0 0 .004-10.613z" }) });
};
var ForwardRef$2q = (0, import_react.forwardRef)(SvgLink);
var ForwardRef$2r = ForwardRef$2q;
var SvgList = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5H5a1.5 1.5 0 1 1 0-3h22a1.5 1.5 0 0 1 1.5 1.5M5 9.5h22a1.5 1.5 0 0 0 0-3H5a1.5 1.5 0 0 0 0 3m22 13H5a1.5 1.5 0 1 0 0 3h22a1.5 1.5 0 1 0 0-3" }) });
};
var ForwardRef$2o = (0, import_react.forwardRef)(SvgList);
var SvgListPlus = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M3.5 8A1.5 1.5 0 0 1 5 6.5h22a1.5 1.5 0 0 1 0 3H5A1.5 1.5 0 0 1 3.5 8M5 17.5h22a1.5 1.5 0 1 0 0-3H5a1.5 1.5 0 1 0 0 3m13 5H5a1.5 1.5 0 1 0 0 3h13a1.5 1.5 0 1 0 0-3m11 0h-1.5V21a1.5 1.5 0 1 0-3 0v1.5H23a1.5 1.5 0 1 0 0 3h1.5V27a1.5 1.5 0 1 0 3 0v-1.5H29a1.5 1.5 0 1 0 0-3" }) });
};
var ForwardRef$2m = (0, import_react.forwardRef)(SvgListPlus);
var ForwardRef$2n = ForwardRef$2m;
var SvgListSearch = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 256 256", fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28 64a12 12 0 0 1 12-12h176a12 12 0 0 1 0 24H40a12 12 0 0 1-12-12m12 76h64a12 12 0 0 0 0-24H40a12 12 0 0 0 0 24m80 40H40a12 12 0 0 0 0 24h80a12 12 0 0 0 0-24m120.49 20.49a12 12 0 0 1-17 0l-18.08-18.08a44 44 0 1 1 17-17l18.08 18.07a12 12 0 0 1 0 17.01M184 164a20 20 0 1 0-20-20 20 20 0 0 0 20 20" }) });
};
var ForwardRef$2k = (0, import_react.forwardRef)(SvgListSearch);
var SvgLoader = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M17.5 4v4a1.5 1.5 0 1 1-3 0V4a1.5 1.5 0 1 1 3 0m4.156 7.844a1.5 1.5 0 0 0 1.062-.44l2.828-2.829a1.503 1.503 0 1 0-2.125-2.125l-2.825 2.833a1.5 1.5 0 0 0 1.06 2.56M28 14.5h-4a1.5 1.5 0 1 0 0 3h4a1.5 1.5 0 1 0 0-3m-5.282 6.096a1.501 1.501 0 0 0-2.451 1.638c.075.182.186.348.326.487l2.828 2.829a1.503 1.503 0 0 0 2.125-2.125zM16 22.5a1.5 1.5 0 0 0-1.5 1.5v4a1.5 1.5 0 1 0 3 0v-4a1.5 1.5 0 0 0-1.5-1.5m-6.717-1.904-2.83 2.829A1.503 1.503 0 0 0 8.58 25.55l2.829-2.829a1.503 1.503 0 0 0-2.125-2.125M9.5 16A1.5 1.5 0 0 0 8 14.5H4a1.5 1.5 0 1 0 0 3h4A1.5 1.5 0 0 0 9.5 16m-.925-9.546A1.503 1.503 0 0 0 6.45 8.579l2.833 2.825a1.503 1.503 0 0 0 2.125-2.125z" }) });
};
var ForwardRef$2i = (0, import_react.forwardRef)(SvgLoader);
var ForwardRef$2j = ForwardRef$2i;
var SvgLock = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26 10h-4V7a6 6 0 1 0-12 0v3H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h20a2 2 0 0 0 2-2V12a2 2 0 0 0-2-2M16 20.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3M20 10h-8V7a4 4 0 1 1 8 0z" }) });
};
var ForwardRef$2g = (0, import_react.forwardRef)(SvgLock);
var ForwardRef$2h = ForwardRef$2g;
var SvgMagic = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M31 19a1 1 0 0 1-1 1h-2v2a1 1 0 0 1-2 0v-2h-2a1 1 0 0 1 0-2h2v-2a1 1 0 1 1 2 0v2h2a1 1 0 0 1 1 1M7 9h2v2a1 1 0 1 0 2 0V9h2a1 1 0 0 0 0-2h-2V5a1 1 0 0 0-2 0v2H7a1 1 0 0 0 0 2m16 15h-1v-1a1 1 0 0 0-2 0v1h-1a1 1 0 0 0 0 2h1v1a1 1 0 1 0 2 0v-1h1a1 1 0 0 0 0-2m4.414-14L10 27.414a2 2 0 0 1-2.828 0l-2.587-2.585a2 2 0 0 1 0-2.829L22 4.586a2 2 0 0 1 2.829 0l2.585 2.585a2 2 0 0 1 0 2.829M26 8.586 23.414 6l-4 4L22 12.586z" }) });
};
var ForwardRef$2e = (0, import_react.forwardRef)(SvgMagic);
var ForwardRef$2f = ForwardRef$2e;
var SvgMail = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28 6H4a1 1 0 0 0-1 1v17a2 2 0 0 0 2 2h22a2 2 0 0 0 2-2V7a1 1 0 0 0-1-1M12.339 16 5 22.726V9.274zm1.48 1.356 1.5 1.381a1 1 0 0 0 1.352 0l1.5-1.38L25.421 24H6.571zM19.66 16 27 9.273v13.455z" }) });
};
var ForwardRef$2c = (0, import_react.forwardRef)(SvgMail);
var ForwardRef$2d = ForwardRef$2c;
var SvgManyToMany = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "M11 7q0 .432-.088.838L16 10.382l5.088-2.544a4 4 0 1 1 .895 1.789L18.236 11.5l3.747 1.873a4 4 0 1 1 0 5.253L18.236 20.5l3.747 1.874a4 4 0 1 1-.895 1.788L16 21.618l-5.088 2.544Q11 24.567 11 25a4 4 0 1 1-.983-2.626l3.747-1.874-3.747-1.873a4 4 0 1 1 0-5.253l3.747-1.874-3.747-1.874A4 4 0 1 1 11 7M9 7a2 2 0 1 1-4 0 2 2 0 0 1 4 0m2.236 8h9.528L16 12.618zM9 25a2 2 0 1 1-4 0 2 2 0 0 1 4 0m-2-7a2 2 0 1 0 0-4 2 2 0 0 0 0 4M27 7a2 2 0 1 1-4 0 2 2 0 0 1 4 0m-2 20a2 2 0 1 0 0-4 2 2 0 0 0 0 4m2-11a2 2 0 1 1-4 0 2 2 0 0 1 4 0m-11 3.382L20.764 17h-9.528z", clipRule: "evenodd" }) });
};
var ForwardRef$2a = (0, import_react.forwardRef)(SvgManyToMany);
var ForwardRef$2b = ForwardRef$2a;
var SvgManyToOne = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "M14.8 8.254a4 4 0 1 0-1.082 1.682l7.483 4.81a4 4 0 0 0-.075.254H10.874A4.002 4.002 0 0 0 3 16a4 4 0 0 0 7.874 1h10.252q.033.128.075.254l-7.484 4.81a4 4 0 1 0 1.082 1.682l7.484-4.81a4 4 0 1 0 0-5.871zM11 9a2 2 0 1 0 0-4 2 2 0 0 0 0 4m0 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4M9 16a2 2 0 1 1-4 0 2 2 0 0 1 4 0m16 2a2 2 0 1 0 0-4 2 2 0 0 0 0 4", clipRule: "evenodd" }) });
};
var ForwardRef$28 = (0, import_react.forwardRef)(SvgManyToOne);
var ForwardRef$29 = ForwardRef$28;
var SvgManyWays = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "M18.842 3.227a1 1 0 1 0-.445 1.95l1.747.399L9.6 12.959a4 4 0 1 0 0 6.081l10.546 7.385-1.748.399a1 1 0 1 0 .445 1.95l3.945-.9a1 1 0 0 0 .77-1.1l-.503-4.014a1 1 0 0 0-1.985.248l.223 1.779-10.545-7.384a4 4 0 0 0 .127-.403h14.712l-1.293 1.293a1 1 0 1 0 1.414 1.414l3-3a1 1 0 0 0 0-1.414l-3-3a1 1 0 0 0-1.414 1.414L25.586 15H10.874a4 4 0 0 0-.127-.403l10.544-7.383-.222 1.778a1 1 0 0 0 1.984.249l.503-4.015a1 1 0 0 0-.77-1.099zM9 16a2 2 0 1 1-4 0 2 2 0 0 1 4 0", clipRule: "evenodd" }) });
};
var ForwardRef$26 = (0, import_react.forwardRef)(SvgManyWays);
var ForwardRef$27 = ForwardRef$26;
var SvgMessage = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 6H5a2 2 0 0 0-2 2v20a1.98 1.98 0 0 0 1.156 1.813 1.986 1.986 0 0 0 2.141-.299L10.312 26H27a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2M10.5 17.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5.5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5.5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" }) });
};
var ForwardRef$24 = (0, import_react.forwardRef)(SvgMessage);
var ForwardRef$25 = ForwardRef$24;
var SvgMicrophone = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M10 16V8a6 6 0 1 1 12 0v8a6 6 0 1 1-12 0m16 0a1 1 0 0 0-2 0 8 8 0 0 1-16 0 1 1 0 1 0-2 0 10.014 10.014 0 0 0 9 9.95V29a1 1 0 0 0 2 0v-3.05A10.014 10.014 0 0 0 26 16" }) });
};
var ForwardRef$22 = (0, import_react.forwardRef)(SvgMicrophone);
var ForwardRef$23 = ForwardRef$22;
var SvgMinus = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5H5a1.5 1.5 0 1 1 0-3h22a1.5 1.5 0 0 1 1.5 1.5" }) });
};
var ForwardRef$20 = (0, import_react.forwardRef)(SvgMinus);
var ForwardRef$21 = ForwardRef$20;
var SvgMinusCircle = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m5 14H11a1 1 0 0 1 0-2h10a1 1 0 0 1 0 2" }) });
};
var ForwardRef$1_ = (0, import_react.forwardRef)(SvgMinusCircle);
var SvgMonitor = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26 5H6a3 3 0 0 0-3 3v14a3 3 0 0 0 3 3h20a3 3 0 0 0 3-3V8a3 3 0 0 0-3-3M20 27h-8a1 1 0 0 0 0 2h8a1 1 0 0 0 0-2" }) });
};
var ForwardRef$1Y = (0, import_react.forwardRef)(SvgMonitor);
var ForwardRef$1Z = ForwardRef$1Y;
var SvgMoon = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29.443 18.776a13.1 13.1 0 0 1-4.626 6.614A13 13 0 0 1 4 15a12.9 12.9 0 0 1 2.61-7.815 13.1 13.1 0 0 1 6.614-4.625 1 1 0 0 1 1.25 1.25 11.01 11.01 0 0 0 13.725 13.725 1 1 0 0 1 1.25 1.25z" }) });
};
var ForwardRef$1W = (0, import_react.forwardRef)(SvgMoon);
var ForwardRef$1X = ForwardRef$1W;
var SvgMore = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M18 16a2 2 0 1 1-4 0 2 2 0 0 1 4 0M7.5 14a2 2 0 1 0 0 4 2 2 0 0 0 0-4m17 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4" }) });
};
var ForwardRef$1U = (0, import_react.forwardRef)(SvgMore);
var SvgMove = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M10.939 8.061a1.5 1.5 0 0 1 0-2.125l4-4a1.5 1.5 0 0 1 2.125 0l4 4a1.503 1.503 0 1 1-2.125 2.125L17.5 6.625V12a1.5 1.5 0 1 1-3 0V6.625l-1.439 1.436a1.5 1.5 0 0 1-2.122 0m8 15.875L17.5 25.375V20a1.5 1.5 0 1 0-3 0v5.375l-1.439-1.44a1.504 1.504 0 0 0-2.125 2.125l4 4a1.5 1.5 0 0 0 2.125 0l4-4a1.502 1.502 0 1 0-2.125-2.125zm11.125-9-4-4a1.503 1.503 0 0 0-2.125 2.125l1.436 1.439H20a1.5 1.5 0 0 0 0 3h5.375l-1.44 1.439a1.503 1.503 0 0 0 2.125 2.125l4-4a1.5 1.5 0 0 0 .001-2.125zM6.625 17.5H12a1.5 1.5 0 1 0 0-3H6.625l1.44-1.439a1.503 1.503 0 1 0-2.125-2.125l-4 4a1.5 1.5 0 0 0 0 2.125l4 4a1.503 1.503 0 0 0 2.125-2.125z" }) });
};
var ForwardRef$1S = (0, import_react.forwardRef)(SvgMove);
var SvgMusicNotes = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26.615 3.214a.99.99 0 0 0-.857-.183l-16 4a1 1 0 0 0-.758.97v13.762a4.5 4.5 0 1 0 2 3.737V13.781l14-3.5v7.482a4.5 4.5 0 1 0 2 3.737V4a1 1 0 0 0-.385-.786" }) });
};
var ForwardRef$1Q = (0, import_react.forwardRef)(SvgMusicNotes);
var ForwardRef$1R = ForwardRef$1Q;
var SvgNumberList = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5H14.5a1.5 1.5 0 1 1 0-3H27a1.5 1.5 0 0 1 1.5 1.5m-14-6.5H27a1.5 1.5 0 0 0 0-3H14.5a1.5 1.5 0 0 0 0 3m12.5 13H14.5a1.5 1.5 0 1 0 0 3H27a1.5 1.5 0 1 0 0-3M5.5 7.414V13a1.5 1.5 0 0 0 3 0V5a1.5 1.5 0 0 0-2.17-1.341l-2 1a1.5 1.5 0 0 0 1.17 2.75zm4.966 12.107a3.46 3.46 0 0 0-1.4-2.329 3.61 3.61 0 0 0-4.954.683 3.5 3.5 0 0 0-.52.942 1.5 1.5 0 0 0 2.818 1.027.5.5 0 0 1 .072-.125.6.6 0 0 1 .813-.103.48.48 0 0 1 .201.325.45.45 0 0 1-.096.347l-.016.02-3.585 4.794A1.5 1.5 0 0 0 5 27.5h4a1.5 1.5 0 1 0 0-3H8l1.785-2.389a3.43 3.43 0 0 0 .681-2.59" }) });
};
var ForwardRef$1O = (0, import_react.forwardRef)(SvgNumberList);
var SvgOneToMany = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "M17.2 8.254a4 4 0 1 1 1.082 1.682l-7.482 4.81q.04.125.074.254h10.252A4.002 4.002 0 0 1 29 16a4 4 0 0 1-7.874 1H10.874q-.033.128-.075.254l7.484 4.81a4 4 0 1 1-1.082 1.682l-7.484-4.81a4 4 0 1 1 0-5.871zM21 9a2 2 0 1 1 0-4 2 2 0 0 1 0 4m0 18a2 2 0 1 1 0-4 2 2 0 0 1 0 4m2-11a2 2 0 1 0 4 0 2 2 0 0 0-4 0M7 18a2 2 0 1 1 0-4 2 2 0 0 1 0 4", clipRule: "evenodd" }) });
};
var ForwardRef$1M = (0, import_react.forwardRef)(SvgOneToMany);
var ForwardRef$1N = ForwardRef$1M;
var SvgOneToOne = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "M10.874 17A4.002 4.002 0 0 1 3 16a4 4 0 0 1 7.874-1h10.252A4.002 4.002 0 0 1 29 16a4 4 0 0 1-7.874 1zM7 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4m18 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4", clipRule: "evenodd" }) });
};
var ForwardRef$1K = (0, import_react.forwardRef)(SvgOneToOne);
var ForwardRef$1L = ForwardRef$1K;
var SvgOneWay = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { fillRule: "evenodd", d: "M28.924 16.384c-.05.12-.124.231-.217.324l-4 4a1 1 0 0 1-1.632-.324 1 1 0 0 1 .217-1.09L25.585 17H10.875A4.002 4.002 0 0 1 3 16a4 4 0 0 1 7.874-1h14.712l-2.294-2.293a1 1 0 0 1 1.415-1.415l4 4a1 1 0 0 1 .217 1.09M7 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4", clipRule: "evenodd" }) });
};
var ForwardRef$1I = (0, import_react.forwardRef)(SvgOneWay);
var ForwardRef$1J = ForwardRef$1I;
var SvgPaintBrush = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29 4a1 1 0 0 0-1-1c-5.51 0-11.164 6.214-14.304 10.329A7.5 7.5 0 0 0 4 20.5c0 3.86-2.443 5.591-2.559 5.671A1 1 0 0 0 2 28h9.5a7.5 7.5 0 0 0 7.171-9.696C22.788 15.164 29 9.51 29 4M15.553 14.194a48 48 0 0 1 1.26-1.569 9.5 9.5 0 0 1 2.562 2.561q-.738.618-1.569 1.262a7.6 7.6 0 0 0-2.254-2.254m5.337-.335a11.6 11.6 0 0 0-2.75-2.75c3.973-4.316 6.969-5.625 8.738-5.989-.357 1.77-1.672 4.766-5.988 8.739" }) });
};
var ForwardRef$1G = (0, import_react.forwardRef)(SvgPaintBrush);
var ForwardRef$1H = ForwardRef$1G;
var SvgPaintRoller = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M31 13v6.25a2.01 2.01 0 0 1-1.45 1.922L17 24.75V29a1 1 0 0 1-2 0v-4.25a2.01 2.01 0 0 1 1.45-1.922L29 19.25V13h-2v3a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-3H2a1 1 0 0 1 0-2h2V8a2 2 0 0 1 2-2h19a2 2 0 0 1 2 2v3h2a2 2 0 0 1 2 2" }) });
};
var ForwardRef$1E = (0, import_react.forwardRef)(SvgPaintRoller);
var SvgPalette = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M25.096 6.736A12.9 12.9 0 0 0 16 3h-.134A13 13 0 0 0 3 16c0 5.375 3.323 9.883 8.67 11.771A4 4 0 0 0 17 24a2 2 0 0 1 2-2h5.776a3.976 3.976 0 0 0 3.9-3.11c.224-.984.332-1.99.324-3a12.9 12.9 0 0 0-3.904-9.154M10.5 21a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m0-7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5.5-3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" }) });
};
var ForwardRef$1C = (0, import_react.forwardRef)(SvgPalette);
var SvgPaperPlane = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.925 5.543v.018L21.65 29.554A1.985 1.985 0 0 1 19.728 31a1.98 1.98 0 0 1-1.803-1.144l-4.464-9.423a.5.5 0 0 1 .099-.568l7.158-7.159a1 1 0 0 0-1.414-1.413l-7.169 7.157a.5.5 0 0 1-.567.099l-9.376-4.441A2.05 2.05 0 0 1 1 12.17a1.99 1.99 0 0 1 1.446-1.815L26.44 3.08h.018a2 2 0 0 1 2.468 2.463" }) });
};
var ForwardRef$1A = (0, import_react.forwardRef)(SvgPaperPlane);
var ForwardRef$1B = ForwardRef$1A;
var SvgPaperclip = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m26.56 17.061-10.257 10.25a7.501 7.501 0 0 1-10.607-10.61l12.27-12.236a5 5 0 0 1 7.07 7.074l-.021.02L13.04 23.086a1.503 1.503 0 0 1-2.121-.041 1.5 1.5 0 0 1 .041-2.121L22.924 9.409a2 2 0 1 0-2.838-2.82L7.816 18.82a4.5 4.5 0 1 0 6.366 6.364l10.258-10.25a1.503 1.503 0 0 1 2.125 2.125z" }) });
};
var ForwardRef$1y = (0, import_react.forwardRef)(SvgPaperclip);
var ForwardRef$1z = ForwardRef$1y;
var SvgParagraph = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M3.5 8A1.5 1.5 0 0 1 5 6.5h22a1.5 1.5 0 0 1 0 3H5A1.5 1.5 0 0 1 3.5 8M5 14.5h16a1.5 1.5 0 1 0 0-3H5a1.5 1.5 0 1 0 0 3m22 2H5a1.5 1.5 0 1 0 0 3h22a1.5 1.5 0 1 0 0-3m-6 5H5a1.5 1.5 0 1 0 0 3h16a1.5 1.5 0 1 0 0-3" }) });
};
var ForwardRef$1w = (0, import_react.forwardRef)(SvgParagraph);
var SvgPencil = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m28.414 9.171-5.585-5.586a2 2 0 0 0-2.829 0L4.586 19A1.98 1.98 0 0 0 4 20.414V26a2 2 0 0 0 2 2h5.586A1.98 1.98 0 0 0 13 27.414L28.414 12a2 2 0 0 0 0-2.829M24 13.585 18.414 8l3-3L27 10.585z" }) });
};
var ForwardRef$1u = (0, import_react.forwardRef)(SvgPencil);
var ForwardRef$1v = ForwardRef$1u;
var SvgPhone = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.985 21.885A7.03 7.03 0 0 1 22 28c-9.925 0-18-8.075-18-18a7.03 7.03 0 0 1 6.115-6.985 2 2 0 0 1 2.078 1.19l2.64 5.894v.015a2 2 0 0 1-.16 1.886 1 1 0 0 1-.07.096L12 15.181c.936 1.903 2.926 3.875 4.854 4.814l3.042-2.589q.045-.037.094-.07a2 2 0 0 1 1.896-.175l.017.008 5.888 2.639a2 2 0 0 1 1.194 2.077" }) });
};
var ForwardRef$1s = (0, import_react.forwardRef)(SvgPhone);
var ForwardRef$1t = ForwardRef$1s;
var SvgPin = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m29.416 13-6.683 6.706c.57 1.584.806 4.236-1.65 7.5a2 2 0 0 1-1.458.794h-.141a2 2 0 0 1-1.415-.586l-6.033-6.04-5.328 5.333a1 1 0 1 1-1.415-1.415l5.332-5.328-6.037-6.038a2 2 0 0 1 .162-2.972c3.178-2.564 6.219-2.06 7.55-1.643L19 2.587a2 2 0 0 1 2.829 0l7.586 7.585A2 2 0 0 1 29.416 13" }) });
};
var ForwardRef$1q = (0, import_react.forwardRef)(SvgPin);
var ForwardRef$1r = ForwardRef$1q;
var SvgPinMap = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 2A11.013 11.013 0 0 0 5 13c0 9.413 10 16.521 10.426 16.819a1 1 0 0 0 1.148 0C17 29.52 27 22.413 27 13A11.01 11.01 0 0 0 16 2m0 7a4 4 0 1 1 0 8 4 4 0 0 1 0-8" }) });
};
var ForwardRef$1o = (0, import_react.forwardRef)(SvgPinMap);
var ForwardRef$1p = ForwardRef$1o;
var SvgPlane = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30 17v4a1 1 0 0 1-1.196.98L19.5 20.125v2.966l2.207 2.206A1 1 0 0 1 22 26v3a1 1 0 0 1-1.375.929L16 28.078l-4.625 1.85A1 1 0 0 1 10 29v-3a1 1 0 0 1 .293-.707l2.207-2.207v-2.961L3.196 21.98A1 1 0 0 1 2 21v-4a1 1 0 0 1 .553-.895l9.947-4.972V5.5a3.5 3.5 0 1 1 7 0v5.633l9.948 4.972A1 1 0 0 1 30 17" }) });
};
var ForwardRef$1m = (0, import_react.forwardRef)(SvgPlane);
var ForwardRef$1n = ForwardRef$1m;
var SvgPlant = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M25.676 18.884a7.6 7.6 0 0 1-3.978 1.107 9 9 0 0 1-3.42-.707A6.94 6.94 0 0 0 17 23.314V27a1 1 0 0 1-1.066 1A1.023 1.023 0 0 1 15 26.969v-1.555l-4.828-4.828A6.6 6.6 0 0 1 7.93 21a5.73 5.73 0 0 1-2.99-.834C2.216 18.511.75 14.702 1.034 9.974a1 1 0 0 1 .94-.94c4.728-.28 8.537 1.182 10.187 3.906a5.75 5.75 0 0 1 .806 3.56.5.5 0 0 1-.86.304l-2.4-2.513a1 1 0 0 0-1.415 1.414l6.736 6.906q.01-.146.026-.291a8.57 8.57 0 0 1 2.33-4.933l6.323-6.682a1 1 0 0 0-1.413-1.415l-6.125 6.477a.5.5 0 0 1-.848-.217c-.592-2.185-.331-4.36.8-6.228 2.233-3.685 7.428-5.657 13.898-5.277a1 1 0 0 1 .94.94c.375 6.471-1.598 11.666-5.283 13.899" }) });
};
var ForwardRef$1k = (0, import_react.forwardRef)(SvgPlant);
var ForwardRef$1l = ForwardRef$1k;
var SvgPlay = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30 16a1.97 1.97 0 0 1-.95 1.689L11.04 28.706a2 2 0 0 1-2.767-.688A2 2 0 0 1 8 27.016V4.984a1.98 1.98 0 0 1 1.015-1.728 2 2 0 0 1 2.025.038L29.05 14.31A1.97 1.97 0 0 1 30 16" }) });
};
var ForwardRef$1i = (0, import_react.forwardRef)(SvgPlay);
var ForwardRef$1j = ForwardRef$1i;
var SvgPlus = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5h-9.5V27a1.5 1.5 0 1 1-3 0v-9.5H5a1.5 1.5 0 1 1 0-3h9.5V5a1.5 1.5 0 1 1 3 0v9.5H27a1.5 1.5 0 0 1 1.5 1.5" }) });
};
var ForwardRef$1g = (0, import_react.forwardRef)(SvgPlus);
var ForwardRef$1h = ForwardRef$1g;
var SvgPlusCircle = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.016 13.016 0 0 0 16 3m5 14h-4v4a1 1 0 0 1-2 0v-4h-4a1 1 0 0 1 0-2h4v-4a1 1 0 0 1 2 0v4h4a1 1 0 0 1 0 2" }) });
};
var ForwardRef$1e = (0, import_react.forwardRef)(SvgPlusCircle);
var SvgPresentationChart = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 5H17V3a1 1 0 0 0-2 0v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h4.92l-2.701 3.375a1 1 0 0 0 1.562 1.25L12.48 24h7.04l3.699 4.625a1 1 0 1 0 1.562-1.25L22.08 24H27a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2M13 18a1 1 0 0 1-2 0v-3a1 1 0 0 1 2 0zm4 0a1 1 0 0 1-2 0v-5a1 1 0 0 1 2 0zm4 0a1 1 0 0 1-2 0v-7a1 1 0 0 1 2 0z" }) });
};
var ForwardRef$1c = (0, import_react.forwardRef)(SvgPresentationChart);
var ForwardRef$1d = ForwardRef$1c;
var SvgPriceTag = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M30.414 17 18 4.586A1.98 1.98 0 0 0 16.586 4H5a1 1 0 0 0-1 1v11.586A1.98 1.98 0 0 0 4.586 18L17 30.414a2 2 0 0 0 2.829 0l10.585-10.585a2 2 0 0 0 0-2.829M10.5 12a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" }) });
};
var ForwardRef$1a = (0, import_react.forwardRef)(SvgPriceTag);
var ForwardRef$1b = ForwardRef$1a;
var SvgPuzzlePiece = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M20.723 28H26a2 2 0 0 0 2-2v-4.706a1 1 0 0 0-1.383-.919 2.9 2.9 0 0 1-1.117.221c-1.654 0-3-1.387-3-3.091s1.346-3.091 3-3.091c.383 0 .763.075 1.117.221A1 1 0 0 0 28 13.706V9a2 2 0 0 0-2-2h-4.527a4.5 4.5 0 1 0-8.945 0H8a2 2 0 0 0-2 2v4.028a4.5 4.5 0 1 0 0 8.945V26a2 2 0 0 0 2 2h5.278" }) });
};
var ForwardRef$18 = (0, import_react.forwardRef)(SvgPuzzlePiece);
var ForwardRef$19 = ForwardRef$18;
var SvgQuestion = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M18 22.5a2 2 0 1 1-4 0 2 2 0 0 1 4 0M29.5 16A13.5 13.5 0 1 1 16 2.5 13.515 13.515 0 0 1 29.5 16m-3 0A10.5 10.5 0 1 0 16 26.5 10.51 10.51 0 0 0 26.5 16M16 8c-3.033 0-5.5 2.242-5.5 5v.5a1.5 1.5 0 1 0 3 0V13c0-1.102 1.125-2 2.5-2s2.5.898 2.5 2-1.125 2-2.5 2a1.5 1.5 0 0 0-1.5 1.5v1a1.5 1.5 0 0 0 2.966.32C19.79 17.235 21.5 15.296 21.5 13c0-2.758-2.468-5-5.5-5" }) });
};
var ForwardRef$16 = (0, import_react.forwardRef)(SvgQuestion);
var ForwardRef$17 = ForwardRef$16;
var SvgQuotes = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M14.5 9v11a6.006 6.006 0 0 1-6 6 1 1 0 0 1 0-2 4 4 0 0 0 4-4v-1H5a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h7.5a2 2 0 0 1 2 2M27 7h-7.5a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2H27v1a4 4 0 0 1-4 4 1 1 0 0 0 0 2 6.006 6.006 0 0 0 6-6V9a2 2 0 0 0-2-2" }) });
};
var ForwardRef$14 = (0, import_react.forwardRef)(SvgQuotes);
var ForwardRef$15 = ForwardRef$14;
var SvgRestaurant = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 5v23a1 1 0 0 1-2 0v-6h-6a1 1 0 0 1-1-1c.046-2.395.349-4.779.902-7.11 1.223-5.061 3.54-8.454 6.704-9.809a1 1 0 0 1 1.394.92m-12.014-.164a.999.999 0 1 0-1.972.33L13.986 11H11V5a1 1 0 0 0-2 0v6H6.014l.972-5.835a1 1 0 1 0-1.972-.329l-1 6A1 1 0 0 0 4 11a6.01 6.01 0 0 0 5 5.915V28a1 1 0 1 0 2 0V16.915A6.01 6.01 0 0 0 16 11q0-.083-.014-.164z" }) });
};
var ForwardRef$12 = (0, import_react.forwardRef)(SvgRestaurant);
var ForwardRef$13 = ForwardRef$12;
var SvgRocket = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M19 28a1 1 0 0 1-1 1h-4a1 1 0 0 1 0-2h4a1 1 0 0 1 1 1m8.953-8.521-1.546 6.954a2 2 0 0 1-3.188 1.138l-3.405-2.57h-7.625L8.78 27.57a2 2 0 0 1-3.189-1.138l-1.545-6.954a2.01 2.01 0 0 1 .415-1.714l3.57-4.282c.12-1.574.482-3.12 1.072-4.584 1.612-4.043 4.5-6.579 5.671-7.481a2 2 0 0 1 2.45 0c1.167.902 4.059 3.438 5.671 7.48.59 1.465.952 3.01 1.072 4.585l3.57 4.282a2.01 2.01 0 0 1 .415 1.714m-17.404 4.25q-2.014-3.666-2.445-7.209L6 19.045 7.545 26l.022-.016zM17.5 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0m8.5 6.545-2.104-2.525q-.428 3.535-2.445 7.211l2.982 2.25.022.017z" }) });
};
var ForwardRef$10 = (0, import_react.forwardRef)(SvgRocket);
var ForwardRef$11 = ForwardRef$10;
var SvgScissors = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M19.716 14.141a1 1 0 0 1 .261-1.391l8.458-5.788a1 1 0 0 1 1.125 1.652L21.101 14.4a1 1 0 0 1-1.39-.261zm10.109 10.634a1 1 0 0 1-1.39.261L17 17.211l-5.315 3.636a4.5 4.5 0 1 1-1.125-1.65L15.229 16l-4.673-3.198a4.5 4.5 0 1 1 1.125-1.65l17.875 12.233a1 1 0 0 1 .269 1.39M9 22.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0m0-13a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0" }) });
};
var ForwardRef$_ = (0, import_react.forwardRef)(SvgScissors);
var ForwardRef$$ = ForwardRef$_;
var SvgSealCheck = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 256 256", fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M225.86 102.82c-3.77-3.94-7.67-8-9.14-11.57-1.36-3.27-1.44-8.69-1.52-13.94-.15-9.76-.31-20.82-8-28.51s-18.75-7.85-28.51-8c-5.25-.08-10.67-.16-13.94-1.52-3.56-1.47-7.63-5.37-11.57-9.14C146.28 23.51 138.44 16 128 16s-18.27 7.51-25.18 14.14c-3.94 3.77-8 7.67-11.57 9.14-3.25 1.36-8.69 1.44-13.94 1.52-9.76.15-20.82.31-28.51 8s-7.8 18.75-8 28.51c-.08 5.25-.16 10.67-1.52 13.94-1.47 3.56-5.37 7.63-9.14 11.57C23.51 109.72 16 117.56 16 128s7.51 18.27 14.14 25.18c3.77 3.94 7.67 8 9.14 11.57 1.36 3.27 1.44 8.69 1.52 13.94.15 9.76.31 20.82 8 28.51s18.75 7.85 28.51 8c5.25.08 10.67.16 13.94 1.52 3.56 1.47 7.63 5.37 11.57 9.14 6.9 6.63 14.74 14.14 25.18 14.14s18.27-7.51 25.18-14.14c3.94-3.77 8-7.67 11.57-9.14 3.27-1.36 8.69-1.44 13.94-1.52 9.76-.15 20.82-.31 28.51-8s7.85-18.75 8-28.51c.08-5.25.16-10.67 1.52-13.94 1.47-3.56 5.37-7.63 9.14-11.57 6.63-6.9 14.14-14.74 14.14-25.18s-7.51-18.27-14.14-25.18m-52.2 6.84-56 56a8 8 0 0 1-11.32 0l-24-24a8 8 0 0 1 11.32-11.32L112 148.69l50.34-50.35a8 8 0 0 1 11.32 11.32" }) });
};
var ForwardRef$Y = (0, import_react.forwardRef)(SvgSealCheck);
var SvgSearch = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29.061 26.939 23.125 21A11.515 11.515 0 1 0 21 23.125l5.941 5.942a1.503 1.503 0 0 0 2.125-2.125zM5.5 14a8.5 8.5 0 1 1 8.5 8.5A8.51 8.51 0 0 1 5.5 14" }) });
};
var ForwardRef$W = (0, import_react.forwardRef)(SvgSearch);
var ForwardRef$X = ForwardRef$W;
var SvgServer = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26 5H6a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h20a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2m-3.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3M26 17H6a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h20a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2m-3.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" }) });
};
var ForwardRef$U = (0, import_react.forwardRef)(SvgServer);
var ForwardRef$V = ForwardRef$U;
var SvgShield = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28 7v7.346c0 11.202-9.477 14.918-11.375 15.549a1.94 1.94 0 0 1-1.25 0C13.475 29.264 4 25.548 4 14.346V7a2 2 0 0 1 2-2h20a2 2 0 0 1 2 2" }) });
};
var ForwardRef$S = (0, import_react.forwardRef)(SvgShield);
var ForwardRef$T = ForwardRef$S;
var SvgShirt = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m30.949 7.653-6.47-3.528A1 1 0 0 0 24 4h-4a1 1 0 0 0-1 1 3 3 0 0 1-6 0 1 1 0 0 0-1-1H8a1 1 0 0 0-.48.125L1.051 7.653a1.97 1.97 0 0 0-.824 2.657l2.41 4.601A2.05 2.05 0 0 0 4.458 16H7v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V16h2.543a2.05 2.05 0 0 0 1.822-1.089l2.409-4.601a1.97 1.97 0 0 0-.825-2.658M4.459 14a.08.08 0 0 1-.051-.016L2.01 9.408 7 6.685V14zm23.134-.018a.07.07 0 0 1-.052.018H25V6.685l4.99 2.723z" }) });
};
var ForwardRef$Q = (0, import_react.forwardRef)(SvgShirt);
var ForwardRef$R = ForwardRef$Q;
var SvgShoppingCart = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M12 27a2 2 0 1 1-4 0 2 2 0 0 1 4 0m11-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4m5.805-16.594A1 1 0 0 0 28 8H6.04L5.026 4.45A2.01 2.01 0 0 0 3.103 3H1a1 1 0 0 0 0 2h2.103l4.522 15.824A3.01 3.01 0 0 0 10.509 23h12.014a2.99 2.99 0 0 0 2.867-2.117l3.566-11.59a1 1 0 0 0-.151-.887" }) });
};
var ForwardRef$O = (0, import_react.forwardRef)(SvgShoppingCart);
var ForwardRef$P = ForwardRef$O;
var SvgSignOut = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M14.5 27a1.5 1.5 0 0 1-1.5 1.5H6A2.5 2.5 0 0 1 3.5 26V6A2.5 2.5 0 0 1 6 3.5h7a1.5 1.5 0 0 1 0 3H6.5v19H13a1.5 1.5 0 0 1 1.5 1.5m13.561-12.061-5-5a1.503 1.503 0 0 0-2.125 2.125l2.439 2.436H13a1.5 1.5 0 1 0 0 3h10.375l-2.44 2.439a1.503 1.503 0 0 0 2.125 2.125l5-5a1.5 1.5 0 0 0 .001-2.125" }) });
};
var ForwardRef$M = (0, import_react.forwardRef)(SvgSignOut);
var ForwardRef$N = ForwardRef$M;
var SvgSlidersHorizontal = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M4 10a1 1 0 0 1 1-1h4.646a3.5 3.5 0 0 1 6.708 0H27a1 1 0 1 1 0 2H16.354a3.5 3.5 0 0 1-6.708 0H5a1 1 0 0 1-1-1m23 11h-2.646a3.5 3.5 0 0 0-6.708 0H5a1 1 0 0 0 0 2h12.646a3.5 3.5 0 0 0 6.708 0H27a1 1 0 1 0 0-2" }) });
};
var ForwardRef$K = (0, import_react.forwardRef)(SvgSlidersHorizontal);
var SvgSparkle = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M26 18a1.97 1.97 0 0 1-1.302 1.867l-6.457 2.375-2.375 6.452a1.99 1.99 0 0 1-3.735 0L9.75 22.25l-6.452-2.375a1.99 1.99 0 0 1 0-3.735l6.456-2.375 2.375-6.451a1.99 1.99 0 0 1 3.735 0l2.375 6.456 6.451 2.375A1.97 1.97 0 0 1 26 18M19 6h2v2a1 1 0 0 0 2 0V6h2a1 1 0 1 0 0-2h-2V2a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2m11 4h-1V9a1 1 0 1 0-2 0v1h-1a1 1 0 0 0 0 2h1v1a1 1 0 0 0 2 0v-1h1a1 1 0 0 0 0-2" }) });
};
var ForwardRef$I = (0, import_react.forwardRef)(SvgSparkle);
var ForwardRef$J = ForwardRef$I;
var SvgSquaresFour = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M15 7v6a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2m10-2h-6a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2M13 17H7a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2m12 0h-6a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2" }) });
};
var ForwardRef$G = (0, import_react.forwardRef)(SvgSquaresFour);
var ForwardRef$H = ForwardRef$G;
var SvgStack = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: [
    (0, import_jsx_runtime.jsx)("path", { d: "M27.5 21.136 16 27.843 4.5 21.136a1 1 0 0 0-1 1.728l12 7a1 1 0 0 0 1.008 0l12-7a1 1 0 1 0-1.008-1.728" }),
    (0, import_jsx_runtime.jsx)("path", { d: "M27.5 15.136 16 21.843 4.5 15.136a1 1 0 0 0-1 1.728l12 7a1 1 0 0 0 1.008 0l12-7a1 1 0 1 0-1.008-1.728" }),
    (0, import_jsx_runtime.jsx)("path", { d: "m3.5 10.864 12 7a1 1 0 0 0 1.008 0l12-7a1 1 0 0 0 0-1.728l-12-7a1 1 0 0 0-1.008 0l-12 7a1 1 0 0 0 0 1.728" })
  ] });
};
var ForwardRef$E = (0, import_react.forwardRef)(SvgStack);
var ForwardRef$F = ForwardRef$E;
var SvgStar = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m29.313 14.298-5.638 4.92 1.689 7.325a2 2 0 0 1-2.98 2.167l-6.389-3.875L9.62 28.71a2 2 0 0 1-2.98-2.168l1.686-7.317-5.638-4.928a2 2 0 0 1 1.138-3.507l7.433-.644 2.901-6.92a1.994 1.994 0 0 1 3.68 0l2.91 6.92 7.43.644a2 2 0 0 1 1.139 3.508z" }) });
};
var ForwardRef$C = (0, import_react.forwardRef)(SvgStar);
var ForwardRef$D = ForwardRef$C;
var SvgStethoscope = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29 19a4 4 0 1 0-4.991 3.875A1 1 0 0 0 24 23a4 4 0 0 1-4 4h-3a4 4 0 0 1-4-4v-5.065c3.934-.5 7-3.934 7-8.039V5a2 2 0 0 0-2-2h-2a1 1 0 1 0 0 2h2v4.896c0 3.323-2.656 6.061-5.92 6.104A6 6 0 0 1 6 10V5h2a1 1 0 0 0 0-2H6a2 2 0 0 0-2 2v5a8 8 0 0 0 7 7.936V23a6.006 6.006 0 0 0 6 6h3a6.006 6.006 0 0 0 6-6 1 1 0 0 0-.009-.125A4 4 0 0 0 29 19m-4 1a1 1 0 1 1 0-2 1 1 0 0 1 0 2" }) });
};
var ForwardRef$A = (0, import_react.forwardRef)(SvgStethoscope);
var ForwardRef$B = ForwardRef$A;
var SvgStop = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 256 256", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M216 56v144a16 16 0 0 1-16 16H56a16 16 0 0 1-16-16V56a16 16 0 0 1 16-16h144a16 16 0 0 1 16 16" }) });
};
var ForwardRef$y = (0, import_react.forwardRef)(SvgStop);
var SvgStore = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29 12a1 1 0 0 0-.038-.275L27.17 5.45A2.01 2.01 0 0 0 25.25 4H6.75a2.01 2.01 0 0 0-1.919 1.45L3.04 11.725A1 1 0 0 0 3 12v2a5 5 0 0 0 2 4v8a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2v-8a5 5 0 0 0 2-4zm-18 2a3 3 0 0 1-4.39 2.657 1 1 0 0 0-.228-.132A3 3 0 0 1 5 14v-1h6zm8 0a3 3 0 0 1-6 0v-1h6zm8 0a3 3 0 0 1-1.384 2.525q-.12.051-.225.131A3 3 0 0 1 21 14v-1h6z" }) });
};
var ForwardRef$w = (0, import_react.forwardRef)(SvgStore);
var ForwardRef$x = ForwardRef$w;
var SvgStrikeThrough = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 16a1.5 1.5 0 0 1-1.5 1.5h-3.767A5.19 5.19 0 0 1 24.5 21c0 1.806-.976 3.54-2.679 4.756C20.25 26.881 18.18 27.5 16 27.5s-4.25-.619-5.821-1.744C8.476 24.54 7.5 22.806 7.5 21a1.5 1.5 0 0 1 3 0c0 1.898 2.519 3.5 5.5 3.5s5.5-1.602 5.5-3.5c0-1.595-1.163-2.523-4.419-3.5H5a1.5 1.5 0 1 1 0-3h22a1.5 1.5 0 0 1 1.5 1.5M9.389 12.5a1.5 1.5 0 0 0 1.5-1.5c0-2 2.197-3.5 5.111-3.5 2.17 0 3.921.831 4.685 2.223a1.5 1.5 0 0 0 2.625-1.446C22.016 5.914 19.281 4.5 16 4.5c-4.625 0-8.111 2.794-8.111 6.5a1.5 1.5 0 0 0 1.5 1.5" }) });
};
var ForwardRef$u = (0, import_react.forwardRef)(SvgStrikeThrough);
var ForwardRef$v = ForwardRef$u;
var SvgSun = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M15 5V2a1 1 0 0 1 2 0v3a1 1 0 0 1-2 0m1 3a8 8 0 1 0 8 8 8.01 8.01 0 0 0-8-8m-8.707.707a1 1 0 1 0 1.414-1.415l-2-2a1 1 0 1 0-1.414 1.415zm0 14.586-2 2a1 1 0 1 0 1.414 1.415l2-2a1 1 0 1 0-1.415-1.415M24 9a1 1 0 0 0 .707-.293l2-2a1 1 0 0 0-1.415-1.414l-2 2A1 1 0 0 0 24 9m.707 14.293a1 1 0 1 0-1.415 1.415l2 2a1 1 0 0 0 1.415-1.415zM6 16a1 1 0 0 0-1-1H2a1 1 0 0 0 0 2h3a1 1 0 0 0 1-1m10 10a1 1 0 0 0-1 1v3a1 1 0 0 0 2 0v-3a1 1 0 0 0-1-1m14-11h-3a1 1 0 0 0 0 2h3a1 1 0 0 0 0-2" }) });
};
var ForwardRef$s = (0, import_react.forwardRef)(SvgSun);
var ForwardRef$t = ForwardRef$s;
var SvgTelevision = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 8h-8.586l4.293-4.292a1 1 0 0 0-1.415-1.415L16 7.586l-5.292-5.293a1 1 0 1 0-1.415 1.415L13.586 8H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h22a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2m0 17h-7V10h7zm-2-10.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0 6a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" }) });
};
var ForwardRef$q = (0, import_react.forwardRef)(SvgTelevision);
var ForwardRef$r = ForwardRef$q;
var SvgThumbDown = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m29.978 19.625-1.5-12A3 3 0 0 0 25.5 5H4a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h5.383l4.722 9.448A1 1 0 0 0 15 30a5 5 0 0 0 5-5v-2h7a3 3 0 0 0 2.977-3.375M9 18H4V7h5z" }) });
};
var ForwardRef$o = (0, import_react.forwardRef)(SvgThumbDown);
var ForwardRef$p = ForwardRef$o;
var SvgThumbUp = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M29.25 10.015A3 3 0 0 0 27 9h-7V7a5 5 0 0 0-5-5 1 1 0 0 0-.895.553L9.383 12H4a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h21.5a3 3 0 0 0 2.977-2.625l1.5-12a3 3 0 0 0-.727-2.36M4 14h5v11H4z" }) });
};
var ForwardRef$m = (0, import_react.forwardRef)(SvgThumbUp);
var ForwardRef$n = ForwardRef$m;
var SvgTrain = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M23 3H9a4 4 0 0 0-4 4v16a4 4 0 0 0 4 4h1l-1.8 2.4a1 1 0 0 0 1.6 1.2l2.7-3.6h7l2.7 3.6a1 1 0 0 0 1.6-1.2L22 27h1a4 4 0 0 0 4-4V7a4 4 0 0 0-4-4M10.5 23a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m4.5-8H7v-5h8zm6.5 8a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m3.5-8h-8v-5h8z" }) });
};
var ForwardRef$k = (0, import_react.forwardRef)(SvgTrain);
var ForwardRef$l = ForwardRef$k;
var SvgTrash = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M27 6h-5V5a3 3 0 0 0-3-3h-6a3 3 0 0 0-3 3v1H5a1 1 0 0 0 0 2h1v18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8h1a1 1 0 1 0 0-2M14 21a1 1 0 0 1-2 0v-8a1 1 0 0 1 2 0zm6 0a1 1 0 0 1-2 0v-8a1 1 0 0 1 2 0zm0-15h-8V5a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1z" }) });
};
var ForwardRef$i = (0, import_react.forwardRef)(SvgTrash);
var ForwardRef$j = ForwardRef$i;
var SvgTyphoon = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m23.54 2.267-3.711 3.377c1.7.52 3.298 1.397 4.653 2.631 4.684 4.266 4.684 11.184 0 15.45q-5.184 4.72-16.021 6.008l3.71-3.377a12.2 12.2 0 0 1-4.653-2.63c-4.684-4.267-4.712-11.16 0-15.45q5.184-4.721 16.021-6.01m-7.54 8.4c-3.314 0-6 2.388-6 5.333s2.686 5.333 6 5.333 6-2.387 6-5.333c0-2.945-2.686-5.333-6-5.333" }) });
};
var ForwardRef$g = (0, import_react.forwardRef)(SvgTyphoon);
var ForwardRef$h = ForwardRef$g;
var SvgUnderline = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M25.5 28a1.5 1.5 0 0 1-1.5 1.5H8a1.5 1.5 0 1 1 0-3h16a1.5 1.5 0 0 1 1.5 1.5M16 24.5a8.51 8.51 0 0 0 8.5-8.5V7a1.5 1.5 0 1 0-3 0v9a5.5 5.5 0 0 1-11 0V7a1.5 1.5 0 1 0-3 0v9a8.51 8.51 0 0 0 8.5 8.5" }) });
};
var ForwardRef$e = (0, import_react.forwardRef)(SvgUnderline);
var ForwardRef$f = ForwardRef$e;
var SvgUpload = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.5 19v7a2.5 2.5 0 0 1-2.5 2.5H6A2.5 2.5 0 0 1 3.5 26v-7a1.5 1.5 0 0 1 3 0v6.5h19V19a1.5 1.5 0 1 1 3 0m-16.439-7.939L14.5 8.625V19a1.5 1.5 0 1 0 3 0V8.625l2.439 2.44a1.503 1.503 0 0 0 2.125-2.125l-5-5a1.5 1.5 0 0 0-2.125 0l-5 5a1.503 1.503 0 1 0 2.125 2.125z" }) });
};
var ForwardRef$c = (0, import_react.forwardRef)(SvgUpload);
var SvgUser = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M28.866 27.5A1 1 0 0 1 28 28H4a1 1 0 0 1-.865-1.5c1.904-3.291 4.838-5.651 8.261-6.77a9 9 0 1 1 9.208 0c3.424 1.119 6.357 3.479 8.261 6.77a1 1 0 0 1 .001 1" }) });
};
var ForwardRef$a = (0, import_react.forwardRef)(SvgUser);
var ForwardRef$b = ForwardRef$a;
var SvgVolumeMute = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M19.44 3.101a1 1 0 0 0-1.054.11L9.656 10H4a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h5.656l8.73 6.789A1 1 0 0 0 20 28V4a1 1 0 0 0-.56-.899M28.414 16l2.293-2.292a1.001 1.001 0 0 0-1.415-1.415L27 14.586l-2.293-2.293a1 1 0 1 0-1.415 1.415L25.587 16l-2.293 2.293a1 1 0 0 0 1.415 1.415L27 17.414l2.293 2.294a1 1 0 0 0 1.415-1.415z" }) });
};
var ForwardRef$8 = (0, import_react.forwardRef)(SvgVolumeMute);
var ForwardRef$9 = ForwardRef$8;
var SvgVolumeUp = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M19.439 3.101a1 1 0 0 0-1.053.11L9.656 10H4a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h5.656l8.73 6.789A1.001 1.001 0 0 0 20 28V4a1 1 0 0 0-.561-.899M9 20H4v-8h5zm15.75-7.305a5 5 0 0 1 0 6.61 1 1 0 0 1-1.5-1.322 3 3 0 0 0 0-3.966 1 1 0 0 1 1.5-1.322M31 16a10 10 0 0 1-2.546 6.668 1 1 0 0 1-1.49-1.334 8 8 0 0 0 0-10.666.998.998 0 0 1 .407-1.624 1 1 0 0 1 1.083.29A9.98 9.98 0 0 1 31 16" }) });
};
var ForwardRef$6 = (0, import_react.forwardRef)(SvgVolumeUp);
var ForwardRef$7 = ForwardRef$6;
var SvgWalk = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M15 6a4 4 0 1 1 8 0 4 4 0 0 1-8 0m11 11c-3.58 0-5.226-1.662-6.969-3.421a25 25 0 0 0-1.375-1.323C13.031 8.24 5.63 15.098 5.316 15.391a1 1 0 0 0 1.369 1.458 20.5 20.5 0 0 1 3.815-2.724c1.723-.922 3.174-1.279 4.338-1.072L8.082 28.6a1 1 0 0 0 1.835.798l4.2-9.659L18 22.515V29a1 1 0 1 0 2 0v-7a1 1 0 0 0-.419-.814l-4.65-3.321L16.61 14c.33.305.657.634 1 .98C19.381 16.774 21.586 19 26 19a1 1 0 0 0 0-2" }) });
};
var ForwardRef$4 = (0, import_react.forwardRef)(SvgWalk);
var ForwardRef$5 = ForwardRef$4;
var SvgWarningCircle = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "M16 3a13 13 0 1 0 13 13A13.013 13.013 0 0 0 16 3m-1 7a1 1 0 0 1 2 0v7a1 1 0 0 1-2 0zm1 13a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" }) });
};
var ForwardRef$2 = (0, import_react.forwardRef)(SvgWarningCircle);
var SvgWheelchair = ({
  fill: fillProp = "currentColor",
  stroke: strokeProp,
  ...props
}, ref) => {
  const {
    colors
  } = nt();
  const fill = fillProp && fillProp in colors ? colors[fillProp] : fillProp;
  const stroke = strokeProp && strokeProp in colors ? colors[strokeProp] : strokeProp;
  return (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: 16, height: 16, fill, stroke, ref, ...props, children: (0, import_jsx_runtime.jsx)("path", { d: "m31.316 24.949-3 1a1 1 0 0 1-1.211-.5l-3.724-7.45H13a1 1 0 0 1-1-1v-3.707A7 7 0 0 0 14 27c3.239 0 6.261-2.256 7.031-5.25a1 1 0 1 1 1.938.5C21.96 26.162 18.19 29 14 29a9 9 0 0 1-2-17.774V8.851a3.5 3.5 0 1 1 2 0V11h7a1 1 0 0 1 0 2h-7v3h10a1 1 0 0 1 .894.552l3.612 7.225 2.178-.726a1 1 0 1 1 .632 1.898" }) });
};
var ForwardRef = (0, import_react.forwardRef)(SvgWheelchair);
var ForwardRef$1 = ForwardRef;

// node_modules/@strapi/content-type-builder/node_modules/@strapi/ui-primitives/dist/index.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
function createCollection(name) {
  const PROVIDER_NAME = `${name}CollectionProvider`;
  const [createCollectionContext, createCollectionScope2] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME);
  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
    collectionRef: { current: null },
    itemMap: /* @__PURE__ */ new Map(),
    listeners: /* @__PURE__ */ new Set()
  });
  const CollectionProvider = (props) => {
    const { scope, children } = props;
    const ref = React.useRef(null);
    const itemMap = React.useRef(/* @__PURE__ */ new Map()).current;
    const listeners = React.useRef(/* @__PURE__ */ new Set()).current;
    return (0, import_jsx_runtime2.jsx)(CollectionProviderImpl, { scope, itemMap, collectionRef: ref, listeners, children });
  };
  CollectionProvider.displayName = PROVIDER_NAME;
  const COLLECTION_SLOT_NAME = `${name}CollectionSlot`;
  const CollectionSlot = React.forwardRef((props, forwardedRef) => {
    const { scope, children } = props;
    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
    return (0, import_jsx_runtime2.jsx)($5e63c961fc1ce211$export$8c6ed5c666ac1360, { ref: composedRefs, children });
  });
  CollectionSlot.displayName = COLLECTION_SLOT_NAME;
  const ITEM_SLOT_NAME = `${name}CollectionItemSlot`;
  const ITEM_DATA_ATTR = "data-radix-collection-item";
  const CollectionItemSlot = React.forwardRef((props, forwardedRef) => {
    const { scope, children, ...itemData } = props;
    const ref = React.useRef(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const context = useCollectionContext(ITEM_SLOT_NAME, scope);
    React.useEffect(() => {
      const previousMap = Array.from(context.itemMap.values());
      context.itemMap.set(ref, { ref, ...itemData });
      context.listeners.forEach((listener) => listener(Array.from(context.itemMap.values()), previousMap));
      return () => {
        const previousMap2 = Array.from(context.itemMap.values());
        context.itemMap.delete(ref);
        context.listeners.forEach((listener) => listener(Array.from(context.itemMap.values()), previousMap2));
      };
    });
    return (0, import_jsx_runtime2.jsx)($5e63c961fc1ce211$export$8c6ed5c666ac1360, { ...{ [ITEM_DATA_ATTR]: "" }, ref: composedRefs, children });
  });
  CollectionItemSlot.displayName = ITEM_SLOT_NAME;
  function useCollection2(scope) {
    const context = useCollectionContext(`${name}CollectionConsumer`, scope);
    const getItems = React.useCallback(() => {
      const collectionNode = context.collectionRef.current;
      if (!collectionNode)
        return [];
      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
      const items = Array.from(context.itemMap.values());
      const orderedItems = items.sort(
        (a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)
      );
      return orderedItems;
    }, [context.collectionRef, context.itemMap]);
    const subscribe = React.useCallback(
      (listener) => {
        context.listeners.add(listener);
        return () => context.listeners.delete(listener);
      },
      [context.listeners]
    );
    return { getItems, subscribe };
  }
  return [
    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },
    useCollection2,
    createCollectionScope2
  ];
}
var cache = /* @__PURE__ */ new Map();
function useCollator(locale, options) {
  const cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if (cache.has(cacheKey)) {
    return cache.get(cacheKey);
  }
  const formatter = new Intl.Collator(locale, options);
  cache.set(cacheKey, formatter);
  return formatter;
}
function useFilter(locale, options) {
  const collator = useCollator(locale, {
    usage: "search",
    ...options
  });
  return {
    startsWith(string, substring) {
      if (substring.length === 0) {
        return true;
      }
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(0, substring.length), substring) === 0;
    },
    endsWith(string, substring) {
      if (substring.length === 0) {
        return true;
      }
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(-substring.length), substring) === 0;
    },
    contains(string, substring) {
      if (substring.length === 0) {
        return true;
      }
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      let scan = 0;
      const sliceLen = substring.length;
      for (; scan + sliceLen <= string.length; scan++) {
        const slice2 = string.slice(scan, scan + sliceLen);
        if (collator.compare(substring, slice2) === 0) {
          return true;
        }
      }
      return false;
    }
  };
}
var usePrev = (value) => {
  const ref = React.useRef();
  React.useEffect(() => {
    ref.current = value;
  });
  return ref.current;
};
var OPEN_KEYS$1 = [" ", "Enter", "ArrowUp", "ArrowDown"];
var SELECTION_KEYS$1 = ["Enter"];
var defaultIsPrintableCharacter = (str) => {
  return Boolean(str.length === 1 && str.match(/\S| /));
};
var COMBOBOX_NAME = "Combobox";
var [Collection$1, useCollection$1] = createCollection(COMBOBOX_NAME);
var [ComboboxProvider, useComboboxContext] = $c512c27ab02ef895$export$fd42f52fd3ae1109(COMBOBOX_NAME);
var ComboboxProviders = ({ children }) => (0, import_jsx_runtime2.jsx)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, { children: (0, import_jsx_runtime2.jsx)(Collection$1.Provider, { scope: void 0, children }) });
var formatAutocomplete = (autocomplete) => {
  if (typeof autocomplete === "string") {
    if (autocomplete === "none") {
      return {
        type: autocomplete,
        filter: void 0
      };
    }
    return {
      type: autocomplete,
      filter: "startsWith"
    };
  }
  return autocomplete;
};
var Combobox = (props) => {
  const {
    allowCustomValue = false,
    autocomplete = "none",
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    value: valueProp,
    defaultValue,
    onValueChange,
    disabled,
    required = false,
    locale = "en-EN",
    onTextValueChange,
    textValue: textValueProp,
    defaultTextValue,
    filterValue: filterValueProp,
    defaultFilterValue,
    onFilterValueChange,
    isPrintableCharacter: isPrintableCharacter2 = defaultIsPrintableCharacter
  } = props;
  const [trigger, setTrigger] = React.useState(null);
  const [viewport, setViewport] = React.useState(null);
  const [content, setContent] = React.useState(null);
  const [visuallyFocussedItem, setVisuallyFocussedItem] = React.useState(null);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  const [value, setValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  });
  const [textValue, setTextValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: textValueProp,
    defaultProp: allowCustomValue && !defaultTextValue ? valueProp : defaultTextValue,
    onChange: onTextValueChange
  });
  const [filterValue, setFilterValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: filterValueProp,
    defaultProp: defaultFilterValue,
    onChange: onFilterValueChange
  });
  const id = $1746a345f3d73bb7$export$f680877a34711e37();
  const focusFirst = React.useCallback(
    (candidates, items) => {
      var _a;
      const allItems = items.map((item) => item.ref.current);
      const [firstItem, ...restItems] = allItems;
      const [lastItem] = restItems.slice(-1);
      const PREVIOUSLY_FOCUSED_ELEMENT = visuallyFocussedItem ?? ((_a = items.find((item) => item.value === value)) == null ? void 0 : _a.ref.current);
      for (const candidate of candidates) {
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
          return;
        candidate == null ? void 0 : candidate.scrollIntoView({ block: "nearest" });
        if (candidate === firstItem && viewport)
          viewport.scrollTop = 0;
        if (candidate === lastItem && viewport)
          viewport.scrollTop = viewport.scrollHeight;
        setVisuallyFocussedItem(candidate);
        if (autocomplete === "both") {
          const item = items.find((item2) => item2.ref.current === candidate);
          if (item) {
            setTextValue(item.textValue);
          }
        }
        if (candidate !== PREVIOUSLY_FOCUSED_ELEMENT)
          return;
      }
    },
    [autocomplete, setTextValue, viewport, visuallyFocussedItem, value]
  );
  const autocompleteObject = formatAutocomplete(autocomplete);
  React.useEffect(() => {
    if (autocomplete !== "both") {
      setVisuallyFocussedItem(null);
    }
  }, [textValue, autocomplete]);
  React.useEffect(() => {
    if (content && trigger)
      return hideOthers([content, trigger]);
  }, [content, trigger]);
  return (0, import_jsx_runtime2.jsx)(ComboboxProviders, { children: (0, import_jsx_runtime2.jsx)(
    ComboboxProvider,
    {
      allowCustomValue,
      autocomplete: autocompleteObject,
      required,
      trigger,
      onTriggerChange: setTrigger,
      contentId: id,
      value,
      onValueChange: setValue,
      open,
      onOpenChange: setOpen,
      disabled,
      locale,
      focusFirst,
      textValue,
      onTextValueChange: setTextValue,
      onViewportChange: setViewport,
      onContentChange: setContent,
      visuallyFocussedItem,
      filterValue,
      onFilterValueChange: setFilterValue,
      onVisuallyFocussedItemChange: setVisuallyFocussedItem,
      isPrintableCharacter: isPrintableCharacter2,
      children
    }
  ) });
};
var TRIGGER_NAME$1 = "ComboboxTrigger";
var ComboboxTrigger = React.forwardRef((props, forwardedRef) => {
  const { ...triggerProps } = props;
  const context = useComboboxContext(TRIGGER_NAME$1);
  const handleOpen = () => {
    if (!context.disabled) {
      context.onOpenChange(true);
    }
  };
  return (0, import_jsx_runtime2.jsx)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, { asChild: true, children: (0, import_jsx_runtime2.jsx)(
    $d3863c46a17e8a28$export$20e40289641fbbb6,
    {
      asChild: true,
      trapped: context.open,
      onMountAutoFocus: (event) => {
        event.preventDefault();
      },
      onUnmountAutoFocus: (event) => {
        var _a, _b;
        (_a = context.trigger) == null ? void 0 : _a.focus({ preventScroll: true });
        (_b = document.getSelection()) == null ? void 0 : _b.empty();
        event.preventDefault();
      },
      children: (0, import_jsx_runtime2.jsx)(
        "div",
        {
          ref: forwardedRef,
          "data-disabled": context.disabled ? "" : void 0,
          ...triggerProps,
          onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(triggerProps.onClick, (event) => {
            var _a;
            if (context.disabled) {
              event.preventDefault();
              return;
            }
            (_a = context.trigger) == null ? void 0 : _a.focus();
          }),
          onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(triggerProps.onPointerDown, (event) => {
            var _a;
            if (context.disabled) {
              event.preventDefault();
              return;
            }
            const target = event.target;
            if (target.hasPointerCapture(event.pointerId)) {
              target.releasePointerCapture(event.pointerId);
            }
            const buttonTarg = target.closest("button") ?? target.closest("div");
            if (buttonTarg !== event.currentTarget) {
              return;
            }
            if (event.button === 0 && event.ctrlKey === false) {
              handleOpen();
              (_a = context.trigger) == null ? void 0 : _a.focus();
            }
          })
        }
      )
    }
  ) });
});
ComboboxTrigger.displayName = TRIGGER_NAME$1;
var INPUT_NAME = "ComboboxInput";
var ComboxboxTextInput = React.forwardRef((props, forwardedRef) => {
  var _a;
  const context = useComboboxContext(INPUT_NAME);
  const inputRef = React.useRef(null);
  const { getItems } = useCollection$1(void 0);
  const { startsWith } = useFilter(context.locale, { sensitivity: "base" });
  const isDisabled = context.disabled;
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(inputRef, forwardedRef, context.onTriggerChange);
  const handleOpen = () => {
    if (!isDisabled) {
      context.onOpenChange(true);
    }
  };
  const previousFilter = usePrev(context.filterValue);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    const timeout = setTimeout(() => {
      var _a2;
      if (context.textValue === "" || context.textValue === void 0 || context.filterValue === "" || context.filterValue === void 0)
        return;
      const firstItem = getItems().find(
        (item) => item.type === "option" && startsWith(item.textValue, context.textValue)
      );
      const characterChangedAtIndex = findChangedIndex(previousFilter ?? "", context.filterValue);
      if (firstItem && !context.visuallyFocussedItem && characterChangedAtIndex === context.filterValue.length) {
        (_a2 = inputRef.current) == null ? void 0 : _a2.setSelectionRange(context.filterValue.length, context.textValue.length);
      }
    });
    return () => clearTimeout(timeout);
  }, [context.textValue, context.filterValue, startsWith, context.visuallyFocussedItem, getItems, previousFilter]);
  return (0, import_jsx_runtime2.jsx)(
    "input",
    {
      type: "text",
      role: "combobox",
      "aria-controls": context.contentId,
      "aria-expanded": context.open,
      "aria-required": context.required,
      "aria-autocomplete": context.autocomplete.type,
      "data-state": context.open ? "open" : "closed",
      "aria-disabled": isDisabled,
      "aria-activedescendant": (_a = context.visuallyFocussedItem) == null ? void 0 : _a.id,
      disabled: isDisabled,
      "data-disabled": isDisabled ? "" : void 0,
      "data-placeholder": context.textValue === void 0 ? "" : void 0,
      value: context.textValue ?? "",
      ...props,
      ref: composedRefs,
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        var _a2, _b;
        if (["ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
          if (!context.open) {
            handleOpen();
          }
          setTimeout(() => {
            var _a3;
            const items = getItems().filter((item) => !item.disabled && item.isVisible);
            let candidateNodes = items.map((item) => item.ref.current);
            if (["ArrowUp", "End"].includes(event.key)) {
              candidateNodes = candidateNodes.slice().reverse();
            }
            if (["ArrowUp", "ArrowDown"].includes(event.key)) {
              const currentElement = context.visuallyFocussedItem ?? ((_a3 = getItems().find((item) => item.value === context.value)) == null ? void 0 : _a3.ref.current);
              if (currentElement) {
                let currentIndex = candidateNodes.indexOf(currentElement);
                if (currentIndex === candidateNodes.length - 1) {
                  currentIndex = -1;
                }
                candidateNodes = candidateNodes.slice(currentIndex + 1);
              }
            }
            if (["ArrowDown"].includes(event.key) && context.autocomplete.type === "both" && candidateNodes.length > 1) {
              const [firstItem, ...restItems] = candidateNodes;
              const firstItemText = getItems().find((item) => item.ref.current === firstItem).textValue;
              if (context.textValue === firstItemText) {
                candidateNodes = restItems;
              }
            }
            context.focusFirst(candidateNodes, getItems());
          });
          event.preventDefault();
        } else if (["Tab"].includes(event.key) && context.open) {
          event.preventDefault();
        } else if (["Escape"].includes(event.key)) {
          if (context.open) {
            context.onOpenChange(false);
          } else {
            context.onValueChange(void 0);
            context.onTextValueChange("");
          }
          event.preventDefault();
        } else if (SELECTION_KEYS$1.includes(event.key)) {
          if (context.visuallyFocussedItem) {
            const focussedItem = getItems().find((item) => item.ref.current === context.visuallyFocussedItem);
            if (focussedItem) {
              context.onValueChange(focussedItem.value);
              context.onTextValueChange(focussedItem.textValue);
              if (context.autocomplete.type === "both") {
                context.onFilterValueChange(focussedItem.textValue);
              }
              (_a2 = focussedItem.ref.current) == null ? void 0 : _a2.click();
            }
          } else {
            const matchedItem = getItems().find(
              (item) => item.type === "option" && !item.disabled && item.textValue === context.textValue
            );
            if (matchedItem) {
              context.onValueChange(matchedItem.value);
              context.onTextValueChange(matchedItem.textValue);
              if (context.autocomplete.type === "both") {
                context.onFilterValueChange(matchedItem.textValue);
              }
              (_b = matchedItem.ref.current) == null ? void 0 : _b.click();
            }
          }
          context.onOpenChange(false);
          event.preventDefault();
        } else {
          context.onVisuallyFocussedItemChange(null);
        }
      }),
      onChange: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onChange, (event) => {
        context.onTextValueChange(event.currentTarget.value);
        if (context.autocomplete.type === "both") {
          context.onFilterValueChange(event.currentTarget.value);
        }
      }),
      onKeyUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyUp, (event) => {
        var _a2;
        if (!context.open && (context.isPrintableCharacter(event.key) || ["Backspace"].includes(event.key))) {
          handleOpen();
        }
        setTimeout(() => {
          if (context.autocomplete.type === "both" && context.isPrintableCharacter(event.key) && context.filterValue !== void 0) {
            const value = context.filterValue;
            const firstItem = getItems().find((item) => startsWith(item.textValue, value));
            if (firstItem) {
              context.onTextValueChange(firstItem.textValue);
            }
          }
        });
        if (context.autocomplete.type === "none" && context.isPrintableCharacter(event.key)) {
          const value = context.textValue ?? "";
          const nextItem = getItems().find((item) => startsWith(item.textValue, value));
          if (nextItem) {
            context.onVisuallyFocussedItemChange(nextItem.ref.current);
            (_a2 = nextItem.ref.current) == null ? void 0 : _a2.scrollIntoView();
          }
        }
      }),
      onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, () => {
        if (context.open) {
          return;
        }
        context.onVisuallyFocussedItemChange(null);
        const [activeItem] = getItems().filter(
          (item) => item.textValue === context.textValue && item.type === "option"
        );
        if (activeItem) {
          context.onValueChange(activeItem.value);
          if (context.autocomplete.type === "both") {
            context.onFilterValueChange(activeItem.textValue);
          }
          return;
        }
        if (context.allowCustomValue) {
          context.onValueChange(context.textValue);
          if (context.autocomplete.type === "both") {
            context.onFilterValueChange(context.textValue);
          }
          return;
        }
        const [previousItem] = getItems().filter((item) => item.value === context.value && item.type === "option");
        if (previousItem && context.textValue !== "") {
          context.onTextValueChange(previousItem.textValue);
          if (context.autocomplete.type === "both") {
            context.onFilterValueChange(previousItem.textValue);
          }
        } else {
          context.onValueChange(void 0);
          context.onTextValueChange("");
        }
      })
    }
  );
});
ComboxboxTextInput.displayName = "ComboboxTextInput";
var ComboboxIcon = React.forwardRef((props, forwardedRef) => {
  const { children, ...iconProps } = props;
  const context = useComboboxContext(INPUT_NAME);
  const isDisabled = context.disabled;
  const handleOpen = () => {
    var _a;
    if (!isDisabled) {
      context.onOpenChange(true);
      (_a = context.trigger) == null ? void 0 : _a.focus();
    }
  };
  return (0, import_jsx_runtime2.jsx)(
    $8927f6f2acc4f386$export$250ffa63cdc0d034.button,
    {
      "aria-hidden": true,
      type: "button",
      "aria-disabled": isDisabled,
      "aria-controls": context.contentId,
      "aria-expanded": context.open,
      disabled: isDisabled,
      "data-disabled": isDisabled ? "" : void 0,
      ...iconProps,
      tabIndex: -1,
      ref: forwardedRef,
      onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(iconProps.onClick, () => {
        var _a;
        (_a = context.trigger) == null ? void 0 : _a.focus();
      }),
      onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(iconProps.onPointerDown, (event) => {
        if (event.button === 0 && event.ctrlKey === false) {
          handleOpen();
          event.preventDefault();
        }
      }),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(iconProps.onKeyDown, (event) => {
        if (OPEN_KEYS$1.includes(event.key)) {
          handleOpen();
          event.preventDefault();
        }
      }),
      children: children || "▼"
    }
  );
});
ComboboxIcon.displayName = "ComboboxIcon";
var PORTAL_NAME$1 = "ComboboxPortal";
var ComboboxPortal = (props) => {
  return (0, import_jsx_runtime2.jsx)($f1701beae083dbae$export$602eac185826482c, { asChild: true, ...props });
};
ComboboxPortal.displayName = PORTAL_NAME$1;
var CONTENT_NAME$1 = "ComboboxContent";
var ComboboxContent = React.forwardRef((props, forwardedRef) => {
  const context = useComboboxContext(CONTENT_NAME$1);
  const { getItems } = useCollection$1(void 0);
  const [fragment, setFragment] = React.useState();
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    setFragment(new DocumentFragment());
  }, []);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (context.open && context.autocomplete.type === "none") {
      setTimeout(() => {
        var _a;
        const activeItem = getItems().find((item) => item.value === context.value);
        (_a = activeItem == null ? void 0 : activeItem.ref.current) == null ? void 0 : _a.scrollIntoView({ block: "nearest" });
      });
    }
  }, [getItems, context.autocomplete, context.value, context.open]);
  if (!context.open) {
    const frag = fragment;
    return frag ? ReactDOM.createPortal(
      (0, import_jsx_runtime2.jsx)(Collection$1.Slot, { scope: void 0, children: (0, import_jsx_runtime2.jsx)("div", { children: props.children }) }),
      frag
    ) : null;
  }
  return (0, import_jsx_runtime2.jsx)(ComboboxContentImpl, { ...props, ref: forwardedRef });
});
ComboboxContent.displayName = CONTENT_NAME$1;
var CONTENT_MARGIN$1 = 10;
var ComboboxContentImpl = React.forwardRef(
  (props, forwardedRef) => {
    const { onEscapeKeyDown, onPointerDownOutside, ...contentProps } = props;
    const context = useComboboxContext(CONTENT_NAME$1);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => context.onContentChange(node));
    const { onOpenChange } = context;
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    React.useEffect(() => {
      const close = () => {
        onOpenChange(false);
      };
      window.addEventListener("blur", close);
      window.addEventListener("resize", close);
      return () => {
        window.removeEventListener("blur", close);
        window.removeEventListener("resize", close);
      };
    }, [onOpenChange]);
    return (0, import_jsx_runtime2.jsx)(Combination_default, { allowPinchZoom: true, children: (0, import_jsx_runtime2.jsx)(
      $5cb92bef7577960e$export$177fb62ff3ec1f22,
      {
        asChild: true,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside: (event) => {
          event.preventDefault();
        },
        onDismiss: () => {
          var _a;
          context.onOpenChange(false);
          (_a = context.trigger) == null ? void 0 : _a.focus({ preventScroll: true });
        },
        children: (0, import_jsx_runtime2.jsx)(
          ComboboxPopperPosition,
          {
            role: "listbox",
            id: context.contentId,
            "data-state": context.open ? "open" : "closed",
            onContextMenu: (event) => event.preventDefault(),
            ...contentProps,
            ref: composedRefs,
            style: {
              // flex layout so we can place the scroll buttons properly
              display: "flex",
              flexDirection: "column",
              // reset the outline by default as the content MAY get focused
              outline: "none",
              ...contentProps.style
            }
          }
        )
      }
    ) });
  }
);
ComboboxContentImpl.displayName = "ComboboxContentImpl";
var ComboboxPopperPosition = React.forwardRef(
  (props, forwardedRef) => {
    const { align = "start", collisionPadding = CONTENT_MARGIN$1, ...popperProps } = props;
    return (0, import_jsx_runtime2.jsx)(
      $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2,
      {
        ...popperProps,
        ref: forwardedRef,
        align,
        collisionPadding,
        style: {
          // Ensure border-box for floating-ui calculations
          boxSizing: "border-box",
          ...popperProps.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-combobox-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-combobox-content-available-width": "var(--radix-popper-available-width)",
            "--radix-combobox-content-available-height": "var(--radix-popper-available-height)",
            "--radix-combobox-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-combobox-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
ComboboxPopperPosition.displayName = "ComboboxPopperPosition";
var VIEWPORT_NAME$1 = "ComboboxViewport";
var ComboboxViewport = React.forwardRef((props, forwardedRef) => {
  const comboboxContext = useComboboxContext(VIEWPORT_NAME$1);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, comboboxContext.onViewportChange);
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    (0, import_jsx_runtime2.jsx)(
      "style",
      {
        dangerouslySetInnerHTML: {
          __html: `[data-radix-combobox-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-combobox-viewport]::-webkit-scrollbar{display:none}`
        }
      }
    ),
    (0, import_jsx_runtime2.jsx)(Collection$1.Slot, { scope: void 0, children: (0, import_jsx_runtime2.jsx)(
      $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
      {
        "data-radix-combobox-viewport": "",
        role: "presentation",
        ...props,
        ref: composedRefs,
        style: {
          // we use position: 'relative' here on the `viewport` so that when we call
          // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport
          // (independent of the scrollUpButton).
          position: "relative",
          flex: 1,
          overflow: "auto",
          ...props.style
        }
      }
    ) })
  ] });
});
ComboboxViewport.displayName = VIEWPORT_NAME$1;
var ITEM_NAME$1 = "ComboboxItem";
var [ComboboxItemProvider, useComboboxItemContext] = $c512c27ab02ef895$export$fd42f52fd3ae1109(ITEM_NAME$1);
var ComboboxItem = React.forwardRef((props, forwardedRef) => {
  const { value, disabled = false, textValue: textValueProp, ...restProps } = props;
  const [fragment, setFragment] = React.useState();
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    setFragment(new DocumentFragment());
  }, []);
  const { onTextValueChange, textValue: contextTextValue, ...context } = useComboboxContext(ITEM_NAME$1);
  const textId = $1746a345f3d73bb7$export$f680877a34711e37();
  const [textValue, setTextValue] = React.useState(textValueProp ?? "");
  const isSelected = context.value === value;
  const { startsWith, contains } = useFilter(context.locale, { sensitivity: "base" });
  const handleTextValueChange = React.useCallback((node) => {
    setTextValue((prevTextValue) => {
      return prevTextValue || ((node == null ? void 0 : node.textContent) ?? "").trim();
    });
  }, []);
  React.useEffect(() => {
    if (isSelected && contextTextValue === void 0 && textValue !== "") {
      onTextValueChange(textValue);
    }
  }, [textValue, isSelected, contextTextValue, onTextValueChange]);
  if (context.autocomplete.type === "both" && textValue && context.filterValue && !startsWith(textValue, context.filterValue) || context.autocomplete.type === "list" && context.autocomplete.filter === "startsWith" && textValue && contextTextValue && !startsWith(textValue, contextTextValue) || context.autocomplete.type === "list" && context.autocomplete.filter === "contains" && textValue && contextTextValue && !contains(textValue, contextTextValue)) {
    return fragment ? ReactDOM.createPortal(
      (0, import_jsx_runtime2.jsx)(
        ComboboxItemProvider,
        {
          textId,
          onTextValueChange: handleTextValueChange,
          isSelected,
          textValue,
          children: (0, import_jsx_runtime2.jsx)(
            Collection$1.ItemSlot,
            {
              scope: void 0,
              value,
              textValue,
              disabled,
              type: "option",
              isVisible: false,
              children: (0, import_jsx_runtime2.jsx)(ComboboxItemImpl, { ref: forwardedRef, value, disabled, ...restProps })
            }
          )
        }
      ),
      fragment
    ) : null;
  }
  return (0, import_jsx_runtime2.jsx)(
    ComboboxItemProvider,
    {
      textId,
      onTextValueChange: handleTextValueChange,
      isSelected,
      textValue,
      children: (0, import_jsx_runtime2.jsx)(
        Collection$1.ItemSlot,
        {
          scope: void 0,
          value,
          textValue,
          disabled,
          type: "option",
          isVisible: true,
          children: (0, import_jsx_runtime2.jsx)(ComboboxItemImpl, { ref: forwardedRef, value, disabled, ...restProps })
        }
      )
    }
  );
});
ComboboxItem.displayName = ITEM_NAME$1;
var ITEM_IMPL_NAME = "ComboboxItemImpl";
var ComboboxItemImpl = React.forwardRef((props, forwardedRef) => {
  const { value, disabled = false, ...restProps } = props;
  const itemRef = React.useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, itemRef);
  const { getItems } = useCollection$1(void 0);
  const { onTextValueChange, visuallyFocussedItem, ...context } = useComboboxContext(ITEM_NAME$1);
  const { isSelected, textValue, textId } = useComboboxItemContext(ITEM_IMPL_NAME);
  const handleSelect = () => {
    var _a;
    if (!disabled) {
      context.onValueChange(value);
      onTextValueChange(textValue);
      context.onOpenChange(false);
      if (context.autocomplete.type === "both") {
        context.onFilterValueChange(textValue);
      }
      (_a = context.trigger) == null ? void 0 : _a.focus({ preventScroll: true });
    }
  };
  const isFocused = React.useMemo(() => {
    var _a;
    return visuallyFocussedItem === ((_a = getItems().find((item) => item.ref.current === itemRef.current)) == null ? void 0 : _a.ref.current);
  }, [getItems, visuallyFocussedItem]);
  const id = $1746a345f3d73bb7$export$f680877a34711e37();
  return (0, import_jsx_runtime2.jsx)(
    $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
    {
      role: "option",
      "aria-labelledby": textId,
      "data-highlighted": isFocused ? "" : void 0,
      "aria-selected": isSelected && isFocused,
      "data-state": isSelected ? "checked" : "unchecked",
      "aria-disabled": disabled || void 0,
      "data-disabled": disabled ? "" : void 0,
      tabIndex: disabled ? void 0 : -1,
      ...restProps,
      id,
      ref: composedRefs,
      onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(restProps.onPointerUp, handleSelect)
    }
  );
});
ComboboxItemImpl.displayName = ITEM_IMPL_NAME;
var ITEM_TEXT_NAME$1 = "ComboboxItemText";
var ComboboxItemText = React.forwardRef((props, forwardedRef) => {
  const { className: _unusedClassName, style: _unusedStyle, ...itemTextProps } = props;
  const itemContext = useComboboxItemContext(ITEM_TEXT_NAME$1);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, itemContext.onTextValueChange);
  return (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, { id: itemContext.textId, ...itemTextProps, ref: composedRefs });
});
ComboboxItemText.displayName = ITEM_TEXT_NAME$1;
var ITEM_INDICATOR_NAME$1 = "ComboboxItemIndicator";
var ComboboxItemIndicator = React.forwardRef((props, forwardedRef) => {
  const { isSelected } = useComboboxItemContext(ITEM_INDICATOR_NAME$1);
  return isSelected ? (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, { "aria-hidden": true, ...props, ref: forwardedRef }) : null;
});
ComboboxItemIndicator.displayName = ITEM_INDICATOR_NAME$1;
var NO_VALUE_FOUND_NAME = "ComboboxNoValueFound";
var ComboboxNoValueFound = React.forwardRef((props, ref) => {
  const { textValue = "", filterValue = "", locale, autocomplete } = useComboboxContext(NO_VALUE_FOUND_NAME);
  const [items, setItems] = React.useState([]);
  const { subscribe } = useCollection$1(void 0);
  const { startsWith, contains } = useFilter(locale, { sensitivity: "base" });
  React.useEffect(() => {
    const unsub = subscribe((state) => {
      setItems(state);
    });
    return () => {
      unsub();
    };
  }, [subscribe]);
  if (autocomplete.type === "none" && items.length > 0)
    return null;
  if (autocomplete.type === "list" && autocomplete.filter === "startsWith" && items.some((item) => startsWith(item.textValue, textValue))) {
    return null;
  }
  if (autocomplete.type === "both" && items.some((item) => startsWith(item.textValue, filterValue))) {
    return null;
  }
  if (autocomplete.type === "list" && autocomplete.filter === "contains" && items.some((item) => contains(item.textValue, textValue))) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, { ...props, ref });
});
ComboboxNoValueFound.displayName = NO_VALUE_FOUND_NAME;
var ComboboxCreateItem = React.forwardRef((props, ref) => {
  const { disabled = false, ...restProps } = props;
  const context = useComboboxContext(NO_VALUE_FOUND_NAME);
  const { textValue, visuallyFocussedItem } = context;
  const { getItems, subscribe } = useCollection$1(void 0);
  const itemRef = React.useRef(null);
  const [show, setShow] = React.useState(false);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(ref, itemRef);
  const isFocused = React.useMemo(() => {
    var _a;
    return visuallyFocussedItem === ((_a = getItems().find((item) => item.ref.current === itemRef.current)) == null ? void 0 : _a.ref.current);
  }, [getItems, visuallyFocussedItem]);
  const id = $1746a345f3d73bb7$export$f680877a34711e37();
  const handleSelect = () => {
    var _a;
    if (!disabled && textValue) {
      context.onValueChange(textValue);
      context.onTextValueChange(textValue);
      context.onOpenChange(false);
      if (context.autocomplete.type === "both") {
        context.onFilterValueChange(textValue);
      }
      (_a = context.trigger) == null ? void 0 : _a.focus({ preventScroll: true });
    }
  };
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    const unsub = subscribe((state) => {
      setShow(!state.some((item) => item.textValue === textValue && item.type !== "create"));
    });
    if (getItems().length === 0) {
      setShow(true);
    }
    return () => {
      unsub();
    };
  }, [textValue, subscribe, getItems]);
  if (!textValue || !show) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)(
    Collection$1.ItemSlot,
    {
      scope: void 0,
      value: textValue ?? "",
      textValue: textValue ?? "",
      disabled,
      isVisible: true,
      type: "create",
      children: (0, import_jsx_runtime2.jsx)(
        $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
        {
          role: "option",
          tabIndex: disabled ? void 0 : -1,
          "aria-disabled": disabled || void 0,
          "data-disabled": disabled ? "" : void 0,
          "data-highlighted": isFocused ? "" : void 0,
          ...restProps,
          id,
          ref: composedRefs,
          onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(restProps.onPointerUp, handleSelect)
        }
      )
    }
  );
});
ComboboxCreateItem.displayName = "ComboboxCreateItem";
var Root$1 = Combobox;
var Trigger$1 = ComboboxTrigger;
var TextInput = ComboxboxTextInput;
var Icon$1 = ComboboxIcon;
var Portal$1 = ComboboxPortal;
var Content$1 = ComboboxContent;
var Viewport$1 = ComboboxViewport;
var Item$1 = ComboboxItem;
var ItemText$1 = ComboboxItemText;
var ItemIndicator$1 = ComboboxItemIndicator;
var NoValueFound = ComboboxNoValueFound;
var CreateItem = ComboboxCreateItem;
function findChangedIndex(a, b) {
  const length = Math.min(a.length, b.length);
  for (let i = 0; i < length; i++) {
    if (a[i] !== b[i]) {
      return i;
    }
  }
  return length;
}
var Combobox$1 = Object.freeze(Object.defineProperty({
  __proto__: null,
  ComboboxItem,
  Content: Content$1,
  CreateItem,
  Icon: Icon$1,
  Item: Item$1,
  ItemIndicator: ItemIndicator$1,
  ItemText: ItemText$1,
  NoValueFound,
  Portal: Portal$1,
  Root: Root$1,
  TextInput,
  Trigger: Trigger$1,
  Viewport: Viewport$1
}, Symbol.toStringTag, { value: "Module" }));
function useCallbackRef(callback) {
  const callbackRef = React.useRef(callback);
  React.useEffect(() => {
    callbackRef.current = callback;
  });
  return React.useMemo(() => (...args) => {
    var _a;
    return (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef, ...args);
  }, []);
}
var OPEN_KEYS = [" ", "Enter", "ArrowUp", "ArrowDown"];
var SELECTION_KEYS = [" ", "Enter"];
var SELECT_NAME = "Select";
var [Collection, useCollection, createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(SELECT_NAME);
var [createSelectContext, createSelectScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(SELECT_NAME, [
  createCollectionScope,
  $cf1ac5d9fe0e8206$export$722aac194ae923
]);
var usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
var [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);
var [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);
var Select = (props) => {
  const {
    __scopeSelect,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    value: valueProp,
    defaultValue,
    onValueChange,
    dir,
    // name,
    // autoComplete,
    disabled,
    required,
    multi = false
  } = props;
  const popperScope = usePopperScope(__scopeSelect);
  const [trigger, setTrigger] = React.useState(null);
  const [valueNode, setValueNode] = React.useState(null);
  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  const [value, setValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange(value2) {
      if (onValueChange) {
        if (Array.isArray(value2)) {
          onValueChange(value2);
        } else {
          onValueChange(value2);
        }
      }
    }
  });
  const triggerPointerDownPosRef = React.useRef(null);
  const [_nativeOptionsSet, setNativeOptionsSet] = React.useState(/* @__PURE__ */ new Set());
  return (0, import_jsx_runtime2.jsx)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, { ...popperScope, children: (0, import_jsx_runtime2.jsx)(
    SelectProvider,
    {
      required,
      scope: __scopeSelect,
      trigger,
      onTriggerChange: setTrigger,
      valueNode,
      onValueNodeChange: setValueNode,
      valueNodeHasChildren,
      onValueNodeHasChildrenChange: setValueNodeHasChildren,
      contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
      value,
      onValueChange: setValue,
      open,
      onOpenChange: setOpen,
      dir: direction,
      triggerPointerDownPosRef,
      disabled,
      multi,
      children: (0, import_jsx_runtime2.jsx)(Collection.Provider, { scope: __scopeSelect, children: (0, import_jsx_runtime2.jsx)(
        SelectNativeOptionsProvider,
        {
          scope: props.__scopeSelect,
          onNativeOptionAdd: React.useCallback((option) => {
            setNativeOptionsSet((prev) => new Set(prev).add(option));
          }, []),
          onNativeOptionRemove: React.useCallback((option) => {
            setNativeOptionsSet((prev) => {
              const optionsSet = new Set(prev);
              optionsSet.delete(option);
              return optionsSet;
            });
          }, []),
          children
        }
      ) })
    }
  ) });
};
Select.displayName = SELECT_NAME;
var TRIGGER_NAME = "SelectTrigger";
var SelectTrigger = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...triggerProps } = props;
    const popperScope = usePopperScope(__scopeSelect);
    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);
    const isDisabled = context.disabled;
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.onTriggerChange);
    const getItems = useCollection(__scopeSelect);
    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.value === context.value);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem !== void 0 && !Array.isArray(nextItem.value)) {
        const newValue = context.multi ? [nextItem.value] : nextItem.value;
        context.onValueChange(newValue);
      }
    });
    const handleOpen = () => {
      if (!isDisabled) {
        context.onOpenChange(true);
        resetTypeahead();
      }
    };
    return (0, import_jsx_runtime2.jsx)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, { asChild: true, ...popperScope, children: (0, import_jsx_runtime2.jsx)(
      $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
      {
        role: "combobox",
        "aria-controls": context.contentId,
        "aria-expanded": context.open,
        "aria-required": context.required,
        "aria-autocomplete": "none",
        dir: context.dir,
        "data-state": context.open ? "open" : "closed",
        "data-disabled": isDisabled ? "" : void 0,
        "data-placeholder": context.value === void 0 ? "" : void 0,
        tabIndex: isDisabled ? void 0 : 0,
        ...triggerProps,
        ref: composedRefs,
        onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(triggerProps.onClick, (event) => {
          event.currentTarget.focus();
        }),
        onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(triggerProps.onPointerDown, (event) => {
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId)) {
            target.releasePointerCapture(event.pointerId);
          }
          const buttonTarg = target.closest("button") ?? target.closest("div");
          if (buttonTarg !== event.currentTarget) {
            return;
          }
          if (event.button === 0 && event.ctrlKey === false) {
            handleOpen();
            context.triggerPointerDownPosRef.current = {
              x: Math.round(event.pageX),
              y: Math.round(event.pageY)
            };
            event.preventDefault();
          }
        }),
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(triggerProps.onKeyDown, (event) => {
          const isTypingAhead = searchRef.current !== "";
          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
          const target = event.target;
          const buttonTarg = target.closest("button") ?? target.closest("div");
          if (buttonTarg !== event.currentTarget) {
            return;
          }
          if (!isModifierKey && event.key.length === 1)
            handleTypeaheadSearch(event.key);
          if (isTypingAhead && event.key === " ")
            return;
          if (OPEN_KEYS.includes(event.key)) {
            handleOpen();
            event.preventDefault();
          }
        })
      }
    ) });
  }
);
SelectTrigger.displayName = TRIGGER_NAME;
var VALUE_NAME = "SelectValue";
var SelectValue = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, children, placeholder, ...valueProps } = props;
    const context = useSelectContext(VALUE_NAME, __scopeSelect);
    const { onValueNodeHasChildrenChange } = context;
    const hasChildren = children !== void 0;
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.onValueNodeChange);
    const [valuedItems, setValuedItems] = React.useState([]);
    const getItems = useCollection(__scopeSelect);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      onValueNodeHasChildrenChange(hasChildren);
    }, [onValueNodeHasChildrenChange, hasChildren]);
    React.useLayoutEffect(() => {
      if (Array.isArray(context.value) && valuedItems.length !== context.value.length) {
        const timeout = setTimeout(() => {
          const valuedItems2 = getItems().filter(
            (item) => {
              var _a;
              return !Array.isArray(item.value) ? (_a = context.value) == null ? void 0 : _a.includes(item.value) : false;
            }
          );
          setValuedItems(valuedItems2);
        });
        return () => {
          clearTimeout(timeout);
        };
      }
    }, [context.value, getItems, valuedItems]);
    let renderValue;
    if ((context.value === void 0 || context.value.length === 0) && placeholder !== void 0) {
      renderValue = (0, import_jsx_runtime2.jsx)("span", { children: placeholder });
    } else if (typeof children === "function") {
      if (Array.isArray(context.value)) {
        const childrenArray = context.value.map((value) => {
          const valueItem = valuedItems.find((item) => item.value === value);
          if (!valueItem) {
            return null;
          }
          return children({ value, textValue: valueItem == null ? void 0 : valueItem.textValue });
        });
        renderValue = childrenArray.every((child) => child === null) ? placeholder : childrenArray;
      } else {
        renderValue = children(context.value);
      }
    } else {
      renderValue = children;
    }
    return (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, { ...valueProps, ref: composedRefs, children: renderValue || null });
  }
);
SelectValue.displayName = VALUE_NAME;
var ICON_NAME = "SelectIcon";
var SelectIcon = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, children, ...iconProps } = props;
    return (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, { "aria-hidden": true, ...iconProps, ref: forwardedRef, children: children || "▼" });
  }
);
SelectIcon.displayName = ICON_NAME;
var PORTAL_NAME = "SelectPortal";
var SelectPortal = (props) => {
  return (0, import_jsx_runtime2.jsx)($f1701beae083dbae$export$602eac185826482c, { asChild: true, ...props });
};
SelectPortal.displayName = PORTAL_NAME;
var CONTENT_NAME = "SelectContent";
var SelectContent = React.forwardRef(
  (props, forwardedRef) => {
    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);
    const [fragment, setFragment] = React.useState();
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      setFragment(new DocumentFragment());
    }, []);
    if (!context.open) {
      const frag = fragment;
      return frag ? ReactDOM.createPortal(
        (0, import_jsx_runtime2.jsx)(SelectContentProvider, { scope: props.__scopeSelect, children: (0, import_jsx_runtime2.jsx)(Collection.Slot, { scope: props.__scopeSelect, children: (0, import_jsx_runtime2.jsx)("div", { children: props.children }) }) }),
        frag
      ) : null;
    }
    return (0, import_jsx_runtime2.jsx)(SelectContentImpl, { ...props, ref: forwardedRef });
  }
);
SelectContent.displayName = CONTENT_NAME;
var CONTENT_MARGIN = 10;
var [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME);
var CONTENT_IMPL_NAME = "SelectContentImpl";
var SelectContentImpl = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSelect,
      position = "item-aligned",
      onCloseAutoFocus,
      onEscapeKeyDown,
      onPointerDownOutside,
      //
      // PopperContent props
      side,
      sideOffset,
      align,
      alignOffset,
      arrowPadding,
      collisionBoundary,
      collisionPadding,
      sticky,
      hideWhenDetached,
      avoidCollisions,
      //
      ...contentProps
    } = props;
    const context = useSelectContext(CONTENT_NAME, __scopeSelect);
    const [content, setContent] = React.useState(null);
    const [viewport, setViewport] = React.useState(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setContent(node));
    const [selectedItem, setSelectedItem] = React.useState(null);
    const [selectedItemText, setSelectedItemText] = React.useState(null);
    const getItems = useCollection(__scopeSelect);
    const [isPositioned, setIsPositioned] = React.useState(false);
    const firstValidItemFoundRef = React.useRef(false);
    React.useEffect(() => {
      if (content)
        return hideOthers(content);
    }, [content]);
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    const focusFirst = React.useCallback(
      (candidates) => {
        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);
        const [lastItem] = restItems.slice(-1);
        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
        for (const candidate of candidates) {
          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
            return;
          candidate == null ? void 0 : candidate.scrollIntoView({ block: "nearest" });
          if (candidate === firstItem && viewport)
            viewport.scrollTop = 0;
          if (candidate === lastItem && viewport)
            viewport.scrollTop = viewport.scrollHeight;
          candidate == null ? void 0 : candidate.focus();
          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
            return;
        }
      },
      [getItems, viewport]
    );
    const focusSelectedItem = React.useCallback(
      () => focusFirst([selectedItem, content]),
      [focusFirst, selectedItem, content]
    );
    React.useEffect(() => {
      if (isPositioned) {
        focusSelectedItem();
      }
    }, [isPositioned, focusSelectedItem]);
    const { onOpenChange, triggerPointerDownPosRef } = context;
    React.useEffect(() => {
      if (content) {
        let pointerMoveDelta = { x: 0, y: 0 };
        const handlePointerMove = (event) => {
          var _a, _b;
          pointerMoveDelta = {
            x: Math.abs(Math.round(event.pageX) - (((_a = triggerPointerDownPosRef.current) == null ? void 0 : _a.x) ?? 0)),
            y: Math.abs(Math.round(event.pageY) - (((_b = triggerPointerDownPosRef.current) == null ? void 0 : _b.y) ?? 0))
          };
        };
        const handlePointerUp = (event) => {
          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {
            event.preventDefault();
          } else if (!content.contains(event.target)) {
            onOpenChange(false);
          }
          document.removeEventListener("pointermove", handlePointerMove);
          triggerPointerDownPosRef.current = null;
        };
        if (triggerPointerDownPosRef.current !== null) {
          document.addEventListener("pointermove", handlePointerMove);
          document.addEventListener("pointerup", handlePointerUp, { capture: true, once: true });
        }
        return () => {
          document.removeEventListener("pointermove", handlePointerMove);
          document.removeEventListener("pointerup", handlePointerUp, { capture: true });
        };
      }
    }, [content, onOpenChange, triggerPointerDownPosRef]);
    React.useEffect(() => {
      const close = () => onOpenChange(false);
      window.addEventListener("blur", close);
      window.addEventListener("resize", close);
      return () => {
        window.removeEventListener("blur", close);
        window.removeEventListener("resize", close);
      };
    }, [onOpenChange]);
    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem) {
        setTimeout(() => nextItem.ref.current.focus());
      }
    });
    const itemRefCallback = React.useCallback(
      (node, value, disabled) => {
        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
        const isSelectedItem = context.value !== void 0 && context.value === value;
        if (isSelectedItem || isFirstValidItem) {
          setSelectedItem(node);
          if (isFirstValidItem)
            firstValidItemFoundRef.current = true;
        }
      },
      [context.value]
    );
    const handleItemLeave = React.useCallback(() => content == null ? void 0 : content.focus(), [content]);
    const itemTextRefCallback = React.useCallback(
      (node, value, disabled) => {
        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
        const isSelectedItem = context.value !== void 0 && (Array.isArray(value) ? value.every((v) => {
          var _a;
          return (_a = context.value) == null ? void 0 : _a.includes(v);
        }) : context.value === value);
        if (isSelectedItem || isFirstValidItem) {
          setSelectedItemText(node);
        }
      },
      [context.value]
    );
    const SelectPosition = position === "popper" ? SelectPopperPosition : SelectItemAlignedPosition;
    const popperContentProps = SelectPosition === SelectPopperPosition ? {
      side,
      sideOffset,
      align,
      alignOffset,
      arrowPadding,
      collisionBoundary,
      collisionPadding,
      sticky,
      hideWhenDetached,
      avoidCollisions
    } : {};
    return (0, import_jsx_runtime2.jsx)(
      SelectContentProvider,
      {
        scope: __scopeSelect,
        content,
        viewport,
        onViewportChange: setViewport,
        itemRefCallback,
        selectedItem,
        onItemLeave: handleItemLeave,
        itemTextRefCallback,
        focusSelectedItem,
        selectedItemText,
        position,
        isPositioned,
        searchRef,
        children: (0, import_jsx_runtime2.jsx)(Combination_default, { as: $5e63c961fc1ce211$export$8c6ed5c666ac1360, allowPinchZoom: true, children: (0, import_jsx_runtime2.jsx)(
          $d3863c46a17e8a28$export$20e40289641fbbb6,
          {
            asChild: true,
            trapped: context.open,
            onMountAutoFocus: (event) => {
              event.preventDefault();
            },
            onUnmountAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onCloseAutoFocus, (event) => {
              var _a, _b;
              (_a = context.trigger) == null ? void 0 : _a.focus({ preventScroll: true });
              (_b = document.getSelection()) == null ? void 0 : _b.empty();
              event.preventDefault();
            }),
            children: (0, import_jsx_runtime2.jsx)(
              $5cb92bef7577960e$export$177fb62ff3ec1f22,
              {
                asChild: true,
                disableOutsidePointerEvents: true,
                onEscapeKeyDown,
                onPointerDownOutside,
                onFocusOutside: (event) => event.preventDefault(),
                onDismiss: () => context.onOpenChange(false),
                children: (0, import_jsx_runtime2.jsx)(
                  SelectPosition,
                  {
                    role: "listbox",
                    id: context.contentId,
                    "data-state": context.open ? "open" : "closed",
                    "aria-multiselectable": context.multi ? "true" : void 0,
                    dir: context.dir,
                    onContextMenu: (event) => event.preventDefault(),
                    ...contentProps,
                    ...popperContentProps,
                    onPlaced: () => setIsPositioned(true),
                    ref: composedRefs,
                    style: {
                      // flex layout so we can place the scroll buttons properly
                      display: "flex",
                      flexDirection: "column",
                      // reset the outline by default as the content MAY get focused
                      outline: "none",
                      ...contentProps.style
                    },
                    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(contentProps.onKeyDown, (event) => {
                      const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                      if (event.key === "Tab")
                        event.preventDefault();
                      if (!isModifierKey && event.key.length === 1)
                        handleTypeaheadSearch(event.key);
                      if (["ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
                        const items = getItems().filter((item) => !item.disabled);
                        let candidateNodes = items.map((item) => item.ref.current);
                        if (["ArrowUp", "End"].includes(event.key)) {
                          candidateNodes = candidateNodes.slice().reverse();
                        }
                        if (["ArrowUp", "ArrowDown"].includes(event.key)) {
                          const currentElement = event.target;
                          const currentIndex = candidateNodes.indexOf(currentElement);
                          candidateNodes = candidateNodes.slice(currentIndex + 1);
                        }
                        setTimeout(() => focusFirst(candidateNodes));
                        event.preventDefault();
                      }
                    })
                  }
                )
              }
            )
          }
        ) })
      }
    );
  }
);
SelectContentImpl.displayName = CONTENT_IMPL_NAME;
var ITEM_ALIGNED_POSITION_NAME = "SelectItemAlignedPosition";
var SelectItemAlignedPosition = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, onPlaced, ...popperProps } = props;
    const context = useSelectContext(CONTENT_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);
    const [contentWrapper, setContentWrapper] = React.useState(null);
    const [content, setContent] = React.useState(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setContent(node));
    const getItems = useCollection(__scopeSelect);
    const shouldExpandOnScrollRef = React.useRef(false);
    const shouldRepositionRef = React.useRef(true);
    const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;
    const position = React.useCallback(() => {
      if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {
        const triggerRect = context.trigger.getBoundingClientRect();
        const contentRect = content.getBoundingClientRect();
        const valueNodeRect = context.valueNode.getBoundingClientRect();
        const itemTextRect = selectedItemText.getBoundingClientRect();
        if (context.dir !== "rtl") {
          const itemTextOffset = itemTextRect.left - contentRect.left;
          const left = valueNodeRect.left - itemTextOffset;
          const leftDelta = triggerRect.left - left;
          const minContentWidth = triggerRect.width + leftDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const rightEdge = window.innerWidth - CONTENT_MARGIN;
          const clampedLeft = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(left, [CONTENT_MARGIN, rightEdge - contentWidth]);
          contentWrapper.style.minWidth = `${minContentWidth}px`;
          contentWrapper.style.left = `${clampedLeft}px`;
        } else {
          const itemTextOffset = contentRect.right - itemTextRect.right;
          const right = window.innerWidth - valueNodeRect.right - itemTextOffset;
          const rightDelta = window.innerWidth - triggerRect.right - right;
          const minContentWidth = triggerRect.width + rightDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const leftEdge = window.innerWidth - CONTENT_MARGIN;
          const clampedRight = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(right, [CONTENT_MARGIN, leftEdge - contentWidth]);
          contentWrapper.style.minWidth = `${minContentWidth}px`;
          contentWrapper.style.right = `${clampedRight}px`;
        }
        const items = getItems();
        const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
        const itemsHeight = viewport.scrollHeight;
        const contentStyles = window.getComputedStyle(content);
        const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);
        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);
        const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);
        const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);
        const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;
        const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);
        const viewportStyles = window.getComputedStyle(viewport);
        const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);
        const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);
        const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;
        const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;
        const selectedItemHalfHeight = selectedItem.offsetHeight / 2;
        const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;
        const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;
        const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;
        const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;
        if (willAlignWithoutTopOverflow) {
          const isLastItem = selectedItem === items[items.length - 1].ref.current;
          contentWrapper.style.bottom = `${0}px`;
          const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;
          const clampedTriggerMiddleToBottomEdge = Math.max(
            triggerMiddleToBottomEdge,
            selectedItemHalfHeight + // viewport might have padding bottom, include it to avoid a scrollable viewport
            (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth
          );
          const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;
          contentWrapper.style.height = `${height}px`;
        } else {
          const isFirstItem = selectedItem === items[0].ref.current;
          contentWrapper.style.top = `${0}px`;
          const clampedTopEdgeToTriggerMiddle = Math.max(
            topEdgeToTriggerMiddle,
            contentBorderTopWidth + viewport.offsetTop + // viewport might have padding top, include it to avoid a scrollable viewport
            (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight
          );
          const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;
          contentWrapper.style.height = `${height}px`;
          viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;
        }
        contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;
        contentWrapper.style.minHeight = `${minContentHeight}px`;
        contentWrapper.style.maxHeight = `${availableHeight}px`;
        onPlaced == null ? void 0 : onPlaced();
        requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);
      }
    }, [
      getItems,
      context.trigger,
      context.valueNode,
      contentWrapper,
      content,
      viewport,
      selectedItem,
      selectedItemText,
      context.dir,
      onPlaced
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => position(), [position]);
    const [contentZIndex, setContentZIndex] = React.useState();
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (content)
        setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [content]);
    const handleScrollButtonChange = React.useCallback(
      (node) => {
        if (node && shouldRepositionRef.current === true) {
          position();
          focusSelectedItem == null ? void 0 : focusSelectedItem();
          shouldRepositionRef.current = false;
        }
      },
      [position, focusSelectedItem]
    );
    return (0, import_jsx_runtime2.jsx)(
      SelectViewportProvider,
      {
        scope: __scopeSelect,
        contentWrapper,
        shouldExpandOnScrollRef,
        onScrollButtonChange: handleScrollButtonChange,
        children: (0, import_jsx_runtime2.jsx)(
          "div",
          {
            ref: setContentWrapper,
            style: {
              display: "flex",
              flexDirection: "column",
              position: "fixed",
              zIndex: contentZIndex
            },
            children: (0, import_jsx_runtime2.jsx)(
              $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
              {
                ...popperProps,
                ref: composedRefs,
                style: {
                  // When we get the height of the content, it includes borders. If we were to set
                  // the height without having `boxSizing: 'border-box'` it would be too big.
                  boxSizing: "border-box",
                  // We need to ensure the content doesn't get taller than the wrapper
                  maxHeight: "100%",
                  ...popperProps.style
                }
              }
            )
          }
        )
      }
    );
  }
);
SelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;
var POPPER_POSITION_NAME = "SelectPopperPosition";
var SelectPopperPosition = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, align = "start", collisionPadding = CONTENT_MARGIN, ...popperProps } = props;
    const popperScope = usePopperScope(__scopeSelect);
    return (0, import_jsx_runtime2.jsx)(
      $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2,
      {
        ...popperScope,
        ...popperProps,
        ref: forwardedRef,
        align,
        collisionPadding,
        style: {
          // Ensure border-box for floating-ui calculations
          boxSizing: "border-box",
          ...popperProps.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-select-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-select-content-available-width": "var(--radix-popper-available-width)",
            "--radix-select-content-available-height": "var(--radix-popper-available-height)",
            "--radix-select-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-select-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
SelectPopperPosition.displayName = POPPER_POSITION_NAME;
var [SelectViewportProvider, useSelectViewportContext] = createSelectContext(
  CONTENT_NAME,
  {}
);
var VIEWPORT_NAME = "SelectViewport";
var SelectViewport = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...viewportProps } = props;
    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);
    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentContext.onViewportChange);
    const prevScrollTopRef = React.useRef(0);
    return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      (0, import_jsx_runtime2.jsx)(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`
          }
        }
      ),
      (0, import_jsx_runtime2.jsx)(Collection.Slot, { scope: __scopeSelect, children: (0, import_jsx_runtime2.jsx)(
        $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
        {
          "data-radix-select-viewport": "",
          role: "presentation",
          ...viewportProps,
          ref: composedRefs,
          style: {
            // we use position: 'relative' here on the `viewport` so that when we call
            // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport
            // (independent of the scrollUpButton).
            position: "relative",
            flex: 1,
            overflow: "auto",
            ...viewportProps.style
          },
          onScroll: $e42e1063c40fb3ef$export$b9ecd428b558ff10(viewportProps.onScroll, (event) => {
            const viewport = event.currentTarget;
            const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;
            if ((shouldExpandOnScrollRef == null ? void 0 : shouldExpandOnScrollRef.current) && contentWrapper) {
              const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);
              if (scrolledBy > 0) {
                const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
                const cssMinHeight = parseFloat(contentWrapper.style.minHeight);
                const cssHeight = parseFloat(contentWrapper.style.height);
                const prevHeight = Math.max(cssMinHeight, cssHeight);
                if (prevHeight < availableHeight) {
                  const nextHeight = prevHeight + scrolledBy;
                  const clampedNextHeight = Math.min(availableHeight, nextHeight);
                  const heightDiff = nextHeight - clampedNextHeight;
                  contentWrapper.style.height = `${clampedNextHeight}px`;
                  if (contentWrapper.style.bottom === "0px") {
                    viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;
                    contentWrapper.style.justifyContent = "flex-end";
                  }
                }
              }
            }
            prevScrollTopRef.current = viewport.scrollTop;
          })
        }
      ) })
    ] });
  }
);
SelectViewport.displayName = VIEWPORT_NAME;
var GROUP_NAME = "SelectGroup";
var [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);
var SelectGroup = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...groupProps } = props;
    const groupId = $1746a345f3d73bb7$export$f680877a34711e37();
    return (0, import_jsx_runtime2.jsx)(SelectGroupContextProvider, { scope: __scopeSelect, id: groupId, children: (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, { role: "group", "aria-labelledby": groupId, ...groupProps, ref: forwardedRef }) });
  }
);
SelectGroup.displayName = GROUP_NAME;
var LABEL_NAME = "SelectLabel";
var SelectLabel = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...labelProps } = props;
    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
    return (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, { id: groupContext.id, ...labelProps, ref: forwardedRef });
  }
);
SelectLabel.displayName = LABEL_NAME;
var ITEM_NAME = "SelectItem";
var [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME);
var SelectItem = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, value, disabled = false, textValue: textValueProp, ...itemProps } = props;
    const context = useSelectContext(ITEM_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);
    const isSelected = typeof value === "string" ? Array.isArray(context.value) ? context.value.includes(value) : context.value === value : value.every((v) => {
      var _a;
      return (_a = context.value) == null ? void 0 : _a.includes(v);
    });
    const isIntermediate = Array.isArray(context.value) && Array.isArray(value) && value.some((v) => {
      var _a;
      return (_a = context.value) == null ? void 0 : _a.includes(v);
    });
    const [textValue, setTextValue] = React.useState(textValueProp ?? "");
    const [isFocused, setIsFocused] = React.useState(false);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => {
        var _a;
        return (_a = contentContext.itemRefCallback) == null ? void 0 : _a.call(contentContext, node, value, disabled);
      }
    );
    const textId = $1746a345f3d73bb7$export$f680877a34711e37();
    const handleSelect = () => {
      if (!disabled) {
        let newValue = context.multi && typeof value === "string" ? [value] : value;
        if (isIntermediate && !isSelected) {
          context.onValueChange(newValue);
        } else if (Array.isArray(context.value)) {
          newValue = toggleArrayValue(value, context.value);
        }
        context.onValueChange(newValue);
        if (!context.multi) {
          context.onOpenChange(false);
        }
      }
    };
    if (!context.multi && Array.isArray(value)) {
      throw new Error("You can only pass an array of values in multi selects");
    }
    return (0, import_jsx_runtime2.jsx)(
      SelectItemContextProvider,
      {
        scope: __scopeSelect,
        value,
        disabled,
        textId,
        isSelected,
        isIntermediate,
        onItemTextChange: React.useCallback((node) => {
          setTextValue((prevTextValue) => prevTextValue || ((node == null ? void 0 : node.textContent) ?? "").trim());
        }, []),
        children: (0, import_jsx_runtime2.jsx)(Collection.ItemSlot, { scope: __scopeSelect, value, disabled, textValue, children: (0, import_jsx_runtime2.jsx)(
          $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
          {
            role: "option",
            "aria-labelledby": textId,
            "data-highlighted": isFocused ? "" : void 0,
            "aria-selected": !context.multi ? isSelected && isFocused : void 0,
            "aria-checked": context.multi ? isSelected : void 0,
            "data-state": isSelected ? "checked" : "unchecked",
            "aria-disabled": disabled || void 0,
            "data-disabled": disabled ? "" : void 0,
            tabIndex: disabled ? void 0 : -1,
            ...itemProps,
            ref: composedRefs,
            onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onFocus, () => setIsFocused(true)),
            onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onBlur, () => setIsFocused(false)),
            onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onPointerUp, handleSelect),
            onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onPointerMove, (event) => {
              var _a;
              if (disabled) {
                (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
              } else {
                event.currentTarget.focus({ preventScroll: true });
              }
            }),
            onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onPointerLeave, (event) => {
              var _a;
              if (event.currentTarget === document.activeElement) {
                (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
              }
            }),
            onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(itemProps.onKeyDown, (event) => {
              var _a;
              const isTypingAhead = ((_a = contentContext.searchRef) == null ? void 0 : _a.current) !== "";
              if (isTypingAhead && event.key === " ")
                return;
              if (SELECTION_KEYS.includes(event.key))
                handleSelect();
              if (event.key === " ")
                event.preventDefault();
            })
          }
        ) })
      }
    );
  }
);
SelectItem.displayName = ITEM_NAME;
var ITEM_TEXT_NAME = "SelectItemText";
var SelectItemText = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, className: _className, style: _style, ...itemTextProps } = props;
    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);
    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);
    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);
    const [itemTextNode, setItemTextNode] = React.useState(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setItemTextNode(node),
      itemContext.onItemTextChange,
      (node) => {
        var _a;
        return (_a = contentContext.itemTextRefCallback) == null ? void 0 : _a.call(contentContext, node, itemContext.value, itemContext.disabled);
      }
    );
    const textContent = itemTextNode == null ? void 0 : itemTextNode.textContent;
    const nativeOption = React.useMemo(
      () => (0, import_jsx_runtime2.jsx)(
        "option",
        {
          value: itemContext.value,
          disabled: itemContext.disabled,
          children: textContent
        },
        Array.isArray(itemContext.value) ? itemContext.value.join(";") : itemContext.value
      ),
      [itemContext.disabled, itemContext.value, textContent]
    );
    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      onNativeOptionAdd(nativeOption);
      return () => onNativeOptionRemove(nativeOption);
    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);
    return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, { id: itemContext.textId, ...itemTextProps, ref: composedRefs }),
      itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? ReactDOM.createPortal(itemTextProps.children, context.valueNode) : null
    ] });
  }
);
SelectItemText.displayName = ITEM_TEXT_NAME;
var ITEM_INDICATOR_NAME = "SelectItemIndicator";
var SelectItemIndicator = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, children, ...itemIndicatorProps } = props;
    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
    if (typeof children === "function") {
      return (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, { "aria-hidden": true, ...itemIndicatorProps, ref: forwardedRef, children: children({
        isSelected: itemContext.isSelected,
        isIntermediate: itemContext.isIntermediate
      }) });
    }
    return itemContext.isSelected ? (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, { "aria-hidden": true, ...itemIndicatorProps, ref: forwardedRef, children }) : null;
  }
);
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
var SelectScrollUpButton = React.forwardRef(
  (props, forwardedRef) => {
    const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
    const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
    const [canScrollUp, setCanScrollUp] = React.useState(false);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, viewportContext.onScrollButtonChange);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        const viewport = contentContext.viewport;
        const handleScroll = () => {
          const canScrollUp2 = viewport.scrollTop > 0;
          setCanScrollUp(canScrollUp2);
        };
        handleScroll();
        viewport.addEventListener("scroll", handleScroll);
        return () => viewport.removeEventListener("scroll", handleScroll);
      }
    }, [contentContext.viewport, contentContext.isPositioned]);
    return canScrollUp ? (0, import_jsx_runtime2.jsx)(
      SelectScrollButtonImpl,
      {
        ...props,
        ref: composedRefs,
        onAutoScroll: () => {
          const { viewport, selectedItem } = contentContext;
          if (viewport && selectedItem) {
            viewport.scrollTop -= selectedItem.offsetHeight;
          }
        }
      }
    ) : null;
  }
);
SelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;
var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
var SelectScrollDownButton = React.forwardRef(
  (props, forwardedRef) => {
    const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
    const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
    const [canScrollDown, setCanScrollDown] = React.useState(false);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, viewportContext.onScrollButtonChange);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        const viewport = contentContext.viewport;
        const handleScroll = () => {
          const maxScroll = viewport.scrollHeight - viewport.clientHeight;
          const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;
          setCanScrollDown(canScrollDown2);
        };
        handleScroll();
        viewport.addEventListener("scroll", handleScroll);
        return () => viewport.removeEventListener("scroll", handleScroll);
      }
    }, [contentContext.viewport, contentContext.isPositioned]);
    return canScrollDown ? (0, import_jsx_runtime2.jsx)(
      SelectScrollButtonImpl,
      {
        ...props,
        ref: composedRefs,
        onAutoScroll: () => {
          const { viewport, selectedItem } = contentContext;
          if (viewport && selectedItem) {
            viewport.scrollTop += selectedItem.offsetHeight;
          }
        }
      }
    ) : null;
  }
);
SelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;
var SelectScrollButtonImpl = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;
    const contentContext = useSelectContentContext("SelectScrollButton", __scopeSelect);
    const autoScrollTimerRef = React.useRef(null);
    const getItems = useCollection(__scopeSelect);
    const clearAutoScrollTimer = React.useCallback(() => {
      if (autoScrollTimerRef.current !== null) {
        window.clearInterval(autoScrollTimerRef.current);
        autoScrollTimerRef.current = null;
      }
    }, []);
    React.useEffect(() => {
      return () => clearAutoScrollTimer();
    }, [clearAutoScrollTimer]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      var _a;
      const activeItem = getItems().find((item) => item.ref.current === document.activeElement);
      (_a = activeItem == null ? void 0 : activeItem.ref.current) == null ? void 0 : _a.scrollIntoView({ block: "nearest" });
    }, [getItems]);
    return (0, import_jsx_runtime2.jsx)(
      $8927f6f2acc4f386$export$250ffa63cdc0d034.div,
      {
        "aria-hidden": true,
        ...scrollIndicatorProps,
        ref: forwardedRef,
        style: { flexShrink: 0, ...scrollIndicatorProps.style },
        onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(scrollIndicatorProps.onPointerMove, () => {
          var _a;
          (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
          if (autoScrollTimerRef.current === null) {
            autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
          }
        }),
        onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(scrollIndicatorProps.onPointerLeave, () => {
          clearAutoScrollTimer();
        })
      }
    );
  }
);
SelectScrollButtonImpl.displayName = "SelectScrollButtonImpl";
var SEPARATOR_NAME = "SelectSeparator";
var SelectSeparator = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...separatorProps } = props;
    return (0, import_jsx_runtime2.jsx)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, { "aria-hidden": true, ...separatorProps, ref: forwardedRef });
  }
);
SelectSeparator.displayName = SEPARATOR_NAME;
var ARROW_NAME = "SelectArrow";
var SelectArrow = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopeSelect);
    const context = useSelectContext(ARROW_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);
    return context.open && contentContext.position === "popper" ? (0, import_jsx_runtime2.jsx)($cf1ac5d9fe0e8206$export$21b07c8f274aebd5, { ...popperScope, ...arrowProps, ref: forwardedRef }) : null;
  }
);
SelectArrow.displayName = ARROW_NAME;
var BUBBLE_SELECT_NAME = "BubbleSelect";
var BubbleSelect = React.forwardRef(
  (props, forwardedRef) => {
    const { value, ...selectProps } = props;
    const ref = React.useRef(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const prevValue = $010c2913dbd2fe3d$export$5cae361ad82dce8b(value);
    const context = useSelectContext(BUBBLE_SELECT_NAME, void 0);
    React.useEffect(() => {
      const select = ref.current;
      const selectProto = window.HTMLSelectElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(selectProto, "value");
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("change", { bubbles: true });
        setValue.call(select, value);
        select.dispatchEvent(event);
      }
    }, [prevValue, value]);
    let defaultValue = value;
    if (context.multi && !Array.isArray(value)) {
      defaultValue = [];
    }
    return (0, import_jsx_runtime2.jsx)($ea1ef594cf570d83$export$439d29a4e110a164, { asChild: true, children: (0, import_jsx_runtime2.jsx)(
      "select",
      {
        ...selectProps,
        multiple: context.multi ? true : void 0,
        ref: composedRefs,
        defaultValue
      }
    ) });
  }
);
BubbleSelect.displayName = "BubbleSelect";
function useTypeaheadSearch(onSearchChange) {
  const handleSearchChange = useCallbackRef(onSearchChange);
  const searchRef = React.useRef("");
  const timerRef = React.useRef(0);
  const handleTypeaheadSearch = React.useCallback(
    (key) => {
      const search = searchRef.current + key;
      handleSearchChange(search);
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "")
          timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
      })(search);
    },
    [handleSearchChange]
  );
  const resetTypeahead = React.useCallback(() => {
    searchRef.current = "";
    window.clearTimeout(timerRef.current);
  }, []);
  React.useEffect(() => {
    return () => window.clearTimeout(timerRef.current);
  }, []);
  return [searchRef, handleTypeaheadSearch, resetTypeahead];
}
function findNextItem(items, search, currentItem) {
  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;
  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));
  const excludeCurrentItem = normalizedSearch.length === 1;
  if (excludeCurrentItem)
    wrappedItems = wrappedItems.filter((v) => v !== currentItem);
  const nextItem = wrappedItems.find((item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase()));
  return nextItem !== currentItem ? nextItem : void 0;
}
function wrapArray(array, startIndex) {
  return array.map((_, index2) => array[(startIndex + index2) % array.length]);
}
var toggleArrayValue = (value, array = []) => {
  if (Array.isArray(value)) {
    return value.reduce((acc, val) => toggleArrayValue(val, acc), array);
  }
  const index2 = array.indexOf(value);
  if (index2 === -1) {
    return [...array, value];
  }
  return [...array.slice(0, index2), ...array.slice(index2 + 1)];
};
var Root = Select;
var Trigger = SelectTrigger;
var Value = SelectValue;
var Icon = SelectIcon;
var Portal = SelectPortal;
var Content = SelectContent;
var Viewport = SelectViewport;
var Group = SelectGroup;
var Label = SelectLabel;
var Item = SelectItem;
var ItemText = SelectItemText;
var ItemIndicator = SelectItemIndicator;
var ScrollUpButton = SelectScrollUpButton;
var ScrollDownButton = SelectScrollDownButton;
var Separator = SelectSeparator;
var Arrow = SelectArrow;
var Select$1 = Object.freeze(Object.defineProperty({
  __proto__: null,
  Arrow,
  Content,
  Group,
  Icon,
  Item,
  ItemIndicator,
  ItemText,
  Label,
  Portal,
  Root,
  ScrollDownButton,
  ScrollUpButton,
  Select,
  SelectArrow,
  SelectContent,
  SelectGroup,
  SelectIcon,
  SelectItem,
  SelectItemIndicator,
  SelectItemText,
  SelectLabel,
  SelectPortal,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
  SelectViewport,
  Separator,
  Trigger,
  Value,
  Viewport,
  createSelectScope
}, Symbol.toStringTag, { value: "Module" }));
function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler == null ? void 0 : originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) {
      return ourEventHandler == null ? void 0 : ourEventHandler(event);
    }
  };
}

// node_modules/@strapi/content-type-builder/node_modules/@strapi/design-system/dist/index.mjs
var React2 = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var import_lodash = __toESM(require_lodash(), 1);
var createContext2 = (rootComponentName, defaultContext) => {
  const Context = React2.createContext(defaultContext);
  const Provider2 = (props) => {
    const { children, ...context } = props;
    const value = React2.useMemo(() => context, Object.values(context));
    return (0, import_jsx_runtime3.jsx)(Context.Provider, { value, children });
  };
  function useContext3(consumerName) {
    const context = React2.useContext(Context);
    if (context)
      return context;
    if (defaultContext !== void 0)
      return defaultContext;
    throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
  }
  Provider2.displayName = `${rootComponentName}Provider`;
  return [Provider2, useContext3];
};
function isKeyOf(o, s) {
  if (typeof o === "string") {
    return false;
  }
  return s in o;
}
function extractStyleFromTheme(themeSection, key, defaultValue) {
  if (themeSection && key && isKeyOf(themeSection, key)) {
    return themeSection[key];
  }
  return defaultValue;
}
var mappedCSSProps = {
  padding: ["padding-block-start", "padding-inline-end", "padding-block-end", "padding-inline-start"],
  paddingTop: "padding-block-start",
  paddingRight: "padding-inline-end",
  paddingBottom: "padding-block-end",
  paddingLeft: "padding-inline-start",
  margin: ["margin-block-start", "margin-inline-end", "margin-block-end", "margin-inline-start"],
  marginLeft: "margin-inline-start",
  marginRight: "margin-inline-end",
  marginTop: "margin-block-start",
  marginBottom: "margin-block-end",
  borderRadius: "border-radius",
  borderStyle: "border-style",
  borderWidth: "border-width",
  borderColor: "border-color",
  fontSize: "font-size",
  fontWeight: "font-weight",
  lineHeight: "line-height",
  zIndex: "z-index",
  boxShadow: "box-shadow",
  pointerEvents: "pointer-events",
  textAlign: "text-align",
  textTransform: "text-transform",
  textDecoration: "text-decoration",
  flexGrow: "flex-grow",
  flexShrink: "flex-shrink",
  flexBasis: "flex-basis",
  minWidth: "min-width",
  maxWidth: "max-width",
  minHeight: "min-height",
  maxHeight: "max-height",
  flexDirection: "flex-direction",
  flexWrap: "flex-wrap",
  justifyContent: "justify-content",
  alignItems: "align-items"
};
var fillCssValues = (value) => {
  const [top, right, bottom, left] = value;
  const rightValue = right ?? top;
  const bottomValue = bottom ?? top;
  const leftValue = left ?? rightValue;
  return [top, rightValue, bottomValue, leftValue];
};
function getThemeSection(key, theme) {
  switch (key) {
    case "gap":
    case "padding":
    case "margin":
    case "paddingTop":
    case "paddingLeft":
    case "paddingRight":
    case "paddingBottom":
    case "marginTop":
    case "marginLeft":
    case "marginRight":
    case "marginBottom":
    case "left":
    case "right":
    case "top":
    case "bottom":
    case "width":
    case "maxWidth":
    case "minWidth":
    case "height":
    case "maxHeight":
    case "minHeight":
    case "borderRadius":
    case "borderWidth":
      return theme.spaces;
    case "color":
    case "background":
    case "borderColor":
      return theme.colors;
    case "fontSize":
      return theme.fontSizes;
    case "fontWeight":
      return theme.fontWeights;
    case "lineHeight":
      return theme.lineHeights;
    case "zIndex":
      return theme.zIndices;
    case "boxShadow":
      return theme.shadows;
    default:
      return null;
  }
}
var handleResponsiveValues = (values, theme) => {
  const stylesByBreakpoint = Object.entries(values).reduce(
    (acc, curr) => {
      const [key, value] = curr;
      const themeSection = getThemeSection(key, theme);
      const cssProperty = Object.prototype.hasOwnProperty.call(mappedCSSProps, key) ? mappedCSSProps[key] : key;
      if (cssProperty && (value || value === 0)) {
        if (typeof value === "object" && !Array.isArray(value)) {
          Object.entries(value).forEach(([breakpointName, breakpointValue]) => {
            acc[breakpointName] = {
              ...acc[breakpointName],
              ...convertCssPropertiesToCssValues(cssProperty, breakpointValue, themeSection)
            };
          });
        } else {
          acc.initial = {
            ...acc.initial,
            ...convertCssPropertiesToCssValues(cssProperty, value, themeSection)
          };
        }
      }
      return acc;
    },
    {
      initial: {},
      small: {},
      medium: {},
      large: {}
    }
  );
  return Object.entries(stylesByBreakpoint).reduce((acc, [key, value]) => {
    if (value && Object.keys(value).length > 0) {
      const breakpointStyles = Object.entries(value).reduce((arr, [property, value2]) => {
        arr.push(`${property}: ${value2};`);
        return arr;
      }, []).join("\n");
      if (key === "initial") {
        acc.push(breakpointStyles);
      } else {
        acc.push(`${theme.breakpoints[key]}{ ${breakpointStyles} }`);
      }
    }
    return acc;
  }, []).join("\n");
};
var convertCssPropertiesToCssValues = (property, value, themeSection) => {
  if (Array.isArray(property) && Array.isArray(value)) {
    const shorthandValues = fillCssValues(value);
    return property.reduce((acc, prop, index2) => {
      acc[prop] = extractStyleFromTheme(themeSection, shorthandValues[index2], shorthandValues[index2]);
      return acc;
    }, {});
  } else if (Array.isArray(property) && !Array.isArray(value)) {
    return property.reduce((acc, prop) => {
      acc[prop] = extractStyleFromTheme(themeSection, value, value);
      return acc;
    }, {});
  } else if (!Array.isArray(property) && !Array.isArray(value)) {
    return {
      [property]: extractStyleFromTheme(themeSection, value, value)
    };
  } else {
    console.warn(
      "You've passed an array of values to a property that does not support it. Please check the property and value you're passing."
    );
    return {};
  }
};
var forwardRef4 = React2.forwardRef;
var Box = forwardRef4((props, ref) => {
  const {
    background,
    basis,
    borderColor,
    color,
    flex,
    fontSize,
    grow,
    hasRadius,
    padding,
    paddingBottom,
    paddingLeft,
    paddingRight,
    paddingTop,
    margin,
    marginLeft,
    marginBottom,
    marginRight,
    marginTop,
    shadow,
    shrink,
    lineHeight,
    fontWeight,
    width,
    minWidth,
    maxWidth,
    height,
    minHeight,
    maxHeight,
    top,
    left,
    bottom,
    right,
    borderRadius,
    borderStyle,
    borderWidth,
    tag,
    pointerEvents,
    display,
    position,
    zIndex,
    overflow,
    cursor,
    transition,
    transform,
    animation,
    textAlign,
    textTransform,
    ...rest
  } = props;
  const AsComponent = tag || "div";
  const mappedProps = {
    $background: background,
    $basis: basis,
    $borderColor: borderColor,
    $color: color,
    $flex: flex,
    $fontSize: fontSize,
    $grow: grow,
    $hasRadius: hasRadius,
    $padding: padding,
    $paddingBottom: paddingBottom,
    $paddingLeft: paddingLeft,
    $paddingRight: paddingRight,
    $paddingTop: paddingTop,
    $margin: margin,
    $marginLeft: marginLeft,
    $marginBottom: marginBottom,
    $marginRight: marginRight,
    $marginTop: marginTop,
    $shadow: shadow,
    $shrink: shrink,
    $lineHeight: lineHeight,
    $fontWeight: fontWeight,
    $width: width,
    $minWidth: minWidth,
    $maxWidth: maxWidth,
    $height: height,
    $minHeight: minHeight,
    $maxHeight: maxHeight,
    $top: top,
    $left: left,
    $bottom: bottom,
    $right: right,
    $borderRadius: borderRadius,
    $borderStyle: borderStyle,
    $borderWidth: borderWidth,
    $pointerEvents: pointerEvents,
    $display: display,
    $position: position,
    $zIndex: zIndex,
    $overflow: overflow,
    $cursor: cursor,
    $transition: transition,
    $transform: transform,
    $animation: animation,
    $textAlign: textAlign,
    $textTransform: textTransform
  };
  return (0, import_jsx_runtime3.jsx)(StyledBox, { as: AsComponent, ref, ...mappedProps, ...rest });
});
var StyledBox = dt.div`
  ${({ theme, ...props }) => {
  return handleResponsiveValues(
    {
      padding: props.$padding,
      paddingTop: props.$paddingTop,
      paddingBottom: props.$paddingBottom,
      paddingLeft: props.$paddingLeft,
      paddingRight: props.$paddingRight,
      margin: props.$margin,
      marginTop: props.$marginTop,
      marginBottom: props.$marginBottom,
      marginLeft: props.$marginLeft,
      marginRight: props.$marginRight,
      top: props.$top,
      left: props.$left,
      bottom: props.$bottom,
      right: props.$right,
      width: props.$width,
      minWidth: props.$minWidth,
      maxWidth: props.$maxWidth,
      height: props.$height,
      minHeight: props.$minHeight,
      maxHeight: props.$maxHeight,
      color: props.$color,
      background: props.$background,
      fontSize: props.$fontSize,
      fontWeight: props.$fontWeight,
      lineHeight: props.$lineHeight,
      borderRadius: props.$hasRadius ? theme.borderRadius : props.$borderRadius,
      borderStyle: props.$borderColor && !props.$borderStyle ? "solid" : props.$borderStyle,
      borderWidth: props.$borderColor && !props.$borderWidth ? "1px" : props.$borderWidth,
      borderColor: props.$borderColor,
      zIndex: props.$zIndex,
      boxShadow: props.$shadow,
      display: props.$display,
      pointerEvents: props.$pointerEvents,
      cursor: props.$cursor,
      textAlign: props.$textAlign,
      textTransform: props.$textTransform,
      transition: props.$transition,
      transform: props.$transform,
      animation: props.$animation,
      position: props.$position,
      overflow: props.$overflow,
      flex: props.$flex,
      flexShrink: props.$shrink,
      flexGrow: props.$grow,
      flexBasis: props.$basis
    },
    theme
  );
}};
`;
var Flex = forwardRef4((props, ref) => {
  const { className, alignItems, direction, inline, gap, justifyContent, wrap, ...rest } = props;
  const mappedProps = {
    $alignItems: alignItems,
    $direction: direction,
    $gap: gap,
    $justifyContent: justifyContent,
    $wrap: wrap,
    $inline: inline
  };
  return (0, import_jsx_runtime3.jsx)(StyledFlex, { className, ref, ...mappedProps, ...rest });
});
var StyledFlex = dt(Box)`
  ${({ theme, $display = "flex", $alignItems = "center", $direction = "row", ...props }) => handleResponsiveValues(
  {
    gap: props.$gap,
    alignItems: $alignItems,
    justifyContent: props.$justifyContent,
    flexWrap: props.$wrap,
    flexDirection: $direction,
    display: props.$inline ? "inline-flex" : $display
  },
  theme
)};
`;
var ALPHA = "alpha";
var BETA = "beta";
var DELTA = "delta";
var EPSILON = "epsilon";
var OMEGA = "omega";
var PI = "pi";
var SIGMA = "sigma";
var ellipsis = lt`
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;
var variant = ({ $variant = OMEGA, theme }) => {
  switch ($variant) {
    case ALPHA: {
      return `
        font-weight: ${theme.fontWeights.bold};
        font-size: ${theme.fontSizes[5]};
        line-height: ${theme.lineHeights[2]};
      `;
    }
    case BETA: {
      return `
        font-weight: ${theme.fontWeights.bold};
        font-size: ${theme.fontSizes[4]};
        line-height: ${theme.lineHeights[1]};
      `;
    }
    case DELTA: {
      return `
        font-weight: ${theme.fontWeights.semiBold};
        font-size: ${theme.fontSizes[3]};
        line-height: ${theme.lineHeights[2]};
      `;
    }
    case EPSILON: {
      return `
        font-size: ${theme.fontSizes[3]};
        line-height: ${theme.lineHeights[6]};
      `;
    }
    case OMEGA: {
      return `
        font-size: ${theme.fontSizes[2]};
        line-height: ${theme.lineHeights[4]};
      `;
    }
    case PI: {
      return `
        font-size: ${theme.fontSizes[1]};
        line-height: ${theme.lineHeights[3]};
      `;
    }
    case SIGMA: {
      return `
        font-weight: ${theme.fontWeights.bold};
        font-size: ${theme.fontSizes[0]};
        line-height: ${theme.lineHeights[5]};
        text-transform: uppercase;
      `;
    }
    default: {
      return `
        font-size: ${theme.fontSizes[2]};
      `;
    }
  }
};
var Typography = forwardRef4(
  (props, ref) => {
    const {
      ellipsis: ellipsis2,
      textColor = "currentcolor",
      textDecoration,
      textTransform,
      variant: variant2,
      lineHeight,
      fontWeight,
      fontSize,
      ...rest
    } = props;
    const mappedProps = {
      $ellipsis: ellipsis2,
      $textColor: textColor,
      $textDecoration: textDecoration,
      $textTransform: textTransform,
      $variant: variant2,
      $lineHeight: lineHeight,
      $fontWeight: fontWeight,
      $fontSize: fontSize
    };
    return (0, import_jsx_runtime3.jsx)(StyledTypography, { ref, tag: "span", ...mappedProps, ...rest });
  }
);
var StyledTypography = dt(Box)`
  ${variant}
  ${({ $ellipsis }) => $ellipsis ? ellipsis : ""}

  ${({ theme, ...props }) => {
  return handleResponsiveValues(
    {
      color: props.$textColor,
      textDecoration: props.$textDecoration,
      textTransform: props.$textTransform,
      lineHeight: props.$lineHeight,
      fontWeight: props.$fontWeight,
      fontSize: props.$fontSize
    },
    theme
  );
}}
`;
var [AccordionProvider, useAccordion] = createContext2("Accordion");
var Root$8 = React2.forwardRef(({ children, size = "S", ...props }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(AccordionRoot, { ref: forwardedRef, $size: size, collapsible: true, ...props, type: "single", children: (0, import_jsx_runtime3.jsx)(AccordionProvider, { size, children }) });
});
var AccordionRoot = dt($1bf158f521e1b1b4$export$be92b6f5f03c0fe9)`
  background-color: ${(props) => props.theme.colors.neutral0};

  ${(props) => {
  if (props.$size === "S") {
    return lt`
        border-radius: ${(props2) => props2.theme.borderRadius};
        border: solid 1px ${(props2) => props2.theme.colors.neutral200};
      `;
  } else {
    return lt``;
  }
}}
`;
var Item$5 = React2.forwardRef((props, forwardedRef) => {
  const { size } = useAccordion("Item");
  return (0, import_jsx_runtime3.jsx)(AccordionItem, { $size: size, "data-size": size, ref: forwardedRef, ...props });
});
var AccordionItem = dt($1bf158f521e1b1b4$export$6d08773d2e66f8f2)`
  overflow: hidden;
  margin: 1px 0;

  &:first-child {
    border-top-left-radius: 0.3rem;
    border-top-right-radius: 0.3rem;
    margin-top: 0;
  }

  &:last-child {
    border-bottom-left-radius: 0.3rem;
    border-bottom-right-radius: 0.3rem;
    margin-bottom: 0;
  }

  &[data-size='S'] {
    & + & {
      border-top: solid 1px ${(props) => props.theme.colors.neutral200};
    }
  }

  &[data-state='open'] {
    box-shadow: 0 0 0 1px ${(props) => props.theme.colors.primary600};
  }

  &:not([data-disabled]):hover {
    box-shadow: 0 0 0 1px ${(props) => props.theme.colors.primary600};
  }

  /* This applies our desired focus effect correctly. */
  &:focus-within {
    position: relative;
    z-index: 1;
    box-shadow: 0 0 0 1px ${(props) => props.theme.colors.primary600};
  }

  @media (prefers-reduced-motion: no-preference) {
    transition: box-shadow ${(props) => props.theme.motion.timings["120"]}
      ${(props) => props.theme.motion.easings.easeOutQuad};
  }
`;
var Trigger$7 = React2.forwardRef(
  ({ caretPosition = "left", description, icon: Icon2, iconProps, children, ...restProps }, forwardedRef) => {
    const { size } = useAccordion("Trigger");
    return (0, import_jsx_runtime3.jsxs)(AccordionTrigger, { $caretPosition: caretPosition, $size: size, ref: forwardedRef, ...restProps, children: [
      caretPosition === "left" ? (0, import_jsx_runtime3.jsx)(TriggerIcon, { $size: size, children: (0, import_jsx_runtime3.jsx)(ForwardRef$4T, { width: size === "S" ? "1.2rem" : "1.6rem", height: size === "S" ? "1.2rem" : "1.6rem" }) }) : null,
      (0, import_jsx_runtime3.jsxs)(Flex, { tag: "span", gap: 2, children: [
        Icon2 && size === "S" ? (0, import_jsx_runtime3.jsx)(IconBox$4, { children: (0, import_jsx_runtime3.jsx)(Icon2, { ...iconProps }) }) : null,
        (0, import_jsx_runtime3.jsxs)(Flex, { alignItems: "flex-start", direction: "column", tag: "span", ref: forwardedRef, children: [
          (0, import_jsx_runtime3.jsx)(
            Typography,
            {
              fontWeight: size === "S" ? "bold" : void 0,
              ellipsis: true,
              variant: size === "M" ? "delta" : void 0,
              textAlign: "left",
              children
            }
          ),
          description && size === "M" ? (0, import_jsx_runtime3.jsx)(Typography, { textAlign: "left", children: description }) : null
        ] })
      ] }),
      caretPosition === "right" ? (0, import_jsx_runtime3.jsx)(TriggerIcon, { $size: size, children: (0, import_jsx_runtime3.jsx)(ForwardRef$4T, { width: size === "S" ? "1.2rem" : "1.6rem", height: size === "S" ? "1.2rem" : "1.6rem" }) }) : null
    ] });
  }
);
var IconBox$4 = dt(Box)`
  color: ${(props) => props.theme.colors.neutral500};
  display: flex;

  @media (prefers-reduced-motion: no-preference) {
    transition: ${(props) => props.theme.transitions.color};
  }
`;
var TriggerIcon = dt(Flex).attrs((props) => ({
  ...props,
  tag: "span"
}))`
  background-color: ${(props) => props.theme.colors.neutral200};
  width: ${(props) => props.$size === "S" ? "2.4rem" : "3.2rem"};
  height: ${(props) => props.$size === "S" ? "2.4rem" : "3.2rem"};
  flex: ${(props) => props.$size === "S" ? "0 0 2.4rem" : "0 0 3.2rem"};
  border-radius: 50%;
  justify-content: center;

  @media (prefers-reduced-motion: no-preference) {
    transition:
      transform ${(props) => props.theme.motion.timings["200"]} ${(props) => props.theme.motion.easings.authenticMotion},
      ${(props) => props.theme.transitions.backgroundColor};
  }
`;
var AccordionTrigger = dt($1bf158f521e1b1b4$export$41fb9f06171c75f4)`
  display: flex;
  align-items: center;
  justify-content: ${(props) => props.$caretPosition === "left" ? "flex-start" : "space-between"};
  width: 100%;
  gap: ${(props) => props.theme.spaces[4]};
  padding-inline: ${(props) => props.$size === "S" ? props.theme.spaces[4] : props.theme.spaces[6]};
  padding-block: ${(props) => props.$size === "S" ? props.theme.spaces[3] : props.theme.spaces[6]};
  cursor: pointer;
  color: ${(props) => props.theme.colors.neutral800};

  &[data-disabled] {
    cursor: default;
    color: ${(props) => props.theme.colors.neutral600};
  }

  &[data-state='open'] > ${TriggerIcon} {
    transform: rotate(180deg);
  }

  /* we remove the default focus because the entire item should have the focus style and the default would be hidden. */
  &:focus-visible {
    outline: none;
  }

  @media (prefers-reduced-motion: no-preference) {
    transition: ${(props) => props.theme.transitions.color};
  }
`;
var Actions = React2.forwardRef((props, forwardedRef) => {
  const { size } = useAccordion("Trigger");
  return (0, import_jsx_runtime3.jsx)(ActionWrapper, { $size: size, ...props, ref: forwardedRef });
});
var ActionWrapper = dt(Flex).attrs((props) => ({
  ...props,
  tag: "span"
}))`
  padding-inline: ${(props) => props.$size === "S" ? props.theme.spaces[2] : props.theme.spaces[6]};
  padding-block: ${(props) => props.$size === "S" ? props.theme.spaces[2] : props.theme.spaces[6]};

  // Remove default IconButton styles so there are no backgrounds or borders.
  & > button {
    border: none;
    background: none;
    color: ${(props) => props.theme.colors.neutral600};

    @media (prefers-reduced-motion: no-preference) {
      transition: ${(props) => props.theme.transitions.color};
    }
  }
`;
var Header$2 = React2.forwardRef(({ variant: variant2 = "primary", ...props }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(AccordionHeader, { $variant: variant2, ref: forwardedRef, ...props });
});
var AccordionHeader = dt($1bf158f521e1b1b4$export$8b251419efc915eb)`
  display: flex;
  align-items: center;
  background-color: ${(props) => props.$variant === "primary" ? props.theme.colors.neutral0 : props.theme.colors.neutral100};

  &[data-disabled] {
    background-color: ${(props) => props.theme.colors.neutral150};
  }

  &:not([data-disabled]) {
    &:hover,
    &[data-state='open'] {
      background-color: ${(props) => props.theme.colors.primary100};

      & > ${AccordionTrigger} {
        color: ${(props) => props.theme.colors.primary600};

        & ${IconBox$4} {
          color: ${(props) => props.theme.colors.primary600};
        }

        & ${TriggerIcon} {
          background-color: ${(props) => props.theme.colors.primary200};
        }
      }

      & > ${ActionWrapper} > button {
        color: ${(props) => props.theme.colors.primary600};
      }
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    transition: ${(props) => props.theme.transitions.backgroundColor};
  }
`;
var Content$7 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(AccordionContent, { ref: forwardedRef, ...props });
});
var slideDown = mt`
  from {
    height: 0;
  }
  to {
    height: var(--radix-accordion-content-height);
  }
`;
var slideUp = mt`
  from {
    height: var(--radix-accordion-content-height);
  }
  to {
    height: 0;
  }
`;
var AccordionContent = dt($1bf158f521e1b1b4$export$7c6e2c02157bb7d2)`
  overflow: hidden;

  @media (prefers-reduced-motion: no-preference) {
    &[data-state='open'] {
      animation: ${slideDown} ${(props) => props.theme.motion.timings["320"]}
        ${(props) => props.theme.motion.easings.authenticMotion};
    }

    &[data-state='closed'] {
      animation: ${slideUp} ${(props) => props.theme.motion.timings["320"]}
        ${(props) => props.theme.motion.easings.authenticMotion};
    }
  }
`;
var Accordion = Object.freeze(Object.defineProperty({
  __proto__: null,
  Actions,
  Content: Content$7,
  Header: Header$2,
  Item: Item$5,
  Root: Root$8,
  Trigger: Trigger$7
}, Symbol.toStringTag, { value: "Module" }));
var focus = lt`
  position: relative;
  outline: none;

  &:after {
    transition-property: all;
    transition-duration: 0.2s;
    border-radius: 8px;
    content: '';
    position: absolute;
    top: -4px;
    bottom: -4px;
    left: -4px;
    right: -4px;
    border: 2px solid transparent;
  }

  &:focus-visible {
    outline: none;

    &:after {
      border-radius: 8px;
      content: '';
      position: absolute;
      top: -5px;
      bottom: -5px;
      left: -5px;
      right: -5px;
      border: 2px solid ${(props) => props.theme.colors.primary600};
    }
  }
`;
var VisuallyHidden = ({ tag, ...props }) => {
  const AsComponent = tag || "span";
  return (0, import_jsx_runtime3.jsx)(Span, { ...props, as: AsComponent });
};
var Span = dt.span`
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
`;
var AccessibleIcon = ({ children, label }) => {
  const child = React2.Children.only(children);
  return (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
    React2.cloneElement(child, {
      // accessibility
      "aria-hidden": "true",
      focusable: "false"
      // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable
    }),
    (0, import_jsx_runtime3.jsx)(VisuallyHidden, { children: label })
  ] });
};
AccessibleIcon.displayName = "AccessibleIcon";
var handleIconColor = ({ theme, $variant }) => {
  if ($variant === "danger") {
    return theme.colors.danger700;
  }
  if ($variant === "success") {
    return theme.colors.success700;
  }
  if ($variant === "warning") {
    return theme.colors.warning700;
  }
  return theme.colors.primary700;
};
var CloseButton = dt(Box)`
  ${focus};
`;
var AlertIconWrapper = dt(Flex)`
  svg {
    height: 100%;
    width: 100%;

    path {
      fill: ${handleIconColor};
    }
  }
`;
var ActionBox = dt(Box)`
  & a > span {
    color: ${handleIconColor};
  }

  svg path {
    fill: ${handleIconColor};
  }
`;
function useControllableState$1({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });
  const isControlled = prop !== void 0;
  const value = isControlled ? prop : uncontrolledProp;
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  const setValue = React2.useCallback(
    (nextValue) => {
      if (isControlled) {
        const setter = nextValue;
        const value2 = typeof nextValue === "function" ? setter(prop) : nextValue;
        if (value2 !== prop)
          handleChange(value2);
      } else {
        setUncontrolledProp(nextValue);
      }
    },
    [isControlled, prop, setUncontrolledProp, handleChange]
  );
  return [value, setValue];
}
function useUncontrolledState({ defaultProp, onChange }) {
  const uncontrolledState = React2.useState(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = React2.useRef(value);
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  React2.useEffect(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [value, prevValueRef, handleChange]);
  return uncontrolledState;
}
var EASINGS = {
  easeInSine: "cubic-bezier(0.47, 0, 0.745, 0.715)",
  easeOutSine: "cubic-bezier(0.39, 0.575, 0.565, 1)",
  easeInOutSine: "cubic-bezier(0.39, 0.575, 0.565, 1)",
  easeInQuad: "cubic-bezier(0.55, 0.085, 0.68, 0.53)",
  easeOutQuad: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
  easeInOutQuad: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
  easeInCubic: "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
  easeOutCubic: "cubic-bezier(0.215, 0.61, 0.355, 1)",
  easeInOutCubic: "cubic-bezier(0.215, 0.61, 0.355, 1)",
  easeInQuart: "cubic-bezier(0.895, 0.03, 0.685, 0.22)",
  easeOutQuart: "cubic-bezier(0.165, 0.84, 0.44, 1)",
  easeInOutQuart: "cubic-bezier(0.165, 0.84, 0.44, 1)",
  easeInQuint: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
  easeOutQuint: "cubic-bezier(0.23, 1, 0.32, 1)",
  easeInOutQuint: "cubic-bezier(0.23, 1, 0.32, 1)",
  easeInExpo: "cubic-bezier(0.95, 0.05, 0.795, 0.035)",
  easeOutExpo: "cubic-bezier(0.19, 1, 0.22, 1)",
  easeInOutExpo: "cubic-bezier(0.19, 1, 0.22, 1)",
  easeInCirc: "cubic-bezier(0.6, 0.04, 0.98, 0.335)",
  easeOutCirc: "cubic-bezier(0.075, 0.82, 0.165, 1)",
  easeInOutCirc: "cubic-bezier(0.075, 0.82, 0.165, 1)",
  easeInBack: "cubic-bezier(0.6, -0.28, 0.735, 0.045)",
  easeOutBack: "cubic-bezier(0.175, 0.885, 0.32, 1.275)",
  easeInOutBack: "cubic-bezier(0.68, -0.55, 0.265, 1.55)",
  easeInOutFast: "cubic-bezier(1,0,0,1)",
  authenticMotion: "cubic-bezier(.4,0,.2,1)"
};
var TIMINGS = {
  "320": "320ms",
  "200": "200ms",
  "120": "120ms"
};
var TRANSITIONS = {
  color: `color ${TIMINGS["120"]} ${EASINGS.easeOutQuad}`,
  backgroundColor: `background-color ${TIMINGS["120"]} ${EASINGS.easeOutQuad}`
};
var ANIMATIONS = {
  overlayFadeIn: mt`
    from {
      opacity: 0;
    }
    to {
      opacity: 0.2;
    }
  `,
  modalPopIn: mt`
    from {
      transform:translate(-50%, -50%)  scale(0.8);
      opacity: 0;
    }
    to {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
  `,
  modalPopOut: mt`
    from {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
    to {
      transform:translate(-50%, -50%)  scale(0.8);
      opacity: 0;
    }
  `,
  popIn: mt`
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  `,
  popOut: mt`
    from {
      transform: scale(1);
      opacity: 1;
    }
    to {
      transform: scale(0.8);
      opacity: 0;
    }
  `,
  slideDownIn: mt`
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  `,
  slideDownOut: mt`
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  `,
  slideUpIn: mt`
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  `,
  slideUpOut: mt`
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(10px);
    }
  `,
  fadeIn: mt`
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  `,
  fadeOut: mt`
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  `
};
var SIZE = 32;
var PREVIEW_SCALE = 2;
var Item$4 = React2.forwardRef(
  ({ onLoadingStatusChange, delayMs = 600, src, alt, fallback, preview = false, ...restProps }, forwardedRef) => {
    const [loadingStatus, setLoadingStatus] = useControllableState$1({
      onChange: onLoadingStatusChange
    });
    const [tooltipOpen, setTooltipOpen] = React2.useState(false);
    const hasPreview = preview && loadingStatus === "loaded";
    const handleTooltipOpen = (isOpen) => {
      if (hasPreview) {
        setTooltipOpen(isOpen);
      }
    };
    return (0, import_jsx_runtime3.jsxs)($a093c7e1ec25a057$export$be92b6f5f03c0fe9, { onOpenChange: handleTooltipOpen, children: [
      (0, import_jsx_runtime3.jsx)($a093c7e1ec25a057$export$41fb9f06171c75f4, { asChild: true, children: (0, import_jsx_runtime3.jsxs)(AvatarRoot, { ref: forwardedRef, ...restProps, children: [
        hasPreview ? (0, import_jsx_runtime3.jsx)(
          AvatarOverlay,
          {
            width: "100%",
            height: "100%",
            position: "absolute",
            background: "neutral0",
            zIndex: "overlay",
            style: { opacity: tooltipOpen ? 0.4 : 0 }
          }
        ) : null,
        (0, import_jsx_runtime3.jsx)(AvatarImage, { src, alt, onLoadingStatusChange: setLoadingStatus }),
        (0, import_jsx_runtime3.jsx)($cddcb0b647441e34$export$fb8d7f40caaeea67, { delayMs, children: (0, import_jsx_runtime3.jsx)(Typography, { fontWeight: "bold", textTransform: "uppercase", children: fallback }) })
      ] }) }),
      hasPreview ? (0, import_jsx_runtime3.jsx)($a093c7e1ec25a057$export$602eac185826482c, { children: (0, import_jsx_runtime3.jsx)(PreviewContent, { side: "top", sideOffset: 4, children: (0, import_jsx_runtime3.jsx)(PreviewImg, { src, alt }) }) }) : null
    ] });
  }
);
var avatarStyles = lt`
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: middle;
  overflow: hidden;
  user-select: none;
  overflow: hidden;
  border-radius: 50%;
`;
var imgStyles = lt`
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: inherit;
`;
var AvatarRoot = dt($cddcb0b647441e34$export$be92b6f5f03c0fe9)`
  position: relative;
  z-index: 0;
  ${avatarStyles}
  width: ${SIZE / 10}rem;
  height: ${SIZE / 10}rem;
  /* TODO: we should get the user email & hash it to turn it into a hex-value so different emails can consistently get a different background */
  background-color: ${(p) => p.theme.colors.primary600};
  color: ${(p) => p.theme.colors.neutral0};
`;
var AvatarOverlay = dt(Box)`
  @media (prefers-reduced-motion: no-preference) {
    transition: opacity ${(props) => props.theme.motion.timings["200"]}
      ${(props) => props.theme.motion.easings.authenticMotion};
  }
`;
var AvatarImage = dt($cddcb0b647441e34$export$3e431a229df88919)`
  ${imgStyles}
`;
var PreviewContent = dt($a093c7e1ec25a057$export$7c6e2c02157bb7d2)`
  ${avatarStyles}
  width: ${SIZE * PREVIEW_SCALE / 10}rem;
  height: ${SIZE * PREVIEW_SCALE / 10}rem;

  @media (prefers-reduced-motion: no-preference) {
    animation: ${ANIMATIONS.fadeIn} ${(props) => props.theme.motion.timings["200"]}
      ${(props) => props.theme.motion.easings.authenticMotion};
  }
`;
var PreviewImg = dt.img`
  ${imgStyles}
`;
var Group$2 = React2.forwardRef((props, forwarededRef) => {
  return (0, import_jsx_runtime3.jsx)(GroupFlex, { ...props, ref: forwarededRef, tag: "div" });
});
var GroupFlex = dt(Flex)`
  & > ${AvatarRoot} + ${AvatarRoot} {
    margin-left: -${SIZE / 10 / 2}rem;
  }
`;
var Avatar = Object.freeze(Object.defineProperty({
  __proto__: null,
  Group: Group$2,
  Item: Item$4
}, Symbol.toStringTag, { value: "Module" }));
var Badge = ({
  active = false,
  size = "M",
  textColor = "neutral600",
  backgroundColor = "neutral150",
  children,
  minWidth = 5,
  ...props
}) => {
  const paddingX = size === "S" ? 1 : 2;
  return (0, import_jsx_runtime3.jsx)(
    Base,
    {
      inline: true,
      alignItems: "center",
      justifyContent: "center",
      minWidth,
      paddingLeft: paddingX,
      paddingRight: paddingX,
      background: active ? "primary200" : backgroundColor,
      $size: size,
      ...props,
      children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "sigma", textColor: active ? "primary600" : textColor, lineHeight: "1rem", children })
    }
  );
};
var Base = dt(Flex)`
  border-radius: ${({ theme, $size }) => $size === "S" ? "2px" : theme.borderRadius};
  ${({ $size, theme }) => {
  if ($size === "S") {
    return lt`
        padding-block: 0.3rem;
        padding-inline ${theme.spaces[1]}
      `;
  }
  return lt`
      padding-block: 0.7rem;
      padding-inline ${theme.spaces[2]}
    `;
}};
`;
var BaseLinkImpl = forwardRef4(
  ({ href, disabled = false, isExternal = false, ...props }, ref) => {
    return (0, import_jsx_runtime3.jsx)(
      BaseLink,
      {
        tag: "a",
        ref,
        target: isExternal ? "_blank" : void 0,
        rel: isExternal ? "noreferrer noopener" : void 0,
        href,
        tabIndex: disabled ? -1 : void 0,
        "aria-disabled": disabled,
        pointerEvents: disabled ? "none" : void 0,
        cursor: disabled ? void 0 : "pointer",
        ...props
      }
    );
  }
);
var BaseLink = dt(Box)`
  text-decoration: none;

  &:visited {
    color: inherit;
  }
`;
var Divider$1 = () => {
  return (0, import_jsx_runtime3.jsx)(Box, { "aria-hidden": true, paddingLeft: 1, paddingRight: 1, children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", textColor: "neutral500", children: "/" }) });
};
Divider$1.displayName = "Divider";
var AlignedList = dt(Flex)`
  // CrumbLinks do have padding-x, because they need to have a
  // interaction effect, which mis-aligns the breadcrumbs on the left.
  // This normalizes the behavior by moving the first item to left by
  // the same amount it has inner padding
  & > *:first-child {
    margin-left: ${({ theme }) => `calc(-1*${theme.spaces[2]})`};
  }
`;
var Breadcrumbs = React2.forwardRef(
  ({ label, children, ...props }, forwardedRef) => {
    const childrenArray = React2.Children.toArray(children);
    return (0, import_jsx_runtime3.jsx)(Box, { "aria-label": label, tag: "nav", ...props, ref: forwardedRef, children: (0, import_jsx_runtime3.jsx)(AlignedList, { tag: "ol", children: React2.Children.map(childrenArray, (child, index2) => {
      const shouldDisplayDivider = childrenArray.length > 1 && index2 + 1 < childrenArray.length;
      return (0, import_jsx_runtime3.jsxs)(Flex, { inline: true, tag: "li", children: [
        child,
        shouldDisplayDivider && (0, import_jsx_runtime3.jsx)(Divider$1, {})
      ] });
    }) }) });
  }
);
Breadcrumbs.displayName = "Breadcrumbs";
var Crumb = React2.forwardRef(
  ({ children, isCurrent = false, ...props }, forwardedRef) => (0, import_jsx_runtime3.jsx)(Box, { paddingLeft: 2, paddingRight: 2, paddingTop: 1, paddingBottom: 1, ref: forwardedRef, children: (0, import_jsx_runtime3.jsx)(
    Typography,
    {
      variant: "pi",
      textColor: "neutral800",
      fontWeight: isCurrent ? "bold" : "regular",
      "aria-current": isCurrent,
      ...props,
      children
    }
  ) })
);
Crumb.displayName = "Crumb";
var StyledLink = dt(BaseLinkImpl)`
  border-radius: ${({ theme }) => theme.borderRadius};
  color: ${({ theme }) => theme.colors.neutral600};
  font-size: ${({ theme }) => theme.fontSizes[1]};
  line-height: ${({ theme }) => theme.lineHeights[4]};
  padding: ${({ theme }) => `${theme.spaces[1]} ${theme.spaces[2]}`};
  text-decoration: none;

  :hover,
  :focus {
    background-color: ${({ theme }) => theme.colors.neutral200};
    color: ${({ theme }) => theme.colors.neutral700};
  }
`;
var CrumbLink = React2.forwardRef(({ children, ...props }, forwardedRef) => (0, import_jsx_runtime3.jsx)(StyledLink, { ref: forwardedRef, ...props, children }));
CrumbLink.displayName = "CrumbLink";
var stripReactIdOfColon = (str) => str.replaceAll(":", "");
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
}
function composeRefs(...refs) {
  return (node) => refs.forEach((ref) => setRef(ref, node));
}
function useComposedRefs(...refs) {
  return React2.useCallback(composeRefs(...refs), refs);
}
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR() ? import_react2.useEffect : import_react2.useLayoutEffect;
var useReactId = React2["useId".toString()] || (() => void 0);
var count = 0;
var useId = (initialId) => {
  const [id, setId] = React2.useState(useReactId());
  useIsomorphicLayoutEffect(() => {
    if (!initialId)
      setId((reactId) => reactId ?? String(count++));
  }, [initialId]);
  return (initialId == null ? void 0 : initialId.toString()) ?? (id || "");
};
var useIntersection = (scrollableAreaRef, callback, { selectorToWatch, skipWhen = false }) => {
  const handleIntersection = useCallbackRef(callback);
  React2.useEffect(() => {
    if (skipWhen || !scrollableAreaRef.current)
      return;
    const options = {
      root: scrollableAreaRef.current,
      rootMargin: "0px"
    };
    const onEnterZone = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && scrollableAreaRef.current) {
          if (scrollableAreaRef.current.scrollHeight > scrollableAreaRef.current.clientHeight) {
            handleIntersection(entry);
          }
        }
      });
    };
    const observer = new IntersectionObserver(onEnterZone, options);
    const target = scrollableAreaRef.current.querySelector(selectorToWatch);
    if (target) {
      observer.observe(target);
    }
    return () => {
      observer.disconnect();
    };
  }, [skipWhen, handleIntersection, selectorToWatch, scrollableAreaRef]);
};
var SUCCESS_LIGHT = "success-light";
var DANGER_LIGHT = "danger-light";
var DEFAULT = "default";
var TERTIARY = "tertiary";
var SECONDARY = "secondary";
var DANGER = "danger";
var SUCCESS = "success";
var GHOST = "ghost";
var LIGHT_VARIANTS = [SUCCESS_LIGHT, DANGER_LIGHT];
var VARIANTS = [DEFAULT, TERTIARY, SECONDARY, DANGER, SUCCESS, GHOST, ...LIGHT_VARIANTS];
var BUTTON_SIZES = ["XS", "S", "M", "L"];
var getVariantColorName = (variant2) => {
  if (variant2 === SUCCESS_LIGHT || variant2 === DANGER_LIGHT) {
    return `${variant2.substring(0, variant2.lastIndexOf("-"))}`;
  }
  if (variant2 === TERTIARY) {
    return "neutral";
  }
  if (variant2 === DEFAULT || variant2 === SECONDARY || VARIANTS.every((vari) => vari !== variant2)) {
    return "primary";
  }
  return `${variant2}`;
};
var getDisabledStyle = ({ theme }) => {
  return lt`
    border: 1px solid ${theme.colors.neutral200};
    background: ${theme.colors.neutral150};
    color: ${theme.colors.neutral600};
    cursor: default;
  `;
};
var getHoverStyle = ({ theme, $variant }) => {
  if ([...LIGHT_VARIANTS, SECONDARY].includes($variant)) {
    return lt`
      background-color: ${theme.colors.neutral0};
    `;
  }
  if ($variant === TERTIARY) {
    return lt`
      background-color: ${theme.colors.neutral100};
    `;
  }
  if ($variant === GHOST) {
    return lt`
      background-color: ${theme.colors.neutral100};
    `;
  }
  if ($variant === DEFAULT) {
    return lt`
      border: 1px solid ${theme.colors.buttonPrimary500};
      background: ${theme.colors.buttonPrimary500};
    `;
  }
  return lt`
    border: 1px solid ${theme.colors[`${getVariantColorName($variant)}500`]};
    background: ${theme.colors[`${getVariantColorName($variant)}500`]};
  `;
};
var getActiveStyle = ({ theme, $variant }) => {
  if ([...LIGHT_VARIANTS, SECONDARY].includes($variant)) {
    return lt`
      background-color: ${theme.colors.neutral0};
      border: 1px solid ${theme.colors[`${getVariantColorName($variant)}600`]};
      color: ${theme.colors[`${getVariantColorName($variant)}600`]};
    `;
  }
  if ($variant === TERTIARY || $variant === GHOST) {
    return lt`
      background-color: ${theme.colors.neutral150};
    `;
  }
  return lt`
    border: 1px solid ${theme.colors[`${getVariantColorName($variant)}600`]};
    background: ${theme.colors[`${getVariantColorName($variant)}600`]};
  `;
};
var getVariantStyle = ({ theme, $variant }) => {
  switch ($variant) {
    case DANGER_LIGHT:
    case SUCCESS_LIGHT:
    case SECONDARY: {
      return lt`
        border: 1px solid ${theme.colors[`${getVariantColorName($variant)}200`]};
        background: ${theme.colors[`${getVariantColorName($variant)}100`]};
        color: ${theme.colors[`${getVariantColorName($variant)}700`]};
      `;
    }
    case TERTIARY: {
      return lt`
        border: 1px solid ${theme.colors.neutral200};
        background: ${theme.colors.neutral0};
        color: ${theme.colors.neutral800};
      `;
    }
    case GHOST: {
      return lt`
        border: 1px solid transparent;
        background: transparent;
        color: ${theme.colors.neutral800};

        svg {
          fill: ${theme.colors.neutral500};
        }
      `;
    }
    case SUCCESS:
    case DANGER: {
      return lt`
        border: 1px solid ${theme.colors[`${getVariantColorName($variant)}600`]};
        background: ${theme.colors[`${getVariantColorName($variant)}600`]};
        color: ${theme.colors.neutral0};
      `;
    }
    default: {
      return lt`
        border: 1px solid ${theme.colors.buttonPrimary600};
        background: ${theme.colors.buttonPrimary600};
        color: ${theme.colors.buttonNeutral0};
      `;
    }
  }
};
var Button = forwardRef4(
  ({
    variant: variant2 = DEFAULT,
    startIcon,
    endIcon,
    disabled = false,
    children,
    onClick,
    size = BUTTON_SIZES[1],
    loading = false,
    fullWidth = false,
    ...props
  }, ref) => {
    const isDisabled = disabled || loading;
    const handleClick = (e) => {
      if (!isDisabled && onClick) {
        onClick(e);
      }
    };
    return (0, import_jsx_runtime3.jsxs)(
      ButtonWrapper,
      {
        ref,
        "aria-disabled": isDisabled,
        disabled: isDisabled,
        $size: size,
        $variant: variant2,
        tag: "button",
        onClick: handleClick,
        hasRadius: true,
        gap: 2,
        inline: true,
        alignItems: "center",
        justifyContent: "center",
        width: fullWidth ? "100%" : void 0,
        paddingLeft: 4,
        paddingRight: 4,
        cursor: "pointer",
        ...props,
        children: [
          (startIcon || loading) && (0, import_jsx_runtime3.jsx)(Flex, { tag: "span", "aria-hidden": true, children: loading ? (0, import_jsx_runtime3.jsx)(LoaderAnimated, {}) : startIcon }),
          (0, import_jsx_runtime3.jsx)(Typography, { variant: size === "S" ? "pi" : void 0, fontWeight: "bold", children }),
          endIcon && (0, import_jsx_runtime3.jsx)(Flex, { tag: "span", "aria-hidden": true, children: endIcon })
        ]
      }
    );
  }
);
var rotation$2 = mt`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
`;
var LoaderAnimated = dt(ForwardRef$2j)`
  animation: ${rotation$2} 2s infinite linear;
  will-change: transform;
`;
var ButtonWrapper = dt(Flex)`
  height: ${({ theme, $size }) => theme.sizes.button[$size]};
  text-decoration: none;
  ${getVariantStyle}

  &:hover {
    ${getHoverStyle}
  }

  &:active {
    ${getActiveStyle}
  }

  &[aria-disabled='true'] {
    ${getDisabledStyle}
  }

  @media (prefers-reduced-motion: no-preference) {
    transition:
      ${(props) => props.theme.transitions.backgroundColor},
      ${(props) => props.theme.transitions.color},
      border-color ${(props) => props.theme.motion.timings["200"]} ${(props) => props.theme.motion.easings.easeOutQuad};
  }
`;
var TooltipImpl = React2.forwardRef(
  ({
    children,
    description,
    label,
    defaultOpen,
    open,
    onOpenChange,
    delayDuration = 500,
    disableHoverableContent,
    ...restProps
  }, forwardedRef) => {
    if (!label && !description)
      return children;
    return (0, import_jsx_runtime3.jsxs)(
      $a093c7e1ec25a057$export$be92b6f5f03c0fe9,
      {
        defaultOpen,
        open,
        onOpenChange,
        delayDuration,
        disableHoverableContent,
        children: [
          (0, import_jsx_runtime3.jsx)($a093c7e1ec25a057$export$41fb9f06171c75f4, { asChild: true, children }),
          (0, import_jsx_runtime3.jsx)($a093c7e1ec25a057$export$602eac185826482c, { children: (0, import_jsx_runtime3.jsx)(TooltipContent, { ref: forwardedRef, sideOffset: 8, ...restProps, children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", fontWeight: "bold", children: label || description }) }) })
        ]
      }
    );
  }
);
var TooltipContent = dt($a093c7e1ec25a057$export$7c6e2c02157bb7d2)`
  background-color: ${(props) => props.theme.colors.neutral900};
  color: ${(props) => props.theme.colors.neutral0};
  padding-inline: ${(props) => props.theme.spaces[2]};
  padding-block: ${(props) => props.theme.spaces[2]};
  border-radius: ${(props) => props.theme.borderRadius};
  z-index: ${(props) => props.theme.zIndices.tooltip};
  will-change: opacity;
  transform-origin: var(--radix-tooltip-content-transform-origin);

  @media (prefers-reduced-motion: no-preference) {
    animation: ${ANIMATIONS.fadeIn} ${(props) => props.theme.motion.timings["200"]}
      ${(props) => props.theme.motion.easings.authenticMotion};
  }
`;
var IconButton = forwardRef4(
  ({
    label,
    background,
    children,
    disabled = false,
    onClick,
    size = "S",
    variant: variant2 = "tertiary",
    withTooltip = true,
    ...restProps
  }, ref) => {
    const handleClick = (e) => {
      if (!disabled && onClick) {
        onClick(e);
      }
    };
    const component = (0, import_jsx_runtime3.jsx)(
      IconButtonWrapper,
      {
        "aria-disabled": disabled,
        background: disabled ? "neutral150" : background,
        tag: "button",
        display: "inline-flex",
        justifyContent: "center",
        hasRadius: true,
        cursor: "pointer",
        ...restProps,
        ref,
        $size: size,
        onClick: handleClick,
        $variant: variant2,
        children: (0, import_jsx_runtime3.jsx)(AccessibleIcon, { label, children })
      }
    );
    return withTooltip ? (0, import_jsx_runtime3.jsx)(TooltipImpl, { label, children: component }) : component;
  }
);
var IconButtonWrapper = dt(Flex)`
  text-decoration: none;

  ${(props) => {
  switch (props.$size) {
    case "XS": {
      return lt`
          padding-block: 0.25rem;
          padding-inline: 0.25rem;
        `;
    }
    case "S": {
      return lt`
          padding-block: 0.7rem;
          padding-inline: 0.7rem;
        `;
    }
    case "M": {
      return lt`
          padding-block: 0.9rem;
          padding-inline: 0.9rem;
        `;
    }
    case "L": {
      return lt`
          padding-block: 1.1rem;
          padding-inline: 1.1rem;
        `;
    }
  }
}}
  ${getVariantStyle}
  ${(props) => props.$variant === "tertiary" ? lt`
          color: ${props.theme.colors.neutral500};
        ` : ""}

  &:hover {
    ${getHoverStyle}
    ${(props) => props.$variant === "tertiary" ? lt`
            color: ${props.theme.colors.neutral600};
          ` : ""}
  }

  &:active {
    ${getActiveStyle}
  }

  &[aria-disabled='true'] {
    ${getDisabledStyle}
  }

  @media (prefers-reduced-motion: no-preference) {
    transition:
      ${(props) => props.theme.transitions.backgroundColor},
      ${(props) => props.theme.transitions.color},
      border-color ${(props) => props.theme.motion.timings["200"]} ${(props) => props.theme.motion.easings.easeOutQuad};
  }
`;
var IconButtonGroup = dt(Flex)`
  & ${IconButtonWrapper}:first-child {
    border-radius: ${({ theme }) => `${theme.borderRadius} 0 0 ${theme.borderRadius}`};
  }

  & ${IconButtonWrapper}:last-child {
    border-radius: ${({ theme }) => `0 ${theme.borderRadius} ${theme.borderRadius} 0`};
  }

  & ${IconButtonWrapper} {
    border-radius: 0;

    & + ${IconButtonWrapper} {
      border-left: none;
    }
  }
`;
var Link = forwardRef4(
  ({ children, href, disabled = false, startIcon, endIcon, isExternal = false, ...props }, ref) => {
    return (0, import_jsx_runtime3.jsxs)(LinkWrapper$1, { ref, href, disabled, isExternal, ...props, children: [
      startIcon,
      (0, import_jsx_runtime3.jsx)(Typography, { textColor: disabled ? "neutral600" : "primary600", children }),
      endIcon,
      href && !endIcon && isExternal && (0, import_jsx_runtime3.jsx)(ForwardRef$3F, {})
    ] });
  }
);
var LinkWrapper$1 = dt(BaseLinkImpl)`
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  gap: ${({ theme }) => theme.spaces[2]};
  pointer-events: ${({ disabled }) => disabled ? "none" : void 0};

  svg {
    font-size: 1rem;

    path {
      fill: ${({ disabled, theme }) => disabled ? theme.colors.neutral600 : theme.colors.primary600};
    }
  }

  &:hover {
    & > span {
      color: ${({ theme }) => theme.colors.primary500};
    }

    svg path {
      fill: ${({ theme }) => theme.colors.primary500};
    }
  }

  &:active {
    color: ${({ theme }) => theme.colors.primary700};
  }

  ${focus};
`;
var MenuRoot = $d08ef79370b62062$export$be92b6f5f03c0fe9;
var MenuTrigger = React2.forwardRef(
  ({ label, endIcon = (0, import_jsx_runtime3.jsx)(ForwardRef$4T, { width: "1.2rem", height: "1.2rem", "aria-hidden": true }), tag = Button, icon, ...rest }, ref) => {
    const props = {
      ...rest,
      ref,
      type: "button"
    };
    return (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, disabled: props.disabled, children: tag === IconButton ? (0, import_jsx_runtime3.jsx)(IconButton, { label, variant: "tertiary", ...props, children: icon }) : (0, import_jsx_runtime3.jsx)(Button, { endIcon, variant: "ghost", ...props }) });
  }
);
var MenuContent = React2.forwardRef(
  ({ children, intersectionId, onCloseAutoFocus, popoverPlacement = "bottom-start", ...props }, ref) => {
    const [side, align] = popoverPlacement.split("-");
    return (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$602eac185826482c, { children: (0, import_jsx_runtime3.jsx)(DropdownMenuContent, { align, side, loop: true, onCloseAutoFocus, asChild: true, children: (0, import_jsx_runtime3.jsxs)(
      Viewport$2,
      {
        ref,
        direction: "column",
        borderColor: "neutral150",
        hasRadius: true,
        background: "neutral0",
        shadow: "filterShadow",
        maxHeight: "15rem",
        padding: 1,
        marginTop: 1,
        marginBottom: 1,
        alignItems: "flex-start",
        position: "relative",
        overflow: "auto",
        ...props,
        children: [
          children,
          (0, import_jsx_runtime3.jsx)(Box, { id: intersectionId, width: "100%", height: "1px" })
        ]
      }
    ) }) });
  }
);
var Viewport$2 = dt(Flex)`
  scrollbar-width: none;
  -ms-overflow-style: none;
  -webkit-overflow-scrolling: touch;

  &::-webkit-scrollbar {
    display: none;
  }
`;
var DropdownMenuContent = dt($d08ef79370b62062$export$7c6e2c02157bb7d2)`
  @media (prefers-reduced-motion: no-preference) {
    animation-duration: ${(props) => props.theme.motion.timings["200"]};

    &[data-state='open'] {
      animation-timing-function: ${(props) => props.theme.motion.easings.authenticMotion};

      &[data-side='top'] {
        animation-name: ${ANIMATIONS.slideUpIn};
      }

      &[data-side='bottom'] {
        animation-name: ${ANIMATIONS.slideDownIn};
      }
    }
  }
`;
var MenuItem$1 = ({ onSelect, disabled = false, isLink, startIcon, endIcon, isExternal, ...props }) => {
  return (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$6d08773d2e66f8f2, { asChild: true, onSelect, disabled, children: isLink || isExternal ? (0, import_jsx_runtime3.jsx)(
    OptionLink,
    {
      color: "neutral800",
      startIcon,
      endIcon,
      ...props,
      isExternal: isExternal ?? false,
      children: (0, import_jsx_runtime3.jsx)(Typography, { children: props.children })
    }
  ) : (0, import_jsx_runtime3.jsxs)(
    OptionButton,
    {
      cursor: "pointer",
      color: "neutral800",
      background: "transparent",
      borderStyle: "none",
      gap: 2,
      ...props,
      children: [
        startIcon && (0, import_jsx_runtime3.jsx)(Flex, { tag: "span", "aria-hidden": true, children: startIcon }),
        (0, import_jsx_runtime3.jsx)(Typography, { grow: 1, children: props.children }),
        endIcon && (0, import_jsx_runtime3.jsx)(Flex, { tag: "span", "aria-hidden": true, children: endIcon })
      ]
    }
  ) });
};
var getOptionStyle = ({ theme }) => lt`
  text-align: left;
  width: 100%;
  border-radius: ${theme.borderRadius};
  padding: ${theme.spaces[2]} ${theme.spaces[4]};

  &[aria-disabled='true'] {
    cursor: not-allowed;
    color: ${theme.colors.neutral500};
  }

  &[data-highlighted] {
    background-color: ${theme.colors.primary100};
  }

  &:focus-visible {
    outline: none;

    &:after {
      content: none;
    }
  }
`;
var OptionButton = dt(Flex)`
  ${getOptionStyle}
`;
var OptionLink = dt(Link)`
  /* We include this here again because typically when people use OptionLink they provide an as prop which cancels the Box props */
  color: ${({ theme, color }) => extractStyleFromTheme(theme.colors, color, void 0)};
  text-decoration: none;

  &:hover {
    color: unset;
  }

  /* TODO: do we need this? */
  svg > path,
  &:focus-visible svg > path {
    fill: currentColor;
  }

  ${getOptionStyle}
`;
var StyledSeparator = dt(Box)`
  /* Negative horizontal margin to compensate Menu.Content's padding */
  margin: ${({ theme }) => theme.spaces[1]} -${({ theme }) => theme.spaces[1]};
  width: calc(100% + ${({ theme }) => theme.spaces[2]});
  /* Hide separator if there's nothing above in the menu */
  &:first-child {
    display: none;
  }
`;
var MenuSeparator = React2.forwardRef((props, ref) => (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$1ff3c3f08ae963c0, { ...props, asChild: true, children: (0, import_jsx_runtime3.jsx)(StyledSeparator, { height: "1px", shrink: 0, background: "neutral150", ref }) }));
var MenuLabel = React2.forwardRef((props, ref) => (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$b04be29aa201d4f5, { asChild: true, children: (0, import_jsx_runtime3.jsx)(StyledLabel, { ref, variant: "sigma", textColor: "neutral600", ...props }) }));
var StyledLabel = dt(Typography)`
  padding: ${({ theme }) => theme.spaces[2]} ${({ theme }) => theme.spaces[4]};
`;
var MenuSubRoot = $d08ef79370b62062$export$d7a01e11500dfb6f;
var MenuSubTrigger = React2.forwardRef(({ disabled = false, ...props }, ref) => {
  return (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$2ea8a7a591ac5eac, { asChild: true, disabled, children: (0, import_jsx_runtime3.jsxs)(
    SubmenuTrigger,
    {
      ref,
      color: "neutral800",
      tag: "button",
      type: "button",
      background: "transparent",
      borderStyle: "none",
      gap: 5,
      ...props,
      children: [
        (0, import_jsx_runtime3.jsx)(Typography, { children: props.children }),
        (0, import_jsx_runtime3.jsx)(ForwardRef$4v, { fill: "neutral500", height: "1.2rem", width: "1.2rem" })
      ]
    }
  ) });
});
var SubmenuTrigger = dt(OptionButton)`
  &[data-state='open'] {
    background-color: ${({ theme }) => theme.colors.primary100};
  }
`;
var MenuSubContent = React2.forwardRef((props, ref) => {
  return (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$602eac185826482c, { children: (0, import_jsx_runtime3.jsx)($d08ef79370b62062$export$6d4de93b380beddf, { sideOffset: 8, asChild: true, children: (0, import_jsx_runtime3.jsx)(
    Viewport$2,
    {
      ref,
      direction: "column",
      borderStyle: "solid",
      borderWidth: "1px",
      borderColor: "neutral150",
      hasRadius: true,
      background: "neutral0",
      shadow: "filterShadow",
      maxHeight: "15rem",
      padding: 1,
      alignItems: "flex-start",
      overflow: "auto",
      ...props
    }
  ) }) });
});
var Root$7 = MenuRoot;
var Trigger$6 = MenuTrigger;
var Content$6 = MenuContent;
var Item$3 = MenuItem$1;
var Separator2 = MenuSeparator;
var Label$1 = MenuLabel;
var SubRoot = MenuSubRoot;
var SubTrigger = MenuSubTrigger;
var SubContent = MenuSubContent;
var Menu = Object.freeze(Object.defineProperty({
  __proto__: null,
  Content: Content$6,
  Item: Item$3,
  Label: Label$1,
  Root: Root$7,
  Separator: Separator2,
  SubContent,
  SubRoot,
  SubTrigger,
  Trigger: Trigger$6
}, Symbol.toStringTag, { value: "Module" }));
var SimpleMenu = React2.forwardRef(
  ({ children, onOpen, onClose, popoverPlacement, onReachEnd, ...props }, forwardedRef) => {
    const triggerRef = React2.useRef(null);
    const composedRef = useComposedRefs(forwardedRef, triggerRef);
    const contentRef = React2.useRef(null);
    const [internalIsOpen, setInternalIsOpen] = React2.useState(false);
    const handleReachEnd = (entry) => {
      if (onReachEnd) {
        onReachEnd(entry);
      }
    };
    const handleOpenChange = (isOpen) => {
      if (isOpen && typeof onOpen === "function") {
        onOpen();
      } else if (!isOpen && typeof onClose === "function") {
        onClose();
      }
      setInternalIsOpen(isOpen);
    };
    const generatedId = useId();
    const intersectionId = `intersection-${stripReactIdOfColon(generatedId)}`;
    useIntersection(contentRef, handleReachEnd, {
      selectorToWatch: `#${intersectionId}`,
      /**
       * We need to know when the select is open because only then will viewportRef
       * not be null. Because it uses a portal that (sensibly) is not mounted 24/7.
       */
      skipWhen: !internalIsOpen
    });
    return (0, import_jsx_runtime3.jsxs)(Root$7, { onOpenChange: handleOpenChange, children: [
      (0, import_jsx_runtime3.jsx)(Trigger$6, { ref: composedRef, ...props, children: props.label }),
      (0, import_jsx_runtime3.jsx)(Content$6, { ref: contentRef, intersectionId, popoverPlacement, children })
    ] });
  }
);
var StyledButton = dt(SimpleMenu)`
  padding: ${({ theme }) => `${theme.spaces[1]} ${theme.spaces[2]}`};
  height: unset;

  :hover,
  :focus {
    background-color: ${({ theme }) => theme.colors.neutral200};
  }
`;
var CrumbSimpleMenu = React2.forwardRef(
  ({ children, ...props }, forwardedRef) => (0, import_jsx_runtime3.jsx)(StyledButton, { ref: forwardedRef, endIcon: null, size: "S", ...props, children })
);
CrumbSimpleMenu.displayName = "CrumbSimpleMenu";
var CardContext = React2.createContext({ id: "" });
var useCard = () => React2.useContext(CardContext);
var Card = React2.forwardRef(({ id, ...props }, forwardedRef) => {
  const generatedId = useId(id);
  const context = React2.useMemo(() => ({ id: generatedId }), [generatedId]);
  return (0, import_jsx_runtime3.jsx)(CardContext.Provider, { value: context, children: (0, import_jsx_runtime3.jsx)(
    Box,
    {
      ref: forwardedRef,
      id,
      tabIndex: 0,
      hasRadius: true,
      background: "neutral0",
      borderStyle: "solid",
      borderWidth: "1px",
      borderColor: "neutral150",
      shadow: "tableShadow",
      tag: "article",
      "aria-labelledby": `${generatedId}-title`,
      ...props
    }
  ) });
});
var CardActionImpl = React2.forwardRef(({ position, ...restProps }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(CardAction, { ref: forwardedRef, $position: position, ...restProps, direction: "row", gap: 2 });
});
var CardAction = dt(Flex)`
  position: absolute;
  top: ${({ theme }) => theme.spaces[3]};
  right: ${({ $position, theme }) => {
  if ($position === "end") {
    return theme.spaces[3];
  }
  return void 0;
}};
  left: ${({ $position, theme }) => {
  if ($position === "start") {
    return theme.spaces[3];
  }
  return void 0;
}};
`;
var CardAssetImg = dt.img`
  // inline flows is based on typography and displays an extra white space below the image
  // switch to block is required in order to make the img stick the bottom of the container
  // addition infos: https://stackoverflow.com/questions/5804256/image-inside-div-has-extra-space-below-the-image
  margin: 0;
  padding: 0;
  max-height: 100%;
  max-width: 100%;
  object-fit: contain;
`;
var CardAssetWrapper = dt.div`
  display: flex;
  justify-content: center;
  height: ${({ $size }) => $size === "S" ? "8.8rem" : "16.4rem"};
  width: 100%;
  background: repeating-conic-gradient(${({ theme }) => theme.colors.neutral100} 0% 25%, transparent 0% 50%) 50% / 20px
    20px;
  border-top-left-radius: ${({ theme }) => theme.borderRadius};
  border-top-right-radius: ${({ theme }) => theme.borderRadius};
`;
var CardBadgeWrapper = dt.div`
  margin-left: auto;
  flex-shrink: 0;
`;
var BadgePosition = dt(Badge)`
  margin-left: ${({ theme }) => theme.spaces[1]};
`;
var CheckIcon = ({ fill, ...props }) => {
  const { colors } = nt();
  return (0, import_jsx_runtime3.jsx)(
    Box,
    {
      tag: "svg",
      viewBox: "0 0 32 32",
      xmlns: "http://www.w3.org/2000/svg",
      fill: fill ? colors[fill] : void 0,
      ...props,
      children: (0, import_jsx_runtime3.jsx)("path", { d: "M29.0613 10.0613L13.0613 26.0613C12.9219 26.2011 12.7563 26.3121 12.574 26.3878C12.3917 26.4635 12.1962 26.5024 11.9988 26.5024C11.8013 26.5024 11.6059 26.4635 11.4235 26.3878C11.2412 26.3121 11.0756 26.2011 10.9363 26.0613L3.93626 19.0613C3.79673 18.9217 3.68605 18.7561 3.61053 18.5738C3.53502 18.3915 3.49615 18.1961 3.49615 17.9988C3.49615 17.8014 3.53502 17.606 3.61053 17.4237C3.68605 17.2414 3.79673 17.0758 3.93626 16.9363C4.07579 16.7967 4.24143 16.686 4.42374 16.6105C4.60604 16.535 4.80143 16.4962 4.99876 16.4962C5.19608 16.4962 5.39147 16.535 5.57378 16.6105C5.75608 16.686 5.92173 16.7967 6.06126 16.9363L12 22.875L26.9388 7.93876C27.2205 7.65697 27.6027 7.49866 28.0013 7.49866C28.3998 7.49866 28.782 7.65697 29.0638 7.93876C29.3455 8.22055 29.5039 8.60274 29.5039 9.00126C29.5039 9.39977 29.3455 9.78197 29.0638 10.0638L29.0613 10.0613Z" })
    }
  );
};
var CheckboxEl = React2.forwardRef(
  ({ defaultChecked, checked: checkedProp, onCheckedChange, ...props }, forwardedRef) => {
    const checkboxRef = React2.useRef(null);
    const [checked, setChecked] = useControllableState$1({
      defaultProp: defaultChecked,
      prop: checkedProp,
      onChange: onCheckedChange
    });
    const composedRefs = useComposedRefs(checkboxRef, forwardedRef);
    return (0, import_jsx_runtime3.jsx)(CheckboxRoot, { ref: composedRefs, checked, onCheckedChange: setChecked, ...props, children: (0, import_jsx_runtime3.jsxs)(CheckboxIndicator, { forceMount: true, children: [
      checked === true ? (0, import_jsx_runtime3.jsx)(CheckIcon, { width: "1.6rem", fill: "neutral0" }) : null,
      checked === "indeterminate" ? (0, import_jsx_runtime3.jsx)(ForwardRef$21, { fill: "neutral0" }) : null
    ] }) });
  }
);
var CheckboxRoot = dt($e698a72e93240346$export$be92b6f5f03c0fe9)`
  background: ${(props) => props.theme.colors.neutral0};
  width: 2rem;
  height: 2rem;
  border-radius: ${(props) => props.theme.borderRadius};
  border: 1px solid ${(props) => props.theme.colors.neutral300};
  position: relative;
  z-index: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  // this ensures the checkbox is always a square even in flex-containers.
  flex: 0 0 2rem;

  &[data-state='checked'],
  &[data-state='indeterminate'] {
    border: 1px solid ${(props) => props.theme.colors.primary600};
    background-color: ${(props) => props.theme.colors.primary600};
  }

  &[data-disabled] {
    background-color: ${(props) => props.theme.colors.neutral200};
  }

  /* increase target size for touch devices https://www.w3.org/WAI/WCAG21/Understanding/target-size.html */
  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    z-index: -1;
    min-width: 44px;
    min-height: 44px;
  }
`;
var CheckboxIndicator = dt($e698a72e93240346$export$adb584737d712b70)`
  display: inline-flex;
  pointer-events: auto !important;
  width: 100%;
  height: 100%;
  cursor: pointer;
  justify-content: center;
  align-items: center;
`;
var CheckboxImpl = React2.forwardRef(({ children, ...restProps }, forwardedRef) => {
  const labelId = useId(restProps.id);
  if (!children) {
    return (0, import_jsx_runtime3.jsx)(CheckboxEl, { ref: forwardedRef, ...restProps });
  }
  return (0, import_jsx_runtime3.jsxs)(Flex, { gap: 2, children: [
    (0, import_jsx_runtime3.jsx)(CheckboxEl, { id: labelId, ...restProps }),
    (0, import_jsx_runtime3.jsx)(Typography, { tag: "label", textColor: "neutral800", htmlFor: labelId, children })
  ] });
});
var CardCheckbox = React2.forwardRef((props, forwardedRef) => {
  const { id } = useCard();
  return (0, import_jsx_runtime3.jsx)(CardActionImpl, { position: "start", children: (0, import_jsx_runtime3.jsx)(CheckboxImpl, { "aria-labelledby": `${id}-title`, ...props, ref: forwardedRef }) });
});
var BreakBox = dt(Box)`
  word-break: break-all;
`;
var CardHeaderWrapper = dt(Flex)`
  border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};
`;
var KeyboardKeys = {
  DOWN: "ArrowDown",
  UP: "ArrowUp",
  RIGHT: "ArrowRight",
  LEFT: "ArrowLeft",
  ESCAPE: "Escape",
  ENTER: "Enter",
  SPACE: " ",
  TAB: "Tab",
  END: "End",
  HOME: "Home",
  DELETE: "Delete",
  PAGE_UP: "PageUp",
  PAGE_DOWN: "PageDown",
  BACKSPACE: "Backspace",
  CLEAR: "Clear"
};
var CarouselGrid = dt(Box)`
  grid-template-columns: auto 1fr auto;
  grid-template-areas: 'startAction slides endAction';
`;
var CarouselSlides = dt(Flex)`
  grid-area: slides;
`;
var CarouselAction = dt(Box)`
  grid-area: ${({ $area }) => $area};

  &:focus svg path,
  &:hover svg path {
    fill: ${({ theme }) => theme.colors.neutral900};
  }
`;
var Carousel = React2.forwardRef(
  ({ actions: actions2, children, label, nextLabel, onNext, onPrevious, previousLabel, secondaryLabel, selectedSlide, ...props }, forwardedRef) => {
    const prevActionRef = React2.useRef(null);
    const nextActionRef = React2.useRef(null);
    const childrenArray = React2.Children.map(
      children,
      (node, index2) => React2.cloneElement(node, { selected: index2 === selectedSlide })
    );
    const handleKeyDown = (event) => {
      switch (event.key) {
        case KeyboardKeys.RIGHT: {
          event.preventDefault();
          if (nextActionRef == null ? void 0 : nextActionRef.current) {
            nextActionRef.current.focus();
          }
          if (onNext) {
            onNext();
          }
          break;
        }
        case KeyboardKeys.LEFT: {
          event.preventDefault();
          if (prevActionRef == null ? void 0 : prevActionRef.current) {
            prevActionRef.current.focus();
          }
          if (onPrevious) {
            onPrevious();
          }
          break;
        }
      }
    };
    return (0, import_jsx_runtime3.jsx)(Box, { ref: forwardedRef, ...props, onKeyDown: handleKeyDown, children: (0, import_jsx_runtime3.jsxs)(Box, { padding: 2, borderColor: "neutral200", hasRadius: true, background: "neutral100", children: [
      (0, import_jsx_runtime3.jsxs)(
        CarouselGrid,
        {
          tag: "section",
          "aria-roledescription": "carousel",
          "aria-label": label,
          display: "grid",
          position: "relative",
          children: [
            childrenArray && childrenArray.length > 1 && (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
              (0, import_jsx_runtime3.jsx)(CarouselAction, { tag: "button", onClick: onPrevious, $area: "startAction", ref: prevActionRef, type: "button", children: (0, import_jsx_runtime3.jsx)(AccessibleIcon, { label: previousLabel, children: (0, import_jsx_runtime3.jsx)(ForwardRef$4x, { width: "1.6rem", height: "1.6rem", fill: "neutral600" }) }) }),
              (0, import_jsx_runtime3.jsx)(CarouselAction, { tag: "button", onClick: onNext, $area: "endAction", ref: nextActionRef, type: "button", children: (0, import_jsx_runtime3.jsx)(AccessibleIcon, { label: nextLabel, children: (0, import_jsx_runtime3.jsx)(ForwardRef$4v, { width: "1.6rem", height: "1.6rem", fill: "neutral600" }) }) })
            ] }),
            (0, import_jsx_runtime3.jsx)(CarouselSlides, { "aria-live": "polite", paddingLeft: 2, paddingRight: 2, width: "100%", overflow: "hidden", children: childrenArray }),
            actions2
          ]
        }
      ),
      secondaryLabel && (0, import_jsx_runtime3.jsx)(Box, { paddingTop: 2, paddingLeft: 4, paddingRight: 4, children: (0, import_jsx_runtime3.jsx)(TooltipImpl, { label: secondaryLabel, children: (0, import_jsx_runtime3.jsx)(Flex, { justifyContent: "center", children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", textColor: "neutral600", ellipsis: true, children: secondaryLabel }) }) }) })
    ] }) });
  }
);
var sizes = {
  accordions: {
    S: `4.8rem`,
    M: `8.8rem`
  },
  button: {
    S: `3.2rem`,
    M: `3.6rem`,
    L: `4rem`
  }
};
var commonTheme = {
  sizes,
  zIndices: {
    navigation: 100,
    overlay: 300,
    modal: 310,
    dialog: 320,
    popover: 500,
    notification: 700,
    tooltip: 1e3
  },
  spaces: ["0px", "4px", "8px", "12px", "16px", "20px", "24px", "32px", "40px", "48px", "56px", "64px"],
  borderRadius: "4px",
  breakpoints: {
    initial: "@media(min-width: 0px)",
    small: "@media(min-width: 520px)",
    medium: "@media(min-width: 768px)",
    large: "@media(min-width: 1080px)"
  },
  fontSizes: [`1.1rem`, `1.2rem`, `1.4rem`, "1.6rem", `1.8rem`, `3.2rem`],
  lineHeights: [1.14, 1.22, 1.25, 1.33, 1.43, 1.45, 1.5],
  fontWeights: {
    regular: 400,
    semiBold: 500,
    bold: 600
  },
  transitions: TRANSITIONS,
  motion: {
    easings: EASINGS,
    timings: TIMINGS
  }
};
var lightColorTokenObject = {
  color: {
    alternative100: "#f6ecfc",
    alternative200: "#e0c1f4",
    alternative500: "#ac73e6",
    alternative600: "#9736e8",
    alternative700: "#8312d1",
    buttonNeutral0: "#ffffff",
    buttonPrimary500: "#7b79ff",
    buttonPrimary600: "#4945ff",
    danger100: "#fcecea",
    danger200: "#f5c0b8",
    danger500: "#ee5e52",
    danger600: "#d02b20",
    danger700: "#b72b1a",
    neutral0: "#ffffff",
    neutral100: "#f6f6f9",
    neutral1000: "#181826",
    neutral150: "#eaeaef",
    neutral200: "#dcdce4",
    neutral300: "#c0c0cf",
    neutral400: "#a5a5ba",
    neutral500: "#8e8ea9",
    neutral600: "#666687",
    neutral700: "#4a4a6a",
    neutral800: "#32324d",
    neutral900: "#212134",
    primary100: "#f0f0ff",
    primary200: "#d9d8ff",
    primary500: "#7b79ff",
    primary600: "#4945ff",
    primary700: "#271fe0",
    secondary100: "#eaf5ff",
    secondary200: "#b8e1ff",
    secondary500: "#66b7f1",
    secondary600: "#0c75af",
    secondary700: "#006096",
    success100: "#eafbe7",
    success200: "#c6f0c2",
    success500: "#5cb176",
    success600: "#328048",
    success700: "#2f6846",
    warning100: "#fdf4dc",
    warning200: "#fae7b9",
    warning500: "#f29d41",
    warning600: "#d9822f",
    warning700: "#be5d01"
  }
};
var lightShadowTokenObject = {
  shadow: {
    filterShadow: "0px 1px 4px rgba(33, 33, 52, 0.1)",
    focus: "inset 2px 0px 0px rgb(39, 31, 224), inset 0px 2px 0px rgb(39, 31, 224), inset -2px 0px 0px rgb(39, 31, 224), inset 0px -2px 0px rgb(39, 31, 224)",
    focusShadow: "0px 0px 6px rgba(76, 191, 255, 0.75)",
    popupShadow: "0px 2px 15px rgba(33, 33, 52, 0.1)",
    tableShadow: "0px 1px 4px rgba(33, 33, 52, 0.1)"
  }
};
var lightTheme = {
  colors: lightColorTokenObject.color,
  shadows: lightShadowTokenObject.shadow,
  ...commonTheme
};
var darkColorTokenObject = {
  color: {
    alternative100: "#181826",
    alternative200: "#4a4a6a",
    alternative500: "#ac73e6",
    alternative600: "#ac73e6",
    alternative700: "#e0c1f4",
    buttonNeutral0: "#ffffff",
    buttonPrimary500: "#7b79ff",
    buttonPrimary600: "#4945ff",
    danger100: "#181826",
    danger200: "#4a4a6a",
    danger500: "#ee5e52",
    danger600: "#ee5e52",
    danger700: "#ee5e52",
    neutral0: "#212134",
    neutral100: "#181826",
    neutral1000: "#ffffff",
    neutral150: "#32324d",
    neutral200: "#4a4a6a",
    neutral300: "#666687",
    neutral400: "#a5a5ba",
    neutral500: "#c0c0cf",
    neutral600: "#a5a5ba",
    neutral700: "#eaeaef",
    neutral800: "#ffffff",
    neutral900: "#ffffff",
    primary100: "#181826",
    primary200: "#4a4a6a",
    primary500: "#4945ff",
    primary600: "#7b79ff",
    primary700: "#7b79ff",
    secondary100: "#181826",
    secondary200: "#4a4a6a",
    secondary500: "#66b7f1",
    secondary600: "#66b7f1",
    secondary700: "#b8e1ff",
    success100: "#181826",
    success200: "#4a4a6a",
    success500: "#5cb176",
    success600: "#5cb176",
    success700: "#c6f0c2",
    warning100: "#181826",
    warning200: "#4a4a6a",
    warning500: "#f29d41",
    warning600: "#f29d41",
    warning700: "#fae7b9"
  }
};
var darkShadowTokenObject = {
  shadow: {
    filterShadow: "1px 1px 10px rgba(3, 3, 5, 0.35)",
    focus: "inset 2px 0px 0px rgb(39, 31, 224), inset 0px 2px 0px rgb(39, 31, 224), inset -2px 0px 0px rgb(39, 31, 224), inset 0px -2px 0px rgb(39, 31, 224)",
    focusShadow: "0px 0px 6px rgba(76, 191, 255, 0.75)",
    popupShadow: "1px 1px 10px rgba(3, 3, 5, 0.35)",
    tableShadow: "1px 1px 10px rgba(3, 3, 5, 0.2)"
  }
};
var darkTheme = {
  colors: darkColorTokenObject.color,
  shadows: darkShadowTokenObject.shadow,
  ...commonTheme
};
var inputFocusStyle = (rootElement = "&") => ({ theme, $hasError = false }) => lt`
    outline: none;
    box-shadow: none;
    transition-property: border-color, box-shadow, fill;
    transition-duration: 0.2s;

    ${rootElement}:focus-within {
      border: 1px solid ${$hasError ? theme.colors.danger600 : theme.colors.primary600};
      box-shadow: ${$hasError ? theme.colors.danger600 : theme.colors.primary600} 0px 0px 0px 2px;
    }
  `;
var [FieldProvider, useField] = createContext2("Field", {});
var Root$6 = React2.forwardRef(
  ({ children, name, error = false, hint, id, required = false, ...props }, ref) => {
    const generatedId = useId(id);
    const [labelNode, setLabelNode] = React2.useState();
    return (0, import_jsx_runtime3.jsx)(
      FieldProvider,
      {
        name,
        id: generatedId,
        error,
        hint,
        required,
        labelNode,
        setLabelNode,
        children: (0, import_jsx_runtime3.jsx)(Flex, { direction: "column", alignItems: "stretch", gap: 1, ref, ...props, children })
      }
    );
  }
);
var Label2 = React2.forwardRef(({ children, action, ...props }, ref) => {
  const { id, required, setLabelNode } = useField("Label");
  const composedRefs = useComposedRefs(ref, setLabelNode);
  if (!children) {
    return null;
  }
  return (0, import_jsx_runtime3.jsxs)(
    TypographyLabel,
    {
      ref: composedRefs,
      variant: "pi",
      textColor: "neutral800",
      fontWeight: "bold",
      ...props,
      id: `${id}-label`,
      htmlFor: id,
      tag: "label",
      ellipsis: true,
      children: [
        children,
        required && (0, import_jsx_runtime3.jsx)(Typography, { "aria-hidden": true, lineHeight: "1em", textColor: "danger600", children: "*" }),
        action && (0, import_jsx_runtime3.jsx)(LabelAction, { marginLeft: 1, children: action })
      ]
    }
  );
});
var TypographyLabel = dt(Typography)`
  display: flex;
`;
var LabelAction = dt(Flex)`
  line-height: 0;
  color: ${({ theme }) => theme.colors.neutral500};
`;
var Input$2 = React2.forwardRef(
  ({
    endAction,
    startAction,
    disabled = false,
    onChange,
    hasError: hasErrorProp,
    required: requiredProp,
    className,
    size = "M",
    ...props
  }, ref) => {
    const { id, error, hint, name, required } = useField("Input");
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (hint) {
      ariaDescription = `${id}-hint`;
    }
    const hasError = Boolean(error);
    const endActionRef = React2.useRef(null);
    const inputElementRef = React2.useRef(null);
    const inputRef = useComposedRefs(inputElementRef, ref);
    const handleChange = (e) => {
      if (!disabled && onChange) {
        onChange(e);
      }
    };
    React2.useLayoutEffect(() => {
      if (endActionRef.current && inputElementRef.current) {
        const endActionWidth = endActionRef.current.offsetWidth;
        const inputElement = inputElementRef.current;
        if (inputElement) {
          const inputPadding = endActionWidth + 8 + 16;
          inputElement.style.paddingRight = `${inputPadding}px`;
        }
      }
    }, [endAction]);
    return (0, import_jsx_runtime3.jsxs)(
      InputWrapper,
      {
        gap: 2,
        justifyContent: "space-between",
        $hasError: hasError || hasErrorProp,
        $disabled: disabled,
        $size: size,
        $hasLeftAction: Boolean(startAction),
        $hasRightAction: Boolean(endAction),
        className,
        children: [
          startAction,
          (0, import_jsx_runtime3.jsx)(
            InputElement,
            {
              id,
              name,
              ref: inputRef,
              $size: size,
              "aria-describedby": ariaDescription,
              "aria-invalid": hasError || hasErrorProp,
              "aria-disabled": disabled,
              disabled,
              "data-disabled": disabled ? "" : void 0,
              onChange: handleChange,
              "aria-required": required || requiredProp,
              $hasLeftAction: Boolean(startAction),
              $hasRightAction: Boolean(endAction),
              ...props
            }
          ),
          endAction && (0, import_jsx_runtime3.jsx)(EndAction, { ref: endActionRef, children: endAction })
        ]
      }
    );
  }
);
var InputElement = dt.input`
  border: none;
  border-radius: ${({ theme }) => theme.borderRadius};
  cursor: ${(props) => props["aria-disabled"] ? "not-allowed" : void 0};

  color: ${({ theme }) => theme.colors.neutral800};
  font-weight: 400;
  font-size: ${(props) => props.theme.fontSizes[2]};
  line-height: 2.2rem;
  display: block;
  width: 100%;
  background: inherit;

  ::placeholder {
    color: ${({ theme }) => theme.colors.neutral500};
    opacity: 1;
  }

  &[aria-disabled='true'] {
    color: inherit;
  }

  //focus managed by InputWrapper
  &:focus {
    outline: none;
    box-shadow: none;
  }

  ${(props) => {
  switch (props.$size) {
    case "S":
      return lt`
          padding-inline-start: ${props.$hasLeftAction ? 0 : props.theme.spaces[4]};
          padding-inline-end: ${props.$hasRightAction ? 0 : props.theme.spaces[4]};
          padding-block: ${props.theme.spaces[1]};
        `;
    default:
      return lt`
          padding-inline-start: ${props.$hasLeftAction ? 0 : props.theme.spaces[4]};
          padding-inline-end: ${props.$hasRightAction ? 0 : props.theme.spaces[4]};
          padding-block: ${props.theme.spaces[2]};
        `;
  }
}}
`;
var EndAction = dt(Flex)`
  position: absolute;
  right: ${({ theme }) => theme.spaces[4]};
  top: 50%;
  transform: translateY(-50%);
`;
var InputWrapper = dt(Flex)`
  border: 1px solid ${({ theme, $hasError }) => $hasError ? theme.colors.danger600 : theme.colors.neutral200};
  border-radius: ${({ theme }) => theme.borderRadius};
  background: ${({ theme }) => theme.colors.neutral0};
  padding-inline-start: ${({ $hasLeftAction, theme }) => $hasLeftAction ? theme.spaces[4] : 0};
  position: relative;

  ${inputFocusStyle()}
  ${({ theme, $disabled }) => $disabled ? lt`
          color: ${theme.colors.neutral600};
          background: ${theme.colors.neutral150};
        ` : void 0};
`;
var Hint = () => {
  const { id, hint, error } = useField("Hint");
  if (!hint || error) {
    return null;
  }
  return (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", tag: "p", id: `${id}-hint`, textColor: "neutral600", children: hint });
};
var Error$1 = () => {
  const { id, error } = useField("Error");
  if (!error || typeof error !== "string") {
    return null;
  }
  return (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", tag: "p", id: `${id}-error`, textColor: "danger600", "data-strapi-field-error": true, children: error });
};
var Action$1 = React2.forwardRef(({ label, children, ...props }, ref) => (0, import_jsx_runtime3.jsx)(
  FieldActionWrapper,
  {
    justifyContent: "unset",
    background: "transparent",
    borderStyle: "none",
    ...props,
    type: "button",
    tag: "button",
    ref,
    children: (0, import_jsx_runtime3.jsx)(AccessibleIcon, { label, children })
  }
));
var FieldActionWrapper = dt(Flex)`
  font-size: 1.6rem;
  padding: 0;
`;
var Field = Object.freeze(Object.defineProperty({
  __proto__: null,
  Action: Action$1,
  Error: Error$1,
  Hint,
  Input: Input$2,
  Label: Label2,
  Root: Root$6,
  useField
}, Symbol.toStringTag, { value: "Module" }));
var CarouselInput = React2.forwardRef(
  ({
    actions: actions2,
    children,
    error,
    hint,
    label,
    labelAction,
    nextLabel,
    onNext,
    onPrevious,
    previousLabel,
    required,
    secondaryLabel,
    selectedSlide,
    id,
    ...props
  }, forwardedRef) => {
    const generatedId = useId(id);
    return (0, import_jsx_runtime3.jsx)(Root$6, { hint, error, id: generatedId, required, children: (0, import_jsx_runtime3.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 1, children: [
      label && (0, import_jsx_runtime3.jsx)(Label2, { action: labelAction, children: label }),
      (0, import_jsx_runtime3.jsx)(
        Carousel,
        {
          ref: forwardedRef,
          actions: actions2,
          label,
          nextLabel,
          onNext,
          onPrevious,
          previousLabel,
          secondaryLabel,
          selectedSlide,
          id: generatedId,
          ...props,
          children
        }
      ),
      (0, import_jsx_runtime3.jsx)(Hint, {}),
      (0, import_jsx_runtime3.jsx)(Error$1, {})
    ] }) });
  }
);
var StyledImage = dt(Box)`
  ${ellipsis}
`;
var loaderSvg = "data:image/svg+xml,%3csvg%20width='63'%20height='63'%20viewBox='0%200%2063%2063'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M42.5563%2011.9816C39.484%2010.3071%2035.8575%209.29097%2032.3354%209.13521C28.6443%208.92888%2024.8295%209.72318%2021.3336%2011.4129C20.9123%2011.5901%2020.5376%2011.8101%2020.1722%2012.0249L20.0108%2012.1179C19.8774%2012.1951%2019.7441%2012.2724%2019.608%2012.3536C19.3253%2012.5146%2019.0492%2012.6744%2018.7544%2012.8792C18.5463%2013.0329%2018.3395%2013.1759%2018.1301%2013.323C17.5658%2013.7208%2016.9868%2014.1317%2016.4983%2014.5979C14.8476%2015.9524%2013.5571%2017.6075%2012.6071%2018.9214C10.4365%2022.1566%209.08622%2025.9567%208.80702%2029.6143L8.7764%2030.1588C8.73328%2030.9196%208.68476%2031.7057%208.75353%2032.4555C8.76648%2032.6084%208.7661%2032.7638%208.77506%2032.914C8.78895%2033.229%208.80152%2033.5373%208.846%2033.8672L9.07396%2035.4221C9.09756%2035.5764%209.1198%2035.7413%209.1633%2035.9263L9.65919%2037.9272L10.138%2039.2823C10.2729%2039.6673%2010.4158%2040.0751%2010.6%2040.43C12.0292%2043.637%2014.1425%2046.4578%2016.7063%2048.585C19.0508%2050.5296%2021.824%2052.0023%2024.7491%2052.8452L26.2371%2053.2376C26.3781%2053.2693%2026.4926%2053.2889%2026.6031%2053.3058L26.7775%2053.3311C27.0052%2053.3636%2027.2195%2053.3986%2027.4445%2053.435C27.8598%2053.5076%2028.2672%2053.5748%2028.7079%2053.6183L30.5641%2053.7229C30.9516%2053.7249%2031.3352%2053.7068%2031.7081%2053.6874C31.9039%2053.681%2032.0984%2053.6681%2032.3288%2053.662C34.5253%2053.4772%2036.5106%2053.0634%2038.0516%2052.4652C38.1769%2052.4171%2038.3008%2052.3796%2038.4234%2052.3355C38.6727%2052.2499%2038.9259%2052.167%2039.1432%2052.0599L40.8591%2051.2626L42.5702%2050.266C42.9009%2050.0682%2043.0205%2049.6414%2042.8282%2049.2984C42.632%2048.9526%2042.2034%2048.8308%2041.8634%2049.0166L40.1792%2049.9218L38.4995%2050.6224C38.3169%2050.6953%2038.121%2050.7534%2037.9224%2050.8155C37.7838%2050.8489%2037.6518%2050.8983%2037.5012%2050.9408C36.0711%2051.435%2034.2445%2051.7425%2032.244%2051.8346C32.0442%2051.8383%2031.8471%2051.8379%2031.654%2051.8403C31.3051%2051.8414%2030.9602%2051.8451%2030.6392%2051.8305L28.9177%2051.6725C28.5476%2051.619%2028.1695%2051.5427%2027.7848%2051.4678C27.5639%2051.4167%2027.3376%2051.3737%2027.1299%2051.3374L26.9529%2051.2987C26.8704%2051.2834%2026.7772%2051.2667%2026.7333%2051.2543L25.3466%2050.8322C22.7651%2049.9789%2020.33%2048.5729%2018.2942%2046.7557C16.1056%2044.7951%2014.3339%2042.2335%2013.1742%2039.3582C12.0276%2036.6013%2011.5988%2033.2792%2011.9716%2030.0076C12.3145%2027.0213%2013.3948%2024.1635%2015.1858%2021.5083C15.3034%2021.3339%2015.421%2021.1596%2015.5212%2021.0196C16.4309%2019.8688%2017.5408%2018.5589%2018.9483%2017.496C19.3367%2017.1525%2019.7862%2016.856%2020.2611%2016.5478C20.4878%2016.4009%2020.7079%2016.2553%2020.8907%2016.1306C21.0974%2016.0048%2021.3188%2015.8831%2021.5348%2015.7694C21.6761%2015.6975%2021.8162%2015.619%2021.9388%2015.5576L22.1002%2015.4646C22.4002%2015.3037%2022.6749%2015.1546%2022.9908%2015.039L24.1186%2014.5715C24.3399%2014.4844%2024.5718%2014.4159%2024.7997%2014.3447C24.953%2014.2982%2025.0982%2014.2635%2025.2635%2014.2078C25.786%2014.0182%2026.3283%2013.9112%2026.9105%2013.7965C27.117%2013.7571%2027.3302%2013.7163%2027.5608%2013.6585C27.7553%2013.611%2027.9737%2013.5969%2028.2082%2013.5762C28.364%2013.5603%2028.5172%2013.5483%2028.6318%2013.5333C28.7876%2013.5173%2028.9342%2013.5066%2029.0927%2013.4867C29.3285%2013.4555%2029.5456%2013.4347%2029.7494%2013.4337C30.0237%2013.44%2030.2994%2013.4357%2030.5777%2013.4274C31.0811%2013.421%2031.5579%2013.4197%2032.0318%2013.4914C34.9664%2013.7352%2037.7144%2014.6085%2040.2052%2016.0868C42.3489%2017.3655%2044.2716%2019.1525%2045.7607%2021.264C47.0255%2023.0628%2047.9756%2025.0528%2048.4928%2027.0393C48.572%2027.3176%2048.6299%2027.5931%2048.6839%2027.8659C48.7154%2028.0428%2048.7563%2028.2145%2048.7892%2028.3636C48.8037%2028.4541%2048.8208%2028.5406%2048.8445%2028.6258C48.8749%2028.7443%2048.8986%2028.864%2048.9116%2028.9651L48.9793%2029.6047C48.9922%2029.7748%2049.0132%2029.9331%2049.0301%2030.0887C49.0668%2030.3268%2049.0889%2030.5608%2049.0964%2030.7561L49.1083%2031.9001C49.1312%2032.3307%2049.089%2032.7116%2049.0522%2033.0673C49.0384%2033.2598%2049.0126%2033.4443%2049.0123%2033.5824C48.9961%2033.6926%2048.9918%2033.7935%2048.9836%2033.8917C48.9753%2034.0072%2048.9724%2034.1148%2048.9414%2034.2554L48.5449%2036.3059C48.3134%2037.8623%2049.3793%2039.3365%2050.9488%2039.5822C52.0417%2039.7601%2053.1536%2039.2819%2053.7711%2038.3664C54.0063%2038.0176%2054.1604%2037.6257%2054.2227%2037.2064L54.5217%2035.2574C54.5514%2035.0756%2054.572%2034.83%2054.5846%2034.5791L54.6028%2034.2338C54.6098%2034.0598%2054.6223%2033.8779%2054.6347%2033.6788C54.6734%2033.1052%2054.7163%2032.4479%2054.6619%2031.8058L54.5867%2030.4289C54.5622%2030.0952%2054.5097%2029.76%2054.4559%2029.4181C54.431%2029.2572%2054.4048%2029.0896%2054.3826%2028.9074L54.2687%2028.104C54.2332%2027.9244%2054.1804%2027.7273%2054.1329%2027.5396L54.0643%2027.2454C54.0195%2027.071%2053.9773%2026.8927%2053.9338%2026.7076C53.8455%2026.3309%2053.7479%2025.9422%2053.613%2025.5571C52.84%2023.0292%2051.5383%2020.5194%2049.8338%2018.2799C47.8544%2015.682%2045.3333%2013.5087%2042.5563%2011.9816Z'%20fill='%234945FF'/%3e%3c/svg%3e";
var Loader = React2.forwardRef(({ children, small = false, ...props }, ref) => {
  return (0, import_jsx_runtime3.jsxs)("div", { role: "alert", "aria-live": "assertive", ref, ...props, children: [
    (0, import_jsx_runtime3.jsx)(VisuallyHidden, { children }),
    (0, import_jsx_runtime3.jsx)(LoaderImg, { src: loaderSvg, "aria-hidden": true, $small: small })
  ] });
});
var rotation$1 = mt`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
`;
var LoaderImg = dt.img`
  animation: ${rotation$1} 1s infinite linear;
  will-change: transform;
  ${({ $small, theme }) => $small && `width: ${theme.spaces[6]}; height: ${theme.spaces[6]};`}
`;
var Combobox2 = React2.forwardRef(
  ({
    allowCustomValue,
    autocomplete,
    children,
    className,
    clearLabel = "clear",
    creatable = false,
    createMessage = (value2) => `Create "${value2}"`,
    defaultFilterValue,
    defaultTextValue,
    defaultOpen = false,
    open,
    onOpenChange,
    disabled = false,
    hasError: hasErrorProp,
    id: idProp,
    filterValue,
    hasMoreItems = false,
    isPrintableCharacter: isPrintableCharacter2,
    loading = false,
    loadingMessage = "Loading content...",
    name: nameProp,
    noOptionsMessage = () => "No results found",
    onChange,
    onClear,
    onCreateOption,
    onFilterValueChange,
    onInputChange,
    onTextValueChange,
    onLoadMore,
    placeholder = "Select or enter a value",
    required: requiredProp = false,
    size = "M",
    startIcon,
    textValue,
    value,
    ...restProps
  }, forwardedRef) => {
    const [internalIsOpen, setInternalIsOpen] = useControllableState$1({
      prop: open,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    const [internalTextValue, setInternalTextValue] = useControllableState$1({
      prop: textValue,
      defaultProp: allowCustomValue && !defaultTextValue ? value : defaultTextValue,
      onChange: onTextValueChange
    });
    const [internalFilterValue, setInternalFilterValue] = useControllableState$1({
      prop: filterValue,
      defaultProp: defaultFilterValue,
      onChange: onFilterValueChange
    });
    const viewportRef = React2.useRef(null);
    const triggerRef = React2.useRef(null);
    const composedTriggerRefs = useComposedRefs(triggerRef, forwardedRef);
    const clearRef = React2.useRef(null);
    const handleClearClick = (e) => {
      if (onClear && !disabled) {
        setInternalTextValue("");
        setInternalFilterValue("");
        onClear(e);
        triggerRef.current.focus();
      }
    };
    const handleOpenChange = (open2) => {
      setInternalIsOpen(open2);
    };
    const handleTextValueChange = (textValue2) => {
      setInternalTextValue(textValue2);
    };
    const handleFilterValueChange = (filterValue2) => {
      setInternalFilterValue(filterValue2);
    };
    const handleInputChange = (e) => {
      if (onInputChange) {
        onInputChange(e);
      }
    };
    const handleChange = (value2) => {
      if (onChange) {
        onChange(value2);
      }
    };
    const handleReachEnd = (entry) => {
      if (onLoadMore && hasMoreItems && !loading) {
        onLoadMore(entry);
      }
    };
    const handleCreateItemClick = () => {
      if (onCreateOption && internalTextValue) {
        onCreateOption(internalTextValue);
      }
    };
    const generatedIntersectionId = useId();
    const intersectionId = `intersection-${stripReactIdOfColon(generatedIntersectionId)}`;
    useIntersection(viewportRef, handleReachEnd, {
      selectorToWatch: `#${intersectionId}`,
      /**
       * We need to know when the select is open because only then will viewportRef
       * not be null. Because it uses a portal that (sensibly) is not mounted 24/7.
       */
      skipWhen: !internalIsOpen
    });
    const { error, ...field } = useField("Combobox");
    const hasError = Boolean(error) || hasErrorProp;
    const id = field.id ?? idProp;
    const name = field.name ?? nameProp;
    const required = field.required || requiredProp;
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (field.hint) {
      ariaDescription = `${id}-hint`;
    }
    return (0, import_jsx_runtime3.jsxs)(
      Combobox$1.Root,
      {
        autocomplete: autocomplete || (creatable ? "list" : "both"),
        onOpenChange: handleOpenChange,
        open: internalIsOpen,
        onTextValueChange: handleTextValueChange,
        textValue: internalTextValue,
        allowCustomValue: creatable || allowCustomValue,
        disabled,
        required,
        value,
        onValueChange: handleChange,
        filterValue: internalFilterValue,
        onFilterValueChange: handleFilterValueChange,
        isPrintableCharacter: isPrintableCharacter2,
        children: [
          (0, import_jsx_runtime3.jsxs)(Trigger$5, { $hasError: hasError, $size: size, className, children: [
            (0, import_jsx_runtime3.jsxs)(Flex, { flex: "1", tag: "span", gap: 3, children: [
              startIcon ? (0, import_jsx_runtime3.jsx)(Flex, { flex: "0 0 1.6rem", tag: "span", "aria-hidden": true, children: startIcon }) : null,
              (0, import_jsx_runtime3.jsx)(
                TextInput$1,
                {
                  placeholder,
                  id,
                  "aria-invalid": Boolean(error),
                  onChange: handleInputChange,
                  ref: composedTriggerRefs,
                  name,
                  "aria-describedby": ariaDescription,
                  ...restProps
                }
              )
            ] }),
            (0, import_jsx_runtime3.jsxs)(Flex, { tag: "span", gap: 3, children: [
              internalTextValue && onClear ? (0, import_jsx_runtime3.jsx)(
                IconBox$3,
                {
                  tag: "button",
                  hasRadius: true,
                  background: "transparent",
                  type: "button",
                  padding: 0,
                  color: "neutral600",
                  borderStyle: "none",
                  onClick: handleClearClick,
                  "aria-disabled": disabled,
                  "aria-label": clearLabel,
                  title: clearLabel,
                  ref: clearRef,
                  children: (0, import_jsx_runtime3.jsx)(ForwardRef$45, {})
                }
              ) : null,
              (0, import_jsx_runtime3.jsx)(DownIcon$1, { children: (0, import_jsx_runtime3.jsx)(ForwardRef$4T, { fill: "neutral500" }) })
            ] })
          ] }),
          (0, import_jsx_runtime3.jsx)(Combobox$1.Portal, { children: (0, import_jsx_runtime3.jsx)(Content$5, { sideOffset: 4, children: (0, import_jsx_runtime3.jsxs)(Viewport$12, { ref: viewportRef, children: [
            children,
            creatable ? (0, import_jsx_runtime3.jsx)(
              Combobox$1.CreateItem,
              {
                onPointerUp: handleCreateItemClick,
                onClick: handleCreateItemClick,
                asChild: true,
                children: (0, import_jsx_runtime3.jsx)(OptionBox, { children: (0, import_jsx_runtime3.jsx)(Typography, { children: createMessage(internalTextValue ?? "") }) })
              }
            ) : null,
            !creatable && !loading ? (0, import_jsx_runtime3.jsx)(Combobox$1.NoValueFound, { asChild: true, children: (0, import_jsx_runtime3.jsx)(OptionBox, { $hasHover: false, children: (0, import_jsx_runtime3.jsx)(Typography, { children: noOptionsMessage(internalTextValue ?? "") }) }) }) : null,
            loading ? (0, import_jsx_runtime3.jsx)(Flex, { justifyContent: "center", alignItems: "center", paddingTop: 2, paddingBottom: 2, children: (0, import_jsx_runtime3.jsx)(Loader, { small: true, children: loadingMessage }) }) : null,
            (0, import_jsx_runtime3.jsx)(Box, { id: intersectionId, width: "100%", height: "1px" })
          ] }) }) })
        ]
      }
    );
  }
);
var IconBox$3 = dt(Box)`
  padding: 0;
`;
var Trigger$5 = dt(Combobox$1.Trigger)`
  position: relative;
  border: 1px solid ${({ theme, $hasError }) => $hasError ? theme.colors.danger600 : theme.colors.neutral200};
  border-radius: ${({ theme }) => theme.borderRadius};
  background: ${({ theme }) => theme.colors.neutral0};
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: ${({ theme }) => theme.spaces[4]};

  ${(props) => {
  switch (props.$size) {
    case "S":
      return lt`
          padding-inline-start: ${({ theme }) => theme.spaces[4]};
          padding-inline-end: ${({ theme }) => theme.spaces[3]};
          padding-block: ${({ theme }) => theme.spaces[1]};
        `;
    default:
      return lt`
          padding-inline-start: ${({ theme }) => theme.spaces[4]};
          padding-inline-end: ${({ theme }) => theme.spaces[3]};
          padding-block: ${({ theme }) => theme.spaces[2]};
        `;
  }
}}

  &[data-disabled] {
    color: ${({ theme }) => theme.colors.neutral600};
    background: ${({ theme }) => theme.colors.neutral150};
    cursor: not-allowed;
  }

  /* Required to ensure the below inputFocusStyles are adhered too */
  &:focus-visible {
    outline: none;
  }

  ${({ theme, $hasError }) => inputFocusStyle()({ theme, $hasError })};
`;
var TextInput$1 = dt(Combobox$1.TextInput)`
  width: 100%;
  font-size: 1.4rem;
  line-height: 2.2rem;
  color: ${({ theme }) => theme.colors.neutral800};
  padding: 0;
  border: none;
  background-color: transparent;

  &:focus-visible {
    outline: none;
  }

  &[aria-disabled='true'] {
    cursor: inherit;
  }
`;
var DownIcon$1 = dt(Combobox$1.Icon)`
  border: none;
  background: transparent;
  padding: 0;
  color: ${({ theme }) => theme.colors.neutral600};
  display: flex;

  &[aria-disabled='true'] {
    cursor: inherit;
  }
`;
var Content$5 = dt(Combobox$1.Content)`
  background: ${({ theme }) => theme.colors.neutral0};
  box-shadow: ${({ theme }) => theme.shadows.filterShadow};
  border: 1px solid ${({ theme }) => theme.colors.neutral150};
  border-radius: ${({ theme }) => theme.borderRadius};
  width: var(--radix-combobox-trigger-width);
  /* This is from the design-system figma file. */
  max-height: 15rem;
  z-index: ${({ theme }) => theme.zIndices.popover};

  @media (prefers-reduced-motion: no-preference) {
    animation-duration: ${(props) => props.theme.motion.timings["200"]};

    /* The select can't animate out yet, watch https://github.com/radix-ui/primitives/issues/1893, or take a look and solve it yourself. */
    &[data-state='open'] {
      animation-timing-function: ${(props) => props.theme.motion.easings.authenticMotion};

      &[data-side='top'] {
        animation-name: ${ANIMATIONS.slideUpIn};
      }

      &[data-side='bottom'] {
        animation-name: ${ANIMATIONS.slideDownIn};
      }
    }
  }
`;
var Viewport$12 = dt(Combobox$1.Viewport)`
  padding: ${({ theme }) => theme.spaces[1]};
`;
var Option = React2.forwardRef(
  ({ children, value, disabled, textValue, ...props }, ref) => {
    return (0, import_jsx_runtime3.jsx)(Combobox$1.ComboboxItem, { asChild: true, value, disabled, textValue, children: (0, import_jsx_runtime3.jsx)(OptionBox, { ref, ...props, children: (0, import_jsx_runtime3.jsx)(Combobox$1.ItemText, { asChild: true, children: (0, import_jsx_runtime3.jsx)(Typography, { children }) }) }) });
  }
);
var OptionBox = dt.div`
  width: 100%;
  border: none;
  text-align: left;
  outline-offset: -3px;
  padding: ${({ theme }) => theme.spaces[2]} ${({ theme }) => theme.spaces[4]};
  background-color: ${({ theme }) => theme.colors.neutral0};
  border-radius: ${({ theme }) => theme.borderRadius};
  user-select: none;

  &[data-state='checked'] {
    background-color: ${({ theme }) => theme.colors.primary100};
    color: ${({ theme }) => theme.colors.primary600};
    font-weight: bold;
  }

  &:hover,
  &[data-highlighted] {
    outline: none;
    background-color: ${({ theme, $hasHover = true }) => $hasHover ? theme.colors.primary100 : theme.colors.neutral0};
  }

  &[data-highlighted] {
    color: ${({ theme }) => theme.colors.primary600};
    font-weight: bold;
  }
`;
var Root$5 = $905f4ae918aab1aa$export$be92b6f5f03c0fe9;
var Trigger$4 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($905f4ae918aab1aa$export$41fb9f06171c75f4, { ...props, asChild: true, ref: forwardedRef });
});
var Content$4 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsxs)($905f4ae918aab1aa$export$602eac185826482c, { children: [
    (0, import_jsx_runtime3.jsx)(Overlay$1, {}),
    (0, import_jsx_runtime3.jsx)(ContentImpl$1, { ref: forwardedRef, ...props })
  ] });
});
var Overlay$1 = dt($905f4ae918aab1aa$export$c6fdb837b070b4ff)`
  background-color: ${(props) => props.theme.colors.neutral800};
  position: fixed;
  inset: 0;
  z-index: ${(props) => props.theme.zIndices.overlay};
  opacity: 0.2;

  @media (prefers-reduced-motion: no-preference) {
    animation: ${ANIMATIONS.overlayFadeIn} ${(props) => props.theme.motion.timings["200"]}
      ${(props) => props.theme.motion.easings.authenticMotion};
  }
`;
var ContentImpl$1 = dt($905f4ae918aab1aa$export$7c6e2c02157bb7d2)`
  max-width: 42rem;
  height: min-content;
  width: 100%;
  overflow: hidden;
  margin: 0 auto;
  display: flex;
  flex-direction: column;

  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  border-radius: ${(props) => props.theme.borderRadius};
  background-color: ${(props) => props.theme.colors.neutral0};
  box-shadow: ${(props) => props.theme.shadows.popupShadow};
  z-index: ${(props) => props.theme.zIndices.modal};

  @media (prefers-reduced-motion: no-preference) {
    &[data-state='open'] {
      animation-duration: ${(props) => props.theme.motion.timings["200"]};
      animation-timing-function: ${(props) => props.theme.motion.easings.authenticMotion};
      animation-name: ${ANIMATIONS.modalPopIn};
    }

    &[data-state='closed'] {
      animation-duration: ${(props) => props.theme.motion.timings["120"]};
      animation-timing-function: ${(props) => props.theme.motion.easings.easeOutQuad};
      animation-name: ${ANIMATIONS.modalPopOut};
    }
  }
`;
var Header$1 = React2.forwardRef(({ children, ...restProps }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($905f4ae918aab1aa$export$f99233281efd08a0, { asChild: true, children: (0, import_jsx_runtime3.jsx)(Title$1, { tag: "h2", variant: "beta", ref: forwardedRef, padding: 6, fontWeight: "bold", ...restProps, children }) });
});
var Title$1 = dt(Typography)`
  display: flex;
  justify-content: center;
  border-bottom: solid 1px ${(props) => props.theme.colors.neutral150};
`;
var Body$1 = React2.forwardRef(({ children, icon, ...restProps }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(
    Flex,
    {
      ref: forwardedRef,
      gap: 2,
      direction: "column",
      paddingTop: 8,
      paddingBottom: 8,
      paddingLeft: 6,
      paddingRight: 6,
      ...restProps,
      children: typeof children === "string" ? (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
        icon ? React2.cloneElement(icon, {
          width: 24,
          height: 24
        }) : null,
        (0, import_jsx_runtime3.jsx)(Description, { children })
      ] }) : children
    }
  );
});
var Description = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($905f4ae918aab1aa$export$393edc798c47379d, { asChild: true, children: (0, import_jsx_runtime3.jsx)(Typography, { ref: forwardedRef, variant: "omega", ...props, tag: "p" }) });
});
var Footer$1 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(Foot$1, { ref: forwardedRef, gap: 2, padding: 4, justifyContent: "space-between", ...props, tag: "footer" });
});
var Foot$1 = dt(Flex)`
  border-top: solid 1px ${(props) => props.theme.colors.neutral150};
  flex: 1;
`;
var Cancel = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($905f4ae918aab1aa$export$848c9b7ead0df967, { ...props, asChild: true, ref: forwardedRef });
});
var Action = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($905f4ae918aab1aa$export$e19cd5f9376f8cee, { ...props, asChild: true, ref: forwardedRef });
});
var Dialog = Object.freeze(Object.defineProperty({
  __proto__: null,
  Action,
  Body: Body$1,
  Cancel,
  Content: Content$4,
  Description,
  Footer: Footer$1,
  Header: Header$1,
  Root: Root$5,
  Trigger: Trigger$4
}, Symbol.toStringTag, { value: "Module" }));
function useDateFormatter(locale, options) {
  const lastOptions = React2.useRef(null);
  if (options && lastOptions.current && isEqual(options, lastOptions.current)) {
    options = lastOptions.current;
  }
  lastOptions.current = options ?? null;
  return React2.useMemo(() => new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options), [locale, options]);
}
function isEqual(a, b) {
  if (a === b) {
    return true;
  }
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false;
  }
  for (const key of aKeys) {
    if (b[key] !== a[key]) {
      return false;
    }
  }
  return true;
}
var GlobalStyle = ft`
${lt`
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
  }

  html {
    /* Sets 1rem === 10px */
    font-size: 62.5%;
  }

  body {
    height: 100%;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans',
      'Helvetica Neue', sans-serif;
    color: ${({ theme }) => theme.colors.neutral800};
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
  }

  img,
  picture,
  video,
  canvas {
    display: block;
    max-width: 100%;
  }

  input,
  button,
  textarea,
  select {
    padding: 0;
    font: inherit;
  }

  button {
    border: unset;
    background: unset;
    padding: unset;
    margin: unset;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
    font: unset;
  }

  #root {
    isolation: isolate;
  }

  ol,
  ul {
    list-style: none;
    padding: unset;
    margin: unset;
  }

  table {
    border-collapse: collapse;
    border-spacing: 0;
  }

  *:focus-visible {
    outline: 2px solid ${({ theme }) => theme.colors.primary600};
    outline-offset: 2px;
  }

  /* Focusing the button with a mouse, touch, or stylus will show a subtle drop shadow. */
  *:focus:not(:focus-visible) {
    outline: none;
  }

  .lock-body-scroll {
    height: 100vh;
    overflow-y: hidden;
  }
`}
`;
var DEFAULT_LOCALE = "en-EN";
var getDefaultLocale = () => {
  if (typeof navigator === "undefined") {
    return DEFAULT_LOCALE;
  }
  if (navigator.language) {
    return navigator.language;
  }
  return DEFAULT_LOCALE;
};
var [Provider, useDesignSystem] = createContext2("StrapiDesignSystem", {
  locale: getDefaultLocale()
});
var DismissibleLayer = $5cb92bef7577960e$export$be92b6f5f03c0fe9;
var Portal$12 = React2.forwardRef(
  ({ container = ((_a) => (_a = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : _a.body)(), ...portalProps }, forwardedRef) => {
    return container ? (0, import_react_dom2.createPortal)((0, import_jsx_runtime3.jsx)(Box, { ref: forwardedRef, ...portalProps }), container) : null;
  }
);
Portal$12.displayName = "Portal";
var ScrollAreaImpl$1 = React2.forwardRef(
  ({ children, viewportRef, ...restProps }, forwardedRef) => {
    return (0, import_jsx_runtime3.jsxs)(ScrollAreaRoot, { ref: forwardedRef, ...restProps, children: [
      (0, import_jsx_runtime3.jsx)(ScrollAreaViewport, { ref: viewportRef, children }),
      (0, import_jsx_runtime3.jsx)(Scrollbar, { orientation: "vertical", children: (0, import_jsx_runtime3.jsx)(Thumb, {}) }),
      (0, import_jsx_runtime3.jsx)(Scrollbar, { orientation: "horizontal", children: (0, import_jsx_runtime3.jsx)(Thumb, {}) })
    ] });
  }
);
var ScrollAreaRoot = dt($57acba87d6e25586$export$be92b6f5f03c0fe9)`
  width: 100%;
  height: 100%;
  overflow: hidden;
  display: flex;
`;
var ScrollAreaViewport = dt($57acba87d6e25586$export$d5c6c08dc2d3ca7)`
  min-width: 100%;
  padding-inline: 4px;
`;
var Scrollbar = dt($57acba87d6e25586$export$9a4e88b92edfce6b)`
  display: flex;
  /* ensures no selection */
  user-select: none;
  /* disable browser handling of all panning and zooming gestures on touch devices */
  touch-action: none;

  &[data-orientation='vertical'] {
    width: 0.4rem;
  }

  &[data-orientation='horizontal'] {
    flex-direction: column;
    height: 0.4rem;
  }
`;
var Thumb = dt($57acba87d6e25586$export$6521433ed15a34db)`
  position: relative;
  flex: 1;
  background-color: ${(props) => props.theme.colors.neutral150};
  border-radius: var(--scrollbar-size);

  /* increase target size for touch devices https://www.w3.org/WAI/WCAG21/Understanding/target-size.html */
  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    min-width: 44px;
    min-height: 44px;
  }
`;
var SelectTrigger2 = React2.forwardRef(
  ({ onClear, clearLabel = "Clear", startIcon, disabled, hasError, children, id, size = "M", withTags, ...restProps }, ref) => {
    const triggerRef = React2.useRef(null);
    const handleClearClick = (e) => {
      if (onClear && !disabled) {
        onClear(e);
        triggerRef.current.focus();
      }
    };
    const { labelNode } = useField("SelectTrigger");
    const composedRefs = useComposedRefs(triggerRef, ref);
    return (0, import_jsx_runtime3.jsx)(Select$1.Trigger, { asChild: true, children: (0, import_jsx_runtime3.jsxs)(
      StyledTrigger,
      {
        "aria-disabled": disabled,
        $hasError: hasError,
        ref: composedRefs,
        alignItems: "center",
        justifyContent: "space-between",
        position: "relative",
        overflow: "hidden",
        hasRadius: true,
        background: disabled ? "neutral150" : "neutral0",
        gap: 4,
        cursor: "default",
        "aria-labelledby": labelNode ? `${id}-label` : void 0,
        $size: size,
        $withTags: withTags,
        ...restProps,
        children: [
          (0, import_jsx_runtime3.jsxs)(Flex, { flex: "1", tag: "span", gap: 3, children: [
            startIcon && (0, import_jsx_runtime3.jsx)(Flex, { tag: "span", "aria-hidden": true, children: startIcon }),
            children
          ] }),
          (0, import_jsx_runtime3.jsxs)(Flex, { tag: "span", gap: 3, children: [
            onClear ? (0, import_jsx_runtime3.jsx)(
              IconBox$2,
              {
                tag: "button",
                hasRadius: true,
                background: "transparent",
                role: "button",
                tabIndex: 0,
                onClick: handleClearClick,
                "aria-disabled": disabled,
                "aria-label": clearLabel,
                title: clearLabel,
                cursor: "pointer",
                children: (0, import_jsx_runtime3.jsx)(ForwardRef$45, {})
              }
            ) : null,
            (0, import_jsx_runtime3.jsx)(DownIcon, { children: (0, import_jsx_runtime3.jsx)(ForwardRef$4T, {}) })
          ] })
        ]
      }
    ) });
  }
);
var IconBox$2 = dt(Box)`
  border: none;
  display: flex;

  svg {
    height: 1.1rem;
    width: 1.1rem;
  }

  svg path {
    fill: ${({ theme }) => theme.colors.neutral500};
  }
`;
var StyledTrigger = dt(Flex)`
  border: 1px solid ${({ theme, $hasError }) => $hasError ? theme.colors.danger600 : theme.colors.neutral200};
  ${(props) => {
  switch (props.$size) {
    case "S":
      return lt`
          padding-block: ${props.theme.spaces[1]};
          padding-inline-start: ${props.$withTags ? props.theme.spaces[1] : props.theme.spaces[4]};
          padding-inline-end: ${props.theme.spaces[3]};
        `;
    default:
      return lt`
          padding-block: ${props.$withTags ? "0.3rem" : props.theme.spaces[2]};
          padding-inline-start: ${props.$withTags ? props.theme.spaces[1] : props.theme.spaces[4]};
          padding-inline-end: ${props.theme.spaces[3]};
        `;
  }
}}
  cursor: pointer;

  &[aria-disabled='true'] {
    color: ${(props) => props.theme.colors.neutral500};
  }

  /* Required to ensure the below inputFocusStyles are adhered too */
  &:focus-visible {
    outline: none;
  }

  ${({ theme, $hasError }) => inputFocusStyle()({ theme, $hasError })};
`;
var DownIcon = dt(Select$1.Icon)`
  display: flex;
  & > svg {
    fill: ${({ theme }) => theme.colors.neutral500};
  }
`;
var SelectValue2 = React2.forwardRef(({ children, placeholder, ...restProps }, ref) => (0, import_jsx_runtime3.jsx)(ValueType, { ref, ellipsis: true, ...restProps, children: (0, import_jsx_runtime3.jsx)(StyledValue, { placeholder, children }) }));
var ValueType = dt(Typography)`
  flex: 1;
  font-size: 1.4rem;
  line-height: 2.2rem;
`;
var StyledValue = dt(Select$1.Value)`
  display: flex;
  gap: ${({ theme }) => theme.spaces[1]};
  flex-wrap: wrap;
`;
var SelectContent2 = React2.forwardRef((props, ref) => {
  return (0, import_jsx_runtime3.jsx)(StyledContent, { ref, ...props, children: (0, import_jsx_runtime3.jsx)(ScrollAreaImpl$1, { children: props.children }) });
});
var StyledContent = dt(Select$1.Content)`
  background: ${({ theme }) => theme.colors.neutral0};
  box-shadow: ${({ theme }) => theme.shadows.filterShadow};
  border: 1px solid ${({ theme }) => theme.colors.neutral150};
  border-radius: ${({ theme }) => theme.borderRadius};
  min-width: var(--radix-select-trigger-width);
  max-height: 15.6rem;
  z-index: ${({ theme }) => theme.zIndices.popover};

  @media (prefers-reduced-motion: no-preference) {
    animation-duration: ${(props) => props.theme.motion.timings["200"]};

    /* The select can't animate out yet, watch https://github.com/radix-ui/primitives/issues/1893, or take a look and solve it yourself. */
    &[data-state='open'] {
      animation-timing-function: ${(props) => props.theme.motion.easings.authenticMotion};

      &[data-side='top'] {
        animation-name: ${ANIMATIONS.slideUpIn};
      }

      &[data-side='bottom'] {
        animation-name: ${ANIMATIONS.slideDownIn};
      }
    }
  }
`;
var SelectViewport2 = dt(Select$1.Viewport)`
  padding: ${({ theme }) => theme.spaces[1]};
`;
var SelectItem2 = React2.forwardRef((props, ref) => (0, import_jsx_runtime3.jsx)(StyledSelectItem, { ref, ...props }));
var itemStyles = lt`
  width: 100%;
  border: none;
  text-align: left;
  outline-offset: -3px;
  border-radius: ${(props) => props.theme.borderRadius};
  padding: ${(props) => `${props.theme.spaces[2]} ${props.theme.spaces[4]}`};
  padding-left: ${({ theme }) => theme.spaces[4]};
  background-color: ${({ theme }) => theme.colors.neutral0};
  display: flex;
  align-items: center;
  gap: ${({ theme }) => theme.spaces[2]};
  white-space: nowrap;
  user-select: none;
  color: ${({ theme }) => theme.colors.neutral800};

  &:focus-visible {
    outline: none;
    background-color: ${({ theme }) => theme.colors.primary100};
    cursor: pointer;
  }
`;
var StyledSelectItem = dt(Select$1.Item)`
  ${itemStyles}

  &:hover {
    background-color: ${({ theme }) => theme.colors.primary100};
  }

  &[data-state='checked'] {
    font-weight: bold;
    background-color: ${({ theme }) => theme.colors.primary100};
    color: ${({ theme }) => theme.colors.primary600};
    font-weight: bold;
  }
`;
var Root$4 = Select$1.Root;
var Trigger$3 = SelectTrigger2;
var Value2 = SelectValue2;
var Portal2 = Select$1.Portal;
var Content$3 = SelectContent2;
var Viewport2 = SelectViewport2;
var Item$2 = SelectItem2;
var ItemIndicator2 = Select$1.ItemIndicator;
var ItemText2 = Select$1.ItemText;
var Group$1 = Select$1.Group;
var SingleSelect = React2.forwardRef(
  ({
    children,
    clearLabel = "Clear",
    customizeContent,
    disabled,
    hasError: hasErrorProp,
    id: idProp,
    name: nameProp,
    onChange,
    onClear,
    onCloseAutoFocus,
    onReachEnd,
    placeholder,
    required: requiredProp,
    size,
    startIcon,
    value: passedValue,
    ...restProps
  }, forwardedRef) => {
    const [internalValue, setInternalValue] = React2.useState();
    const [internalIsOpen, setInternalIsOpen] = React2.useState(false);
    const handleOpenChange = (open) => {
      setInternalIsOpen(open);
    };
    const handleOnClear = (e) => {
      if (onClear) {
        onClear(e);
      }
      if (!onChange) {
        setInternalValue("");
      }
    };
    const handleValueChange = (value2) => {
      if (onChange) {
        const shouldBeNumber = typeof passedValue === "number";
        onChange(shouldBeNumber ? Number(value2) : value2);
      } else {
        setInternalValue(value2);
      }
    };
    const viewportRef = React2.useRef(null);
    const generatedIntersectionId = useId();
    const intersectionId = `intersection-${stripReactIdOfColon(generatedIntersectionId)}`;
    const handleReachEnd = (entry) => {
      if (onReachEnd) {
        onReachEnd(entry);
      }
    };
    useIntersection(viewportRef, handleReachEnd, {
      selectorToWatch: `#${intersectionId}`,
      /**
       * We need to know when the select is open because only then will viewportRef
       * not be null. Because it uses a portal that (sensibly) is not mounted 24/7.
       */
      skipWhen: !internalIsOpen
    });
    const { error, required, ...field } = useField("SingleSelect");
    const hasError = Boolean(error) || hasErrorProp;
    const id = field.id ?? idProp;
    const name = field.name ?? nameProp;
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (field.hint) {
      ariaDescription = `${id}-hint`;
    }
    const value = (typeof passedValue !== "undefined" && passedValue !== null ? passedValue.toString() : internalValue) ?? "";
    return (0, import_jsx_runtime3.jsxs)(
      Root$4,
      {
        onOpenChange: handleOpenChange,
        disabled,
        required: required ?? requiredProp,
        onValueChange: handleValueChange,
        value,
        ...restProps,
        children: [
          (0, import_jsx_runtime3.jsx)(
            Trigger$3,
            {
              ref: forwardedRef,
              id,
              name,
              startIcon,
              hasError,
              disabled,
              clearLabel,
              onClear: value && onClear ? handleOnClear : void 0,
              "aria-label": restProps["aria-label"],
              "aria-describedby": ariaDescription ?? restProps["aria-describedby"],
              size,
              children: (0, import_jsx_runtime3.jsx)(Value2, { placeholder, textColor: value ? "neutral800" : "neutral600", children: value && customizeContent ? customizeContent(value) : void 0 })
            }
          ),
          (0, import_jsx_runtime3.jsx)(Portal2, { children: (0, import_jsx_runtime3.jsx)(Content$3, { position: "popper", sideOffset: 4, onCloseAutoFocus, children: (0, import_jsx_runtime3.jsxs)(Viewport2, { ref: viewportRef, children: [
            children,
            (0, import_jsx_runtime3.jsx)(Box, { id: intersectionId, width: "100%", height: "1px" })
          ] }) }) })
        ]
      }
    );
  }
);
var SingleSelectOption = React2.forwardRef(
  ({ value, startIcon, children, ...restProps }, ref) => {
    return (0, import_jsx_runtime3.jsxs)(Item$2, { ref, value: value.toString(), ...restProps, children: [
      startIcon && (0, import_jsx_runtime3.jsx)(Flex, { tag: "span", "aria-hidden": true, children: startIcon }),
      (0, import_jsx_runtime3.jsx)(Typography, { lineHeight: "20px", width: "100%", children: (0, import_jsx_runtime3.jsx)(ItemText2, { children }) })
    ] });
  }
);
var DEFAULT_PAST_RANGE = 200;
var DEFAULT_FUTURE_RANGE = 15;
var [DatePickerProvider, useDatePickerContext] = createContext2("DatePicker");
var DatePicker$1 = React2.forwardRef(
  ({
    /**
     * DatePickerCalendar props
     */
    calendarLabel,
    className,
    initialDate,
    locale: defaultLocale,
    maxDate: maxDate2,
    minDate: minDate2,
    monthSelectLabel = "Month",
    onChange,
    value: valueProp,
    yearSelectLabel = "Year",
    /**
     * Combobox props
     */
    hasError: hasErrorProp,
    id: idProp,
    name: nameProp,
    disabled = false,
    required: requiredProp = false,
    onClear,
    clearLabel = "Clear",
    size = "M",
    ...restProps
  }, ref) => {
    const timeZone = $14e0f24ef4ac5c92$export$aa8b41735afcabd2();
    const designContext = useDesignSystem("DatePicker");
    const locale = defaultLocale ?? designContext.locale;
    const formatter = useDateFormatter(locale, {
      day: "2-digit",
      month: "2-digit",
      year: "numeric"
    });
    const [open, setOpen] = React2.useState(false);
    const [trigger, setTrigger] = React2.useState(null);
    const [textInput, setTextInput] = React2.useState(null);
    const [content, setContent] = React2.useState(null);
    const [textValue, setTextValue] = React2.useState();
    const [value, setValue] = useControllableState$1({
      defaultProp: initialDate ? convertUTCDateToCalendarDate(initialDate) : void 0,
      prop: valueProp ? convertUTCDateToCalendarDate(valueProp) : void 0,
      onChange(date) {
        if (onChange) {
          onChange(date == null ? void 0 : date.toDate(timeZone));
        }
      }
    });
    const [actualMinDate, actualMaxDate] = React2.useMemo(() => {
      const now = initialDate ? convertUTCDateToCalendarDate(initialDate) : $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3("UTC");
      const actualMinDate2 = minDate2 ? convertUTCDateToCalendarDate(minDate2) : now.set({ day: 1, month: 1, year: now.year - DEFAULT_PAST_RANGE });
      let actualMaxDate2 = maxDate2 ? convertUTCDateToCalendarDate(maxDate2) : now.set({ day: 31, month: 12, year: now.year + DEFAULT_FUTURE_RANGE });
      if (actualMaxDate2.compare(actualMinDate2) < 0) {
        actualMaxDate2 = actualMinDate2.set({ day: 31, month: 12, year: actualMinDate2.year + DEFAULT_FUTURE_RANGE });
      }
      return [actualMinDate2, actualMaxDate2];
    }, [minDate2, maxDate2, initialDate]);
    const [calendarDate, setCalendarDate] = React2.useState(
      makeInitialCalendarDate({
        currentValue: value,
        minDate: actualMinDate,
        maxDate: actualMaxDate
      })
    );
    const contentId = useId();
    const clearRef = React2.useRef(null);
    const handleClearClick = (e) => {
      if (onClear && !disabled) {
        setTextValue("");
        setValue(void 0);
        onClear(e);
        textInput == null ? void 0 : textInput.focus();
      }
    };
    const handleOpenChange = React2.useCallback(
      (nextOpen) => {
        if (nextOpen && value) {
          setCalendarDate(value);
        }
        setOpen(nextOpen);
      },
      [value]
    );
    useIsomorphicLayoutEffect(() => {
      if (valueProp) {
        const date = convertUTCDateToCalendarDate(valueProp);
        setTextValue(formatter.format(date.toDate(timeZone)));
        setCalendarDate(date);
      } else {
        setTextValue("");
      }
    }, [valueProp, formatter, timeZone]);
    useIsomorphicLayoutEffect(() => {
      if (initialDate && textValue === void 0) {
        const date = convertUTCDateToCalendarDate(initialDate);
        setTextValue(formatter.format(date.toDate(timeZone)));
      }
    }, [initialDate, textValue, formatter, timeZone]);
    const { error, ...field } = useField("Combobox");
    const hasError = Boolean(error) || hasErrorProp;
    const id = field.id ?? idProp;
    const name = field.name ?? nameProp;
    const required = field.required || requiredProp;
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (field.hint) {
      ariaDescription = `${id}-hint`;
    }
    return (0, import_jsx_runtime3.jsxs)(
      DatePickerProvider,
      {
        calendarDate,
        content,
        contentId,
        disabled,
        locale,
        minDate: actualMinDate,
        maxDate: actualMaxDate,
        open,
        onCalendarDateChange: setCalendarDate,
        onContentChange: setContent,
        onOpenChange: handleOpenChange,
        onTextInputChange: setTextInput,
        onTextValueChange: setTextValue,
        onTriggerChange: setTrigger,
        onValueChange: setValue,
        required,
        textInput,
        textValue,
        timeZone,
        trigger,
        value,
        children: [
          (0, import_jsx_runtime3.jsxs)(DatePickerTrigger, { className, hasError, size, children: [
            (0, import_jsx_runtime3.jsx)(ForwardRef$4X, { fill: "neutral500", "aria-hidden": true }),
            (0, import_jsx_runtime3.jsx)(DatePickerTextInput, { ref, "aria-describedby": ariaDescription, id, name, ...restProps }),
            textValue && onClear ? (0, import_jsx_runtime3.jsx)(
              IconBox$1,
              {
                tag: "button",
                hasRadius: true,
                background: "transparent",
                type: "button",
                onClick: handleClearClick,
                "aria-disabled": disabled,
                "aria-label": clearLabel,
                title: clearLabel,
                ref: clearRef,
                children: (0, import_jsx_runtime3.jsx)(ForwardRef$45, {})
              }
            ) : null
          ] }),
          (0, import_jsx_runtime3.jsx)(Portal$12, { children: (0, import_jsx_runtime3.jsx)(DatePickerContent, { label: calendarLabel, children: (0, import_jsx_runtime3.jsx)(DatePickerCalendar, { monthSelectLabel, yearSelectLabel }) }) })
        ]
      }
    );
  }
);
var isPrintableCharacter = (str) => {
  return Boolean(str.match(/^[^a-zA-Z]*$/));
};
var makeInitialCalendarDate = ({ currentValue, minDate: minDate$1, maxDate: maxDate$1 }) => {
  const now = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3("UTC");
  if (currentValue) {
    return currentValue;
  }
  if ($14e0f24ef4ac5c92$export$5c333a116e949cdd(minDate$1, now) === minDate$1 && $14e0f24ef4ac5c92$export$a75f2bff57811055(maxDate$1, now) === maxDate$1) {
    return now;
  }
  if ($14e0f24ef4ac5c92$export$5c333a116e949cdd(minDate$1, now) === now) {
    return minDate$1;
  }
  if ($14e0f24ef4ac5c92$export$a75f2bff57811055(maxDate$1, now) === now) {
    return maxDate$1;
  }
  return now;
};
var DATE_PICKER_TRIGGER_NAME = "DatePickerTrigger";
var DatePickerTrigger = React2.forwardRef(
  ({ hasError, size, ...restProps }, forwardedRef) => {
    const context = useDatePickerContext(DATE_PICKER_TRIGGER_NAME);
    const composedRefs = useComposedRefs(forwardedRef, (node) => context.onTriggerChange(node));
    const handleOpenChange = () => {
      if (!context.disabled) {
        context.onOpenChange(true);
      }
    };
    return (0, import_jsx_runtime3.jsx)(
      $d3863c46a17e8a28$export$20e40289641fbbb6,
      {
        asChild: true,
        trapped: context.open,
        onMountAutoFocus: (event) => {
          event.preventDefault();
        },
        onUnmountAutoFocus: (event) => {
          var _a;
          (_a = document.getSelection()) == null ? void 0 : _a.empty();
          event.preventDefault();
        },
        children: (0, import_jsx_runtime3.jsx)(
          TriggerElement,
          {
            ref: composedRefs,
            $hasError: hasError,
            $size: size,
            ...restProps,
            hasRadius: true,
            gap: 3,
            overflow: "hidden",
            background: context.disabled ? "neutral150" : "neutral0",
            onClick: composeEventHandlers(restProps.onClick, () => {
              var _a;
              (_a = context.textInput) == null ? void 0 : _a.focus();
            }),
            onPointerDown: composeEventHandlers(restProps.onPointerDown, (event) => {
              var _a;
              const target = event.target;
              if (target.hasPointerCapture(event.pointerId)) {
                target.releasePointerCapture(event.pointerId);
              }
              const buttonTarg = target.closest("button") ?? target.closest("div");
              if (buttonTarg !== event.currentTarget) {
                return;
              }
              if (event.button === 0 && event.ctrlKey === false) {
                handleOpenChange();
                (_a = context.textInput) == null ? void 0 : _a.focus();
              }
            })
          }
        )
      }
    );
  }
);
var TriggerElement = dt(Flex)`
  border: 1px solid ${({ theme, $hasError }) => $hasError ? theme.colors.danger600 : theme.colors.neutral200};
  ${(props) => {
  switch (props.$size) {
    case "S":
      return lt`
          padding-block: ${props.theme.spaces[1]};
          padding-inline: ${props.theme.spaces[3]};
        `;
    default:
      return lt`
          padding-block: ${props.theme.spaces[2]};
          padding-inline: ${props.theme.spaces[3]};
        `;
  }
}}

  & > svg {
    flex: 1 0 auto;
  }

  &[data-disabled] {
    color: ${({ theme }) => theme.colors.neutral600};
    background: ${({ theme }) => theme.colors.neutral150};
    cursor: not-allowed;
  }

  /* Required to ensure the below inputFocusStyles are adhered too */
  &:focus-visible {
    outline: none;
  }

  ${({ theme, $hasError }) => inputFocusStyle()({ theme, $hasError })};
`;
var IconBox$1 = dt(Box)`
  border: none;
  color: ${({ theme }) => theme.colors.neutral600};
  padding: 0;
  cursor: pointer;
`;
var DATE_PICKER_TEXT_INPUT_NAME = "DatePickerTextInput";
var DatePickerTextInput = React2.forwardRef(
  ({ placeholder, ...props }, forwardedRef) => {
    const context = useDatePickerContext(DATE_PICKER_TEXT_INPUT_NAME);
    const { onTextValueChange, textValue, onTextInputChange, onOpenChange, disabled, locale } = context;
    const composedRefs = useComposedRefs(forwardedRef, (node) => onTextInputChange(node));
    const handleOpenChange = () => {
      if (!disabled) {
        onOpenChange(true);
      }
    };
    const formatter = useDateFormatter(locale, {
      year: "numeric",
      month: "2-digit",
      day: "2-digit"
    });
    const [dateFormatPlaceholder, separator, dateStructure] = React2.useMemo(() => {
      var _a;
      const parts = formatter.formatToParts(/* @__PURE__ */ new Date());
      const dateStructure2 = parts.filter(
        (part) => part.type === "year" || part.type === "month" || part.type === "day"
      );
      const placeholder2 = dateStructure2.map((part) => {
        switch (part.type) {
          case "day":
            return "DD";
          case "month":
            return "MM";
          case "year":
            return "YYYY";
          default:
            return "";
        }
      });
      const separator2 = ((_a = parts.find((part) => part.type === "literal")) == null ? void 0 : _a.value) ?? "";
      return [placeholder2, separator2, dateStructure2];
    }, [formatter]);
    const inputPattern = dateFormatPlaceholder.map((part) => `\\d{${part.length}}`).join(`\\${separator}`);
    return (0, import_jsx_runtime3.jsx)(
      Input$1,
      {
        role: "combobox",
        type: "text",
        inputMode: "numeric",
        ref: composedRefs,
        "aria-autocomplete": "none",
        "aria-controls": context.contentId,
        "aria-disabled": context.disabled,
        "aria-expanded": context.open,
        "aria-required": context.required,
        "aria-haspopup": "dialog",
        "data-state": context.open ? "open" : "closed",
        disabled,
        "data-disabled": disabled ? "" : void 0,
        pattern: inputPattern,
        placeholder: placeholder ?? dateFormatPlaceholder.join(separator),
        ...props,
        value: textValue ?? "",
        onBlur: composeEventHandlers(props.onBlur, () => {
          if (!context.textValue) {
            context.onValueChange(void 0);
            return;
          }
          context.onTextValueChange(formatter.format(context.calendarDate.toDate(context.timeZone)));
          context.onValueChange(context.calendarDate);
        }),
        onChange: composeEventHandlers(props.onChange, (event) => {
          if (isPrintableCharacter(event.target.value)) {
            const inputByPart = event.target.value.split(separator);
            const [day, month, year] = dateStructure.map((part, index2) => {
              const value = inputByPart[index2];
              return {
                ...part,
                value
              };
            }).sort((a, b) => {
              if (a.type === "year") {
                return 1;
              }
              if (b.type === "year") {
                return -1;
              }
              if (a.type === "month") {
                return 1;
              }
              if (b.type === "month") {
                return -1;
              }
              return 0;
            }).map((part) => part.value);
            const currentYear = context.calendarDate.year;
            let newYear = context.calendarDate.year;
            if (year) {
              const normalizedYear = year.length === 1 ? `0${year}` : year;
              newYear = year.length < 3 ? Number(`${currentYear}`.slice(0, 4 - normalizedYear.length) + normalizedYear) : Number(normalizedYear);
            }
            if (year && year.length < 3 && newYear > context.maxDate.year) {
              newYear -= 100;
            }
            const newDateWithYear = context.calendarDate.set({ year: newYear });
            const maxMonthNumber = newDateWithYear.calendar.getMonthsInYear(newDateWithYear);
            const newDateWithMonthAndYear = newDateWithYear.set({
              month: month && Number(month) <= maxMonthNumber ? Number(month) : void 0
            });
            const maxDayNumber = newDateWithMonthAndYear.calendar.getDaysInMonth(newDateWithMonthAndYear);
            const newDateWithDayMonthAndYear = newDateWithMonthAndYear.set({
              day: day && Number(day) <= maxDayNumber ? Number(day) : void 0
            });
            context.onCalendarDateChange(constrainValue(newDateWithDayMonthAndYear, context.minDate, context.maxDate));
            context.onTextValueChange(event.target.value);
          }
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          if (!context.open && (isPrintableCharacter(event.key) || ["ArrowDown", "Backspace"].includes(event.key))) {
            handleOpenChange();
          } else if (["Tab"].includes(event.key) && context.open) {
            event.preventDefault();
          } else if (["Escape"].includes(event.key)) {
            if (context.open) {
              context.onOpenChange(false);
            } else {
              context.onValueChange(void 0);
              context.onTextValueChange("");
            }
            event.preventDefault();
          } else if (context.open && ["ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"].includes(event.key)) {
            event.preventDefault();
            switch (event.key) {
              case "ArrowDown": {
                const nextDate = context.calendarDate.add({ weeks: 1 });
                if (context.maxDate && nextDate.compare(context.maxDate) > 0) {
                  return;
                }
                context.onCalendarDateChange(nextDate);
                return;
              }
              case "ArrowRight": {
                const nextDate = context.calendarDate.add({ days: 1 });
                if (context.maxDate && nextDate.compare(context.maxDate) > 0) {
                  return;
                }
                context.onCalendarDateChange(nextDate);
                return;
              }
              case "ArrowUp": {
                const nextDate = context.calendarDate.subtract({ weeks: 1 });
                if (context.minDate && nextDate.compare(context.minDate) < 0) {
                  return;
                }
                context.onCalendarDateChange(nextDate);
                return;
              }
              case "ArrowLeft": {
                const nextDate = context.calendarDate.subtract({ days: 1 });
                if (context.minDate && nextDate.compare(context.minDate) < 0) {
                  return;
                }
                context.onCalendarDateChange(nextDate);
              }
            }
          } else if (context.open && ["Enter"].includes(event.key)) {
            event.preventDefault();
            onTextValueChange(formatter.format(context.calendarDate.toDate(context.timeZone)));
            context.onValueChange(context.calendarDate);
            context.onOpenChange(false);
          }
        })
      }
    );
  }
);
function constrainValue(date, minValue, maxValue) {
  if (minValue) {
    date = $14e0f24ef4ac5c92$export$a75f2bff57811055(date, minValue);
  }
  if (maxValue) {
    date = $14e0f24ef4ac5c92$export$5c333a116e949cdd(date, maxValue);
  }
  return date;
}
var Input$1 = dt.input`
  width: 100%;
  font-size: 1.4rem;
  line-height: 2.2rem;
  color: ${({ theme }) => theme.colors.neutral800};
  border: none;
  background-color: transparent;

  &:focus-visible {
    outline: none;
  }

  &[aria-disabled='true'] {
    cursor: inherit;
  }
`;
var CONTENT_NAME2 = "DatePickerContent";
var DatePickerContent = React2.forwardRef((props, forwardedRef) => {
  const [fragment, setFragment] = React2.useState();
  const context = useDatePickerContext(CONTENT_NAME2);
  useIsomorphicLayoutEffect(() => {
    setFragment(new DocumentFragment());
  }, []);
  if (!context.open) {
    const frag = fragment;
    return frag ? (0, import_react_dom2.createPortal)((0, import_jsx_runtime3.jsx)("div", { children: props.children }), frag) : null;
  }
  return (0, import_jsx_runtime3.jsx)(DatePickerContentImpl, { ...props, ref: forwardedRef });
});
var CONTENT_IMPL_NAME2 = "DatePickerContent";
var DatePickerContentImpl = React2.forwardRef(
  (props, forwardedRef) => {
    const { label = "Choose date", ...restProps } = props;
    const { onOpenChange, ...context } = useDatePickerContext(CONTENT_IMPL_NAME2);
    const { x, y, refs, strategy, placement } = useFloating({
      strategy: "fixed",
      placement: "bottom-start",
      middleware: [
        offset({
          mainAxis: 4
        }),
        shift(),
        flip()
      ],
      elements: {
        reference: context.trigger
      },
      whileElementsMounted: autoUpdate
    });
    React2.useEffect(() => {
      const close = () => {
        onOpenChange(false);
      };
      window.addEventListener("blur", close);
      window.addEventListener("resize", close);
      return () => {
        window.removeEventListener("blur", close);
        window.removeEventListener("resize", close);
      };
    }, [onOpenChange]);
    const composedRefs = useComposedRefs(
      forwardedRef,
      (node) => context.onContentChange(node),
      refs.setFloating
    );
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return (0, import_jsx_runtime3.jsx)(Combination_default, { allowPinchZoom: true, children: (0, import_jsx_runtime3.jsx)(
      DismissibleLayer,
      {
        asChild: true,
        onFocusOutside: (event) => {
          event.preventDefault();
        },
        onDismiss: () => {
          onOpenChange(false);
        },
        children: (0, import_jsx_runtime3.jsx)(
          ContentElement,
          {
            ref: composedRefs,
            "data-state": context.open ? "open" : "closed",
            "data-side": placement.includes("top") ? "top" : "bottom",
            onContextMenu: (event) => event.preventDefault(),
            id: context.contentId,
            role: "dialog",
            "aria-modal": "true",
            "aria-label": label,
            style: {
              left: x,
              top: y,
              position: strategy
            },
            hasRadius: true,
            background: "neutral0",
            padding: 1,
            ...restProps
          }
        )
      }
    ) });
  }
);
var ContentElement = dt(Box)`
  box-shadow: ${({ theme }) => theme.shadows.filterShadow};
  z-index: ${({ theme }) => theme.zIndices.popover};
  border: 1px solid ${({ theme }) => theme.colors.neutral150};

  @media (prefers-reduced-motion: no-preference) {
    animation-duration: ${(props) => props.theme.motion.timings["200"]};

    &[data-state='open'] {
      animation-timing-function: ${(props) => props.theme.motion.easings.authenticMotion};

      &[data-side='top'] {
        animation-name: ${ANIMATIONS.slideUpIn};
      }

      &[data-side='bottom'] {
        animation-name: ${ANIMATIONS.slideDownIn};
      }
    }
  }
`;
var DATE_PICKER_CALENDAR_NAME = "DatePickerCalendar";
var DatePickerCalendar = React2.forwardRef(
  ({ monthSelectLabel, yearSelectLabel, ...restProps }, ref) => {
    const { locale, timeZone, minDate: minDate2, maxDate: maxDate2, calendarDate, onCalendarDateChange } = useDatePickerContext(DATE_PICKER_CALENDAR_NAME);
    const startDate = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(calendarDate);
    const years = React2.useMemo(() => {
      const minYear = minDate2.year;
      const maxYear = maxDate2.year;
      return [...Array(maxYear - minYear + 1).keys()].map((y) => (minYear + y).toString());
    }, [minDate2, maxDate2]);
    const monthFormatter = useDateFormatter(locale, { month: "long" });
    const months = React2.useMemo(
      () => [...Array(calendarDate.calendar.getMonthsInYear(calendarDate)).keys()].map(
        (m) => monthFormatter.format(calendarDate.set({ month: m + 1 }).toDate(timeZone))
      ),
      [calendarDate, monthFormatter, timeZone]
    );
    const dayFormatter = useDateFormatter(locale, { weekday: "short" });
    const weekDays = React2.useMemo(() => {
      const weekStart = $14e0f24ef4ac5c92$export$42c81a444fbfb5d4($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone), locale);
      return [...new Array(7).keys()].map((index2) => {
        const date = weekStart.add({ days: index2 });
        const dateDay = date.toDate(timeZone);
        return dayFormatter.format(dateDay);
      });
    }, [timeZone, locale, dayFormatter]);
    const handleMonthChange = (month) => {
      if (typeof month === "number") {
        return;
      }
      const updatedDate = calendarDate.set({ month: months.indexOf(month) + 1 });
      onCalendarDateChange(updatedDate);
    };
    const handleYearChange = (year) => {
      if (typeof year === "number") {
        return;
      }
      const updatedDate = calendarDate.set({ year: parseInt(year, 10) });
      onCalendarDateChange(updatedDate);
    };
    const getDatesInWeek = makeGetDatesInWeek(startDate, locale);
    return (0, import_jsx_runtime3.jsxs)(Flex, { ref, direction: "column", alignItems: "stretch", padding: 4, ...restProps, children: [
      (0, import_jsx_runtime3.jsxs)(ToolbarFlex, { justifyContent: "flex-start", paddingBottom: 4, paddingLeft: 2, paddingRight: 2, gap: 2, children: [
        (0, import_jsx_runtime3.jsx)(Root$6, { children: (0, import_jsx_runtime3.jsx)(
          SingleSelect,
          {
            "aria-label": monthSelectLabel,
            value: months[calendarDate.month - 1],
            onChange: handleMonthChange,
            children: months.map((month) => (0, import_jsx_runtime3.jsx)(SingleSelectOption, { value: month, children: month }, month))
          }
        ) }),
        (0, import_jsx_runtime3.jsx)(Root$6, { children: (0, import_jsx_runtime3.jsx)(SingleSelect, { value: calendarDate.year.toString(), "aria-label": yearSelectLabel, onChange: handleYearChange, children: years.map((year) => (0, import_jsx_runtime3.jsx)(SingleSelectOption, { value: year, children: year }, year)) }) })
      ] }),
      (0, import_jsx_runtime3.jsxs)("table", { role: "grid", children: [
        (0, import_jsx_runtime3.jsx)("thead", { "aria-hidden": true, children: (0, import_jsx_runtime3.jsx)("tr", { "aria-rowindex": 0, children: weekDays.map((day, index2) => (0, import_jsx_runtime3.jsx)(DatePickerHeaderCell, { "aria-colindex": index2, children: day }, day)) }) }),
        (0, import_jsx_runtime3.jsx)("tbody", { children: [...new Array(6).keys()].map((weekIndex) => (0, import_jsx_runtime3.jsx)("tr", { "aria-rowindex": weekIndex + 2, children: getDatesInWeek(weekIndex).map(
          (date, index2) => date ? (0, import_jsx_runtime3.jsx)(
            DatePickerCalendarCell,
            {
              "aria-colindex": index2 + 1,
              date,
              startDate,
              disabled: minDate2.compare(date) > 0 || date.compare(maxDate2) > 0
            },
            date.toString()
          ) : (0, import_jsx_runtime3.jsx)(Cell, { "aria-colindex": index2 + 1 }, index2 + 1)
        ) }, weekIndex)) })
      ] })
    ] });
  }
);
var makeGetDatesInWeek = (from, locale) => (weekIndex) => {
  let date = from.add({ weeks: weekIndex });
  const dates = [];
  date = $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale);
  const dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
  for (let i = 0; i < dayOfWeek; i++) {
    dates.push(null);
  }
  while (dates.length < 7) {
    dates.push(date);
    const nextDate = date.add({ days: 1 });
    if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(date, nextDate)) {
      break;
    }
    date = nextDate;
  }
  while (dates.length < 7) {
    dates.push(null);
  }
  return dates;
};
var ToolbarFlex = dt(Flex)`
  div[role='combobox'] {
    border: 1px solid transparent;
    background: transparent;
    font-weight: ${(props) => props.theme.fontWeights.bold};

    svg {
      fill: ${({ theme }) => theme.colors.neutral500};
    }

    &:hover {
      background-color: ${({ theme }) => theme.colors.neutral100};
    }
  }
`;
var DatePickerHeaderCell = React2.forwardRef(
  ({ children, ...props }, forwardedRef) => {
    return (0, import_jsx_runtime3.jsx)(Th$1, { tag: "th", role: "gridcell", ref: forwardedRef, ...props, height: "2.4rem", width: "3.2rem", children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", fontWeight: "bold", color: "neutral800", children: children.slice(0, 2) }) });
  }
);
var Th$1 = dt(Box)`
  border-radius: ${({ theme }) => theme.borderRadius};
  text-transform: capitalize;
`;
var DATE_PICKER_CALEDNAR_CELL_NAME = "DatePickerCalendarCell";
var DatePickerCalendarCell = React2.forwardRef(
  ({ date, startDate, disabled, ...props }, forwardedRef) => {
    const { timeZone, locale, calendarDate, onValueChange, onOpenChange, onTextValueChange, onCalendarDateChange } = useDatePickerContext(DATE_PICKER_CALEDNAR_CELL_NAME);
    const isSelected = $14e0f24ef4ac5c92$export$ea39ec197993aef0(calendarDate, date);
    const dateFormatter = useDateFormatter(locale, {
      weekday: "long",
      day: "numeric",
      month: "long",
      year: "numeric"
    });
    const label = React2.useMemo(() => dateFormatter.format(date.toDate(timeZone)), [dateFormatter, date, timeZone]);
    const cellDateFormatter = useDateFormatter(locale, {
      day: "numeric",
      calendar: date.calendar.identifier
    });
    const formattedDate = React2.useMemo(
      () => cellDateFormatter.formatToParts(date.toDate(timeZone)).find((part) => part.type === "day").value,
      [cellDateFormatter, date, timeZone]
    );
    const textValueFormatter = useDateFormatter(locale, {
      day: "2-digit",
      month: "2-digit",
      year: "numeric"
    });
    const endDate = $14e0f24ef4ac5c92$export$a2258d9c4118825c(startDate);
    const isOutsideVisibleRange = date.compare(startDate) < 0 || date.compare(endDate) > 0;
    let textColor = "neutral900";
    if (isSelected) {
      textColor = "primary600";
    } else if (isOutsideVisibleRange) {
      textColor = "neutral600";
    }
    return (0, import_jsx_runtime3.jsx)(
      Cell,
      {
        tag: "td",
        role: "gridcell",
        ref: forwardedRef,
        "aria-selected": isSelected,
        ...props,
        hasRadius: true,
        "aria-label": label,
        tabIndex: isSelected ? 0 : -1,
        background: isSelected ? "primary100" : "neutral0",
        cursor: "pointer",
        onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
          event.preventDefault();
          onCalendarDateChange(date);
          onValueChange(date);
          onTextValueChange(textValueFormatter.format(date.toDate(timeZone)));
          onOpenChange(false);
        }),
        "aria-disabled": disabled,
        children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", textColor, children: formattedDate })
      }
    );
  }
);
var Cell = dt(Box)`
  text-align: center;
  padding: 0.7rem;
  // Trick to prevent the outline from overflowing because of the general outline-offset
  outline-offset: -2px !important;
  &[aria-disabled='true'] {
    pointer-events: none;
    opacity: 0.5;
  }

  &[aria-disabled='false'] {
    &:hover {
      background: ${({ theme }) => theme.colors.primary100};
      color: ${({ theme }) => theme.colors.primary600};
    }
  }
`;
var convertUTCDateToCalendarDate = (date) => {
  const utcDateString = date.toISOString();
  const zonedDateTime = $fae977aafc393c5c$export$5adfdab05168c219(utcDateString, "UTC");
  return $11d87f3f76e88657$export$93522d1a439f3617(zonedDateTime);
};
var isNotAlphabeticalCharacter = (str) => {
  return Boolean(str.match(/^[^a-zA-Z]*$/));
};
var TimePicker$1 = React2.forwardRef(
  ({ step = 15, value: valueProp, defaultValue, onChange, ...restProps }, forwardedRef) => {
    const context = useDesignSystem("TimePicker");
    const [textValue, setTextValue] = React2.useState("");
    const [value, setValue] = useControllableState$1({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange
    });
    const formatter = useDateFormatter(context.locale, {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false
    });
    const separator = React2.useMemo(() => {
      const parts = formatter.formatToParts(/* @__PURE__ */ new Date());
      const { value: separator2 } = parts.find((part) => part.type === "literal");
      return separator2;
    }, [formatter]);
    const timeOptions = React2.useMemo(() => {
      const stepCount = 60 / step;
      return [...Array(24).keys()].flatMap(
        (hour) => [...Array(stepCount).keys()].map((minuteStep) => formatter.format(new Date(0, 0, 0, hour, minuteStep * step)))
      );
    }, [step, formatter]);
    const handleTextValueChange = (string) => {
      if (!string || isNotAlphabeticalCharacter(string)) {
        setTextValue(string);
      }
    };
    const createNewTimeValue = (value2) => {
      const [hours, minutes] = value2.split(separator);
      if (!hours && !minutes)
        return void 0;
      const hoursAsNumber = Number(hours ?? "0");
      const minutesAsNumber = Number(minutes ?? "0");
      if (hoursAsNumber > 23 || minutesAsNumber > 59)
        return void 0;
      return formatter.format(new Date(0, 0, 0, hoursAsNumber, minutesAsNumber));
    };
    const handleBlur = (event) => {
      const newValue = createNewTimeValue(event.target.value);
      if (newValue) {
        setTextValue(newValue);
        setValue(newValue);
      } else {
        setTextValue(value);
      }
    };
    const handleChange = (changedValue) => {
      if (typeof changedValue !== "undefined") {
        const newValue = createNewTimeValue(changedValue);
        setValue(newValue);
      } else {
        setValue(changedValue);
      }
    };
    React2.useEffect(() => {
      const actualValue = typeof valueProp === "undefined" ? "" : valueProp;
      if (isNotAlphabeticalCharacter(actualValue)) {
        setTextValue(actualValue);
      }
    }, [valueProp, setTextValue]);
    return (0, import_jsx_runtime3.jsx)(
      Combobox2,
      {
        ...restProps,
        ref: forwardedRef,
        value,
        onChange: handleChange,
        isPrintableCharacter: isNotAlphabeticalCharacter,
        allowCustomValue: true,
        placeholder: `--${separator}--`,
        autocomplete: "none",
        startIcon: (0, import_jsx_runtime3.jsx)(ForwardRef$4r, { fill: "neutral500" }),
        inputMode: "numeric",
        pattern: `\\d{2}\\${separator}\\d{2}`,
        textValue,
        onTextValueChange: handleTextValueChange,
        onBlur: handleBlur,
        children: timeOptions.map((time) => (0, import_jsx_runtime3.jsx)(Option, { value: time, children: time }, time))
      }
    );
  }
);
var DatePicker = dt(DatePicker$1)`
  flex: 1 1 70%;
  min-width: 120px;
`;
var TimePicker = dt(TimePicker$1)`
  flex: 1 1 30%;
  min-width: 140px;
`;
var DateTimePicker = React2.forwardRef(
  ({
    clearLabel = "clear",
    dateLabel = "Choose date",
    timeLabel = "Choose time",
    disabled = false,
    hasError: hasErrorProp,
    onChange,
    onClear,
    required = false,
    step,
    value,
    initialDate,
    size,
    ...props
  }, forwardedRef) => {
    const DatePickerElement2 = React2.useRef(null);
    const [dateValue, setDateValue] = useControllableState$1({
      defaultProp: initialDate ? convertUTCDateToCalendarDateTime(initialDate, false) : void 0,
      prop: value ? convertUTCDateToCalendarDateTime(value, false) : value ?? void 0,
      onChange(date) {
        if (onChange) {
          onChange(date == null ? void 0 : date.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2()));
        }
      }
    });
    const context = useDesignSystem("DateTimePicker");
    const timeFormatter = useDateFormatter(context.locale, {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false
    });
    const timeValue = dateValue ? timeFormatter.format(dateValue.toDate($14e0f24ef4ac5c92$export$aa8b41735afcabd2())) : "";
    const handleDateChange = (date) => {
      let newDate = date ? convertUTCDateToCalendarDateTime(date) : void 0;
      if (newDate && dateValue && newDate.compare(dateValue) === 0) {
        return;
      }
      if (timeValue && newDate) {
        const [hours, minutes] = timeValue.split(":");
        newDate = newDate.set({ hour: parseInt(hours, 10), minute: parseInt(minutes, 10) });
      }
      setDateValue(newDate);
    };
    const handleTimeChange = (time) => {
      if (!time) {
        return;
      }
      const [hours, minutes] = time.split(":");
      const dateToSet = dateValue ? dateValue.set({ hour: parseInt(hours, 10), minute: parseInt(minutes, 10) }) : convertUTCDateToCalendarDateTime(/* @__PURE__ */ new Date()).set({
        hour: parseInt(hours, 10),
        minute: parseInt(minutes, 10)
      });
      setDateValue(dateToSet);
    };
    const handleDateClear = (e) => {
      setDateValue(void 0);
      if (onClear) {
        onClear(e);
      }
    };
    const handleTimeClear = () => {
      const newDate = dateValue ? dateValue.set({ hour: 0, minute: 0 }) : convertUTCDateToCalendarDateTime(/* @__PURE__ */ new Date());
      setDateValue(newDate);
    };
    const composedRefs = useComposedRefs(DatePickerElement2, forwardedRef);
    const { error, id, labelNode } = useField("DateTimePicker");
    const hasError = Boolean(error) || hasErrorProp;
    return (0, import_jsx_runtime3.jsxs)(Flex, { "aria-labelledby": labelNode ? `${id}-label` : void 0, role: "group", flex: "1", gap: 1, children: [
      (0, import_jsx_runtime3.jsx)(Root$6, { children: (0, import_jsx_runtime3.jsx)(
        DatePicker,
        {
          ...props,
          size,
          value: dateValue == null ? void 0 : dateValue.toDate("UTC"),
          onChange: handleDateChange,
          required,
          onClear: onClear ? handleDateClear : void 0,
          clearLabel: `${clearLabel} date`,
          disabled,
          ref: composedRefs,
          "aria-label": dateLabel
        }
      ) }),
      (0, import_jsx_runtime3.jsx)(Root$6, { children: (0, import_jsx_runtime3.jsx)(
        TimePicker,
        {
          size,
          hasError,
          value: timeValue,
          onChange: handleTimeChange,
          onClear: onClear && timeValue !== void 0 && timeValue !== "00:00" ? handleTimeClear : void 0,
          clearLabel: `${clearLabel} time`,
          required,
          disabled,
          step,
          "aria-label": timeLabel
        }
      ) })
    ] });
  }
);
var convertUTCDateToCalendarDateTime = (date, resetTime = true) => {
  const utcDateString = date.toISOString();
  let zonedDateTime = $fae977aafc393c5c$export$8e384432362ed0f0(utcDateString);
  if (resetTime) {
    zonedDateTime = zonedDateTime.set({ hour: 0, minute: 0 });
  }
  return $11d87f3f76e88657$export$b21e0b124e224484(zonedDateTime);
};
var Divider = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(
    DividerImpl,
    {
      ref: forwardedRef,
      background: "neutral150",
      ...props,
      "data-orientation": "horizontal",
      role: "separator",
      tag: "div"
    }
  );
});
var DividerImpl = dt(Box)`
  height: 1px;
  border: none;
  /* If contained in a Flex parent we want to prevent the Divider to shink */
  flex-shrink: 0;
`;
var EmptyStateIconWrapper = dt(Box)`
  svg {
    height: 8.8rem;
  }
`;
var EmptyStateLayout = React2.forwardRef(
  ({ icon, content, action, hasRadius = true, shadow = "tableShadow" }, forwardedRef) => {
    return (0, import_jsx_runtime3.jsxs)(
      Flex,
      {
        ref: forwardedRef,
        alignItems: "center",
        direction: "column",
        padding: 11,
        background: "neutral0",
        hasRadius,
        shadow,
        children: [
          icon ? (0, import_jsx_runtime3.jsx)(EmptyStateIconWrapper, { paddingBottom: 6, "aria-hidden": true, children: icon }) : null,
          (0, import_jsx_runtime3.jsx)(Box, { paddingBottom: 4, children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "delta", tag: "p", textAlign: "center", textColor: "neutral600", children: content }) }),
          action
        ]
      }
    );
  }
);
var addMarks = StateEffect.define();
var filterMarks = StateEffect.define();
var lineHighlightMark = Decoration.mark({
  attributes: { style: "background-color: yellow; color: black" }
});
var markField = StateField.define({
  // Start with an empty set of decorations
  create() {
    return Decoration.none;
  },
  // This is called whenever the editor updates it computes the new set
  update(value, transaction) {
    value = value.map(transaction.changes);
    transaction.effects.forEach((effect) => {
      if (effect.is(addMarks)) {
        value = value.update({
          add: effect.value,
          sort: true
        });
      } else if (effect.is(filterMarks)) {
        value = value.update({ filter: effect.value });
      }
    });
    return value;
  },
  // Indicate that this field provides a set of decorations
  provide: (f) => EditorView.decorations.from(f)
});
var JSONInput = React2.forwardRef(
  ({
    hasError: hasErrorProp,
    required: requiredProp,
    id: idProp,
    value = "",
    disabled = false,
    onChange = () => null,
    ...boxProps
  }, forwardedRef) => {
    const editor = React2.useRef();
    const editorState = React2.useRef();
    const editorView = React2.useRef();
    const { error, ...field } = useField("JsonInput");
    const hasError = Boolean(error) || hasErrorProp;
    const id = field.id ?? idProp;
    const required = field.required || requiredProp;
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (field.hint) {
      ariaDescription = `${id}-hint`;
    }
    const highglightErrorAtLine = (lineNumber) => {
      var _a, _b;
      const doc = (_a = editorState.current) == null ? void 0 : _a.doc;
      if (doc) {
        const { text, to: lineEnd } = doc.line(lineNumber);
        const lineStart = lineEnd - text.trimStart().length;
        if (lineEnd > lineStart) {
          (_b = editorView.current) == null ? void 0 : _b.dispatch({
            effects: addMarks.of([lineHighlightMark.range(lineStart, lineEnd)])
          });
        }
      }
    };
    const clearErrorHighlight = () => {
      var _a, _b;
      const doc = (_a = editorState.current) == null ? void 0 : _a.doc;
      if (doc) {
        const docEnd = doc.length || 0;
        (_b = editorView.current) == null ? void 0 : _b.dispatch({
          effects: filterMarks.of((from, to) => to <= 0 || from >= docEnd)
        });
      }
    };
    const lintJSON = ({ state, view: view2 }) => {
      editorView.current = view2;
      editorState.current = state;
      clearErrorHighlight();
      const lintJSONForErrrors = jsonParseLinter();
      const lintErrors = lintJSONForErrrors(view2);
      if (lintErrors.length) {
        highglightErrorAtLine(state.doc.lineAt(lintErrors[0].from).number);
      }
    };
    const onCodeMirrorChange = (currentValue, viewUpdate) => {
      lintJSON(viewUpdate);
      onChange(currentValue);
    };
    const onCreateEditor = (view2, state) => {
      editorView.current = view2;
      editorState.current = state;
      lintJSON({ view: view2, state });
    };
    const { setContainer, view } = useCodeMirror({
      value,
      onCreateEditor,
      container: editor.current,
      editable: !disabled,
      extensions: [json(), markField],
      onChange: onCodeMirrorChange,
      theme: "dark",
      basicSetup: {
        lineNumbers: true,
        bracketMatching: true,
        closeBrackets: true,
        indentOnInput: true,
        syntaxHighlighting: true,
        highlightSelectionMatches: true,
        tabSize: 2
      }
    });
    const composedRefs = useComposedRefs(editor, setContainer);
    React2.useImperativeHandle(
      forwardedRef,
      () => ({
        ...view == null ? void 0 : view.dom,
        focus() {
          if (view) {
            view.focus();
          }
        },
        scrollIntoView(args) {
          if (view) {
            view.dom.scrollIntoView(args);
          }
        }
      }),
      [view]
    );
    return (0, import_jsx_runtime3.jsx)(
      JSONInputContainer,
      {
        ref: composedRefs,
        $hasError: hasError,
        alignItems: "stretch",
        fontSize: 2,
        hasRadius: true,
        "aria-required": required,
        id,
        "aria-describedby": ariaDescription,
        ...boxProps
      }
    );
  }
);
var JSONInputContainer = dt(Flex)`
  line-height: ${({ theme }) => theme.lineHeights[2]};

  .cm-editor {
    /** 
     * Hard coded since the color is the same between themes,
     * theme.colors.neutral800 changes between themes 
     */
    background-color: #32324d;
    width: 100%;
    outline: none;
  }

  .cm-scroller {
    border: 1px solid ${({ theme, $hasError }) => $hasError ? theme.colors.danger600 : theme.colors.neutral200};
    /* inputFocusStyle will receive hasError prop */
    ${inputFocusStyle()}
  }

  .cm-editor,
  .cm-scroller {
    border-radius: ${({ theme }) => theme.borderRadius};
  }

  .cm-gutters,
  .cm-activeLineGutter {
    /** 
     * Hard coded since the color is the same between themes,
     * theme.colors.neutral700 changes between themes 
     */
    background-color: #4a4a6a;
  }
`;
var LinkButton = forwardRef4(
  ({ disabled, ...restProps }, ref) => {
    return (0, import_jsx_runtime3.jsx)(
      Button,
      {
        ref,
        tag: BaseLinkImpl,
        tabIndex: disabled ? -1 : void 0,
        disabled,
        ...restProps
      }
    );
  }
);
var MainWrapper = dt(Box)`
  // To prevent global outline on focus visible to force an outline when Main is focused
  &:focus-visible {
    outline: none;
  }
`;
var AnchorBox = dt(Box)`
  text-decoration: none;

  &:focus {
    left: ${({ theme }) => theme.spaces[3]};
    top: ${({ theme }) => theme.spaces[3]};
  }
`;
var setOpacity = (hex, alpha) => `${hex}${Math.floor(alpha * 255).toString(16).padStart(2, "0")}`;
var Root$3 = $5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9;
var Trigger$2 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($5d3850c4d0b4e6c7$export$41fb9f06171c75f4, { ...props, asChild: true, ref: forwardedRef });
});
var Content$2 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($5d3850c4d0b4e6c7$export$602eac185826482c, { children: (0, import_jsx_runtime3.jsx)(Overlay, { children: (0, import_jsx_runtime3.jsx)(ContentImpl, { ref: forwardedRef, ...props }) }) });
});
var Overlay = dt($5d3850c4d0b4e6c7$export$c6fdb837b070b4ff)`
  background: ${(props) => setOpacity(props.theme.colors.neutral800, 0.2)};
  position: fixed;
  inset: 0;
  z-index: ${(props) => props.theme.zIndices.overlay};

  @media (prefers-reduced-motion: no-preference) {
    animation: ${ANIMATIONS.overlayFadeIn} ${(props) => props.theme.motion.timings["200"]}
      ${(props) => props.theme.motion.easings.authenticMotion};
  }
`;
var ContentImpl = dt($5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2)`
  max-width: 83rem;
  max-height: 90vh;
  height: auto;
  width: 60%;
  overflow: hidden;
  margin: 0 auto;
  display: flex;
  flex-direction: column;

  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  border-radius: ${(props) => props.theme.borderRadius};
  background-color: ${(props) => props.theme.colors.neutral0};
  box-shadow: ${(props) => props.theme.shadows.popupShadow};
  z-index: ${(props) => props.theme.zIndices.modal};

  @media (prefers-reduced-motion: no-preference) {
    &[data-state='open'] {
      animation-duration: ${(props) => props.theme.motion.timings["200"]};
      animation-timing-function: ${(props) => props.theme.motion.easings.authenticMotion};
      animation-name: ${ANIMATIONS.modalPopIn};
    }

    &[data-state='closed'] {
      animation-duration: ${(props) => props.theme.motion.timings["120"]};
      animation-timing-function: ${(props) => props.theme.motion.easings.easeOutQuad};
      animation-name: ${ANIMATIONS.modalPopOut};
    }
  }
`;
var Close = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($5d3850c4d0b4e6c7$export$f39c2d165cd861fe, { ...props, asChild: true, ref: forwardedRef });
});
var Header = React2.forwardRef(
  ({ children, closeLabel = "Close modal", ...restProps }, forwardedRef) => {
    return (0, import_jsx_runtime3.jsxs)(
      Head,
      {
        ref: forwardedRef,
        padding: 4,
        paddingLeft: 5,
        paddingRight: 5,
        background: "neutral100",
        justifyContent: "space-between",
        ...restProps,
        tag: "header",
        children: [
          children,
          (0, import_jsx_runtime3.jsx)(Close, { children: (0, import_jsx_runtime3.jsx)(IconButton, { withTooltip: false, label: closeLabel, children: (0, import_jsx_runtime3.jsx)(ForwardRef$45, {}) }) })
        ]
      }
    );
  }
);
var Head = dt(Flex)`
  border-bottom: solid 1px ${(props) => props.theme.colors.neutral150};
`;
var Title = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($5d3850c4d0b4e6c7$export$f99233281efd08a0, { asChild: true, children: (0, import_jsx_runtime3.jsx)(Typography, { tag: "h2", variant: "omega", fontWeight: "bold", ref: forwardedRef, ...props }) });
});
var Body = React2.forwardRef(({ children, ...restProps }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(BodyScroll, { ref: forwardedRef, ...restProps, children });
});
var BodyScroll = dt(ScrollAreaImpl$1)`
  padding-inline: ${(props) => props.theme.spaces[8]};

  & > div {
    padding-block: ${(props) => props.theme.spaces[8]};

    & > div {
      // the scroll area component applies a display: table to the child, which we don't want.
      display: block !important;
    }
  }
`;
var Footer = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(
    Foot,
    {
      ref: forwardedRef,
      padding: 4,
      paddingLeft: 5,
      paddingRight: 5,
      background: "neutral100",
      justifyContent: "space-between",
      ...props,
      tag: "footer"
    }
  );
});
var Foot = dt(Flex)`
  border-top: solid 1px ${(props) => props.theme.colors.neutral150};
  flex: 1;
`;
var Modal = Object.freeze(Object.defineProperty({
  __proto__: null,
  Body,
  Close,
  Content: Content$2,
  Footer,
  Header,
  Root: Root$3,
  Title,
  Trigger: Trigger$2
}, Symbol.toStringTag, { value: "Module" }));
var INITIAL_VALUE = "";
var NumberInput = React2.forwardRef(
  ({ startAction, locale: defaultLocale, onValueChange, value, step = 1, disabled = false, ...props }, ref) => {
    const designContext = useDesignSystem("NumberInput");
    const locale = defaultLocale || designContext.locale;
    const numberParserRef = React2.useRef(new $6c7bd7858deea686$export$cd11ab140839f11d(locale, { style: "decimal" }));
    const numberFormaterRef = React2.useRef(new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, { maximumFractionDigits: 20 }));
    const [inputValue, setInputValue] = useControllableState({
      prop(currentInputValue) {
        const stringifiedValue = String(value);
        return isNaN(Number(stringifiedValue)) || stringifiedValue !== currentInputValue && currentInputValue !== "" ? currentInputValue : numberFormaterRef.current.format(Number(value));
      },
      defaultProp: INITIAL_VALUE,
      onChange(value2) {
        const parsedValue = numberParserRef.current.parse(value2 ?? "");
        onValueChange(isNaN(parsedValue) ? void 0 : parsedValue);
      }
    });
    const formatNumberAndSetInput = (value2) => {
      setInputValue(String(value2));
    };
    const handelInputChange = ({ target: { value: value2 } }) => {
      if (numberParserRef.current.isValidPartialNumber(value2)) {
        formatNumberAndSetInput(value2);
      }
    };
    const getDecimalPlaces = (step2) => {
      const stepString = step2.toString();
      if (!stepString.includes("."))
        return 0;
      return stepString.split(".")[1].length;
    };
    const decimalPlaces = getDecimalPlaces(step);
    const increment = () => {
      if (!inputValue) {
        formatNumberAndSetInput(step);
        return;
      }
      const parsedValue = numberParserRef.current.parse(inputValue);
      const newValue = isNaN(parsedValue) ? step : parsedValue + step;
      const roundedValue = parseFloat(newValue.toFixed(decimalPlaces));
      formatNumberAndSetInput(numberFormaterRef.current.format(roundedValue));
    };
    const decrement = () => {
      if (!inputValue) {
        formatNumberAndSetInput(-step);
        return;
      }
      const parsedValue = numberParserRef.current.parse(inputValue);
      const newValue = isNaN(parsedValue) ? -step : parsedValue - step;
      const roundedValue = parseFloat(newValue.toFixed(decimalPlaces));
      formatNumberAndSetInput(numberFormaterRef.current.format(roundedValue));
    };
    const handleKeyDown = (e) => {
      if (disabled)
        return;
      switch (e.key) {
        case KeyboardKeys.DOWN: {
          e.preventDefault();
          decrement();
          break;
        }
        case KeyboardKeys.UP: {
          e.preventDefault();
          increment();
          break;
        }
      }
    };
    const handleBlur = () => {
      if (inputValue) {
        const parsedValue = numberParserRef.current.parse(inputValue);
        const formattedValue = isNaN(parsedValue) ? "" : numberFormaterRef.current.format(parsedValue);
        formatNumberAndSetInput(formattedValue);
      }
    };
    return (0, import_jsx_runtime3.jsx)(
      Input$2,
      {
        ref,
        startAction,
        disabled,
        type: "text",
        inputMode: "decimal",
        onChange: handelInputChange,
        onKeyDown: handleKeyDown,
        onBlur: handleBlur,
        value: inputValue,
        endAction: (0, import_jsx_runtime3.jsxs)(Flex, { direction: "column", children: [
          (0, import_jsx_runtime3.jsx)(
            ArrowButton,
            {
              disabled,
              "aria-hidden": true,
              $reverse: true,
              onClick: increment,
              tabIndex: -1,
              type: "button",
              "data-testid": "ArrowUp",
              children: (0, import_jsx_runtime3.jsx)(ForwardRef$4T, { fill: "neutral500" })
            }
          ),
          (0, import_jsx_runtime3.jsx)(
            ArrowButton,
            {
              disabled,
              "aria-hidden": true,
              onClick: decrement,
              tabIndex: -1,
              type: "button",
              "data-testid": "ArrowDown",
              children: (0, import_jsx_runtime3.jsx)(ForwardRef$4T, { fill: "neutral500" })
            }
          )
        ] }),
        ...props
      }
    );
  }
);
var ArrowButton = dt.button`
  display: flex;
  justify-content: center;
  align-items: center;
  transform: translateY(${({ $reverse }) => $reverse ? `-2px` : `2px`});
  cursor: ${({ disabled }) => disabled ? "not-allowed" : void 0};
  height: 1.1rem;

  svg {
    width: 1.2rem;
    transform: ${({ $reverse }) => $reverse ? "rotateX(180deg)" : void 0};
  }
`;
function useControllableState({
  prop,
  defaultProp,
  onChange = () => {
  }
}) {
  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const propValue = prop instanceof Function ? prop(uncontrolledProp) : prop;
  const value = isControlled ? propValue : uncontrolledProp;
  const handleChange = useCallbackRef(onChange);
  const setValue = React2.useCallback(
    (nextValue) => {
      if (isControlled) {
        const setter = nextValue;
        const value2 = typeof nextValue === "function" ? setter(propValue) : nextValue;
        if (value2 !== propValue) {
          handleChange(value2);
          setUncontrolledProp(nextValue);
        }
      } else {
        setUncontrolledProp(nextValue);
      }
    },
    [isControlled, propValue, setUncontrolledProp, handleChange]
  );
  return [value, setValue];
}
var PaginationContext = React2.createContext({ activePage: 1, pageCount: 1 });
var usePagination = () => React2.useContext(PaginationContext);
var PreviousLink = forwardRef4(
  ({ children, ...props }, ref) => {
    const { activePage } = usePagination();
    const disabled = activePage === 1;
    return (0, import_jsx_runtime3.jsxs)(ActionLinkWrapper, { ref, "aria-disabled": disabled, tabIndex: disabled ? -1 : void 0, ...props, children: [
      (0, import_jsx_runtime3.jsx)(VisuallyHidden, { children }),
      (0, import_jsx_runtime3.jsx)(ForwardRef$4x, { "aria-hidden": true })
    ] });
  }
);
var NextLink = forwardRef4(
  ({ children, ...props }, ref) => {
    const { activePage, pageCount } = usePagination();
    const disabled = activePage === pageCount;
    return (0, import_jsx_runtime3.jsxs)(ActionLinkWrapper, { ref, "aria-disabled": disabled, tabIndex: disabled ? -1 : void 0, ...props, children: [
      (0, import_jsx_runtime3.jsx)(VisuallyHidden, { children }),
      (0, import_jsx_runtime3.jsx)(ForwardRef$4v, { "aria-hidden": true })
    ] });
  }
);
var LinkWrapper = dt(BaseLinkImpl)`
  padding: ${({ theme }) => theme.spaces[3]};
  border-radius: ${({ theme }) => theme.borderRadius};
  box-shadow: ${({ $active, theme }) => $active ? theme.shadows.filterShadow : void 0};
  text-decoration: none;
  display: flex;

  ${focus}
`;
var ActionLinkWrapper = dt(LinkWrapper)`
  font-size: 1.1rem;

  svg path {
    fill: ${(p) => p["aria-disabled"] ? p.theme.colors.neutral300 : p.theme.colors.neutral600};
  }

  &:focus,
  &:hover {
    svg path {
      fill: ${(p) => p["aria-disabled"] ? p.theme.colors.neutral300 : p.theme.colors.neutral700};
    }
  }

  ${(p) => p["aria-disabled"] ? `
  pointer-events: none;
    ` : void 0}
`;
var PageLink = forwardRef4(
  ({ number, children, ...props }, ref) => {
    const { activePage } = usePagination();
    const isActive = activePage === number;
    return (0, import_jsx_runtime3.jsxs)(PageLinkWrapper, { ref, ...props, "aria-current": isActive, $active: isActive, children: [
      (0, import_jsx_runtime3.jsx)(VisuallyHidden, { children }),
      (0, import_jsx_runtime3.jsx)(Typography, { "aria-hidden": true, fontWeight: isActive ? "bold" : void 0, lineHeight: "revert", variant: "pi", children: number })
    ] });
  }
);
var PageLinkWrapper = dt(LinkWrapper)`
  color: ${({ theme, $active }) => $active ? theme.colors.primary700 : theme.colors.neutral800};
  background: ${({ theme, $active }) => $active ? theme.colors.neutral0 : void 0};

  &:hover {
    box-shadow: ${({ theme }) => theme.shadows.filterShadow};
  }
`;
var Root$2 = $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9;
var Trigger$12 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($cb5cc270b50c6fcd$export$41fb9f06171c75f4, { ...props, asChild: true, ref: forwardedRef });
});
var Content$12 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)($cb5cc270b50c6fcd$export$602eac185826482c, { children: (0, import_jsx_runtime3.jsx)(PopoverContent, { sideOffset: 4, side: "bottom", align: "start", ...props, ref: forwardedRef }) });
});
var PopoverContent = dt($cb5cc270b50c6fcd$export$7c6e2c02157bb7d2)`
  box-shadow: ${({ theme }) => theme.shadows.filterShadow};
  z-index: ${({ theme }) => theme.zIndices.popover};
  background-color: ${(props) => props.theme.colors.neutral0};
  border: 1px solid ${({ theme }) => theme.colors.neutral150};
  border-radius: ${({ theme }) => theme.borderRadius};

  @media (prefers-reduced-motion: no-preference) {
    animation-duration: ${(props) => props.theme.motion.timings["200"]};

    &[data-state='open'] {
      animation-timing-function: ${(props) => props.theme.motion.easings.authenticMotion};

      &[data-side='top'] {
        animation-name: ${ANIMATIONS.slideUpIn};
      }

      &[data-side='bottom'] {
        animation-name: ${ANIMATIONS.slideDownIn};
      }
    }

    &[data-state='closed'] {
      animation-timing-function: ${(props) => props.theme.motion.easings.easeOutQuad};

      &[data-side='top'] {
        animation-name: ${ANIMATIONS.slideUpOut};
      }

      &[data-side='bottom'] {
        animation-name: ${ANIMATIONS.slideDownOut};
      }
    }
  }
`;
var ScrollAreaImpl = React2.forwardRef(
  ({ children, intersectionId, onReachEnd, ...props }, forwardedRef) => {
    const popoverRef = React2.useRef(null);
    const composedRef = useComposedRefs(popoverRef, forwardedRef);
    const generatedIntersectionId = useId();
    useIntersection(popoverRef, onReachEnd ?? (() => {
    }), {
      selectorToWatch: `#${stripReactIdOfColon(generatedIntersectionId)}`,
      skipWhen: !intersectionId || !onReachEnd
    });
    return (0, import_jsx_runtime3.jsxs)(PopoverScrollArea, { ref: composedRef, ...props, children: [
      children,
      intersectionId && onReachEnd && (0, import_jsx_runtime3.jsx)(Box, { id: stripReactIdOfColon(generatedIntersectionId), width: "100%", height: "1px" })
    ] });
  }
);
var PopoverScrollArea = dt(ScrollAreaImpl$1)`
  height: 20rem;
`;
var Popover = Object.freeze(Object.defineProperty({
  __proto__: null,
  Content: Content$12,
  Root: Root$2,
  ScrollArea: ScrollAreaImpl,
  Trigger: Trigger$12
}, Symbol.toStringTag, { value: "Module" }));
var ProgressBar = React2.forwardRef(
  ({ size = "M", value, ...restProps }, forwardedRef) => {
    return (0, import_jsx_runtime3.jsx)(ProgressRoot, { ref: forwardedRef, $size: size, ...restProps, children: (0, import_jsx_runtime3.jsx)(ProgressIndicator, { style: { transform: `translate3D(-${100 - (value ?? 0)}%, 0, 0)` } }) });
  }
);
var ProgressRoot = dt($67824d98245208a0$export$be92b6f5f03c0fe9)`
  position: relative;
  overflow: hidden;
  width: ${(props) => props.$size === "S" ? "7.8rem" : "10.2rem"};
  height: ${(props) => props.$size === "S" ? "0.4rem" : "0.8rem"};
  background-color: ${(props) => props.theme.colors.neutral600};
  border-radius: ${(props) => props.theme.borderRadius};

  /* Fix overflow clipping in Safari */
  /* https://gist.github.com/domske/b66047671c780a238b51c51ffde8d3a0 */
  transform: translateZ(0);
`;
var ProgressIndicator = dt($67824d98245208a0$export$adb584737d712b70)`
  background-color: ${({ theme }) => theme.colors.neutral0};
  border-radius: ${({ theme }) => theme.borderRadius};
  width: 100%;
  height: 100%;

  @media (prefers-reduced-motion: no-preference) {
    transition: transform ${(props) => props.theme.motion.timings["320"]}
      ${(props) => props.theme.motion.easings.authenticMotion};
  }
`;
var Group2 = React2.forwardRef((props, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(RadioGroupRoot, { ref: forwardedRef, ...props });
});
var RadioGroupRoot = dt($f99a8c78507165f7$export$be92b6f5f03c0fe9)`
  display: flex;
  flex-direction: column;
  gap: ${(props) => props.theme.spaces[3]};
`;
var Item$12 = React2.forwardRef(({ children, id: idProp, ...restProps }, forwardedRef) => {
  const id = useId(idProp);
  return (0, import_jsx_runtime3.jsxs)(Flex, { gap: 2, children: [
    (0, import_jsx_runtime3.jsx)(RadioGroupItem, { id, ref: forwardedRef, ...restProps, children: (0, import_jsx_runtime3.jsx)(RadioGroupIndicator, {}) }),
    (0, import_jsx_runtime3.jsx)(Typography, { tag: "label", htmlFor: id, children })
  ] });
});
var RadioGroupItem = dt($f99a8c78507165f7$export$6d08773d2e66f8f2)`
  background: ${(props) => props.theme.colors.neutral0};
  width: 2rem;
  height: 2rem;
  flex: 0 0 2rem;
  border-radius: 50%;
  border: 1px solid ${(props) => props.theme.colors.neutral300};
  position: relative;
  z-index: 0;

  @media (prefers-reduced-motion: no-preference) {
    transition: border-color ${(props) => props.theme.motion.timings["120"]}
      ${(props) => props.theme.motion.easings.easeOutQuad};
  }

  &[data-state='checked'] {
    border: 1px solid ${(props) => props.theme.colors.primary600};
  }

  &[data-disabled] {
    background-color: ${(props) => props.theme.colors.neutral200};
  }

  /* increase target size for touch devices https://www.w3.org/WAI/WCAG21/Understanding/target-size.html */
  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    min-width: 44px;
    min-height: 44px;
  }
`;
var RadioGroupIndicator = dt($f99a8c78507165f7$export$adb584737d712b70)`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  position: relative;

  &[data-state='checked'] {
    @media (prefers-reduced-motion: no-preference) {
      animation: ${ANIMATIONS.popIn} ${(props) => props.theme.motion.timings["200"]};
    }
  }

  &::after {
    content: '';
    display: block;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background: ${(props) => props.theme.colors.primary600};
  }
`;
var Radio = Object.freeze(Object.defineProperty({
  __proto__: null,
  Group: Group2,
  Item: Item$12
}, Symbol.toStringTag, { value: "Module" }));
var focusFocusable = (node) => {
  const nextNode = node.querySelector('[tabindex="0"]');
  if (nextNode) {
    nextNode.focus();
  }
};
var RawTableContext = React2.createContext({
  rowIndex: 0,
  colIndex: 0,
  setTableValues() {
    throw new Error("setTableValues must be initialized via the RawTableContext.Provider");
  }
});
var useTable = () => React2.useContext(RawTableContext);
var RawTable = React2.forwardRef(
  ({ colCount, rowCount, jumpStep = 3, initialCol = 0, initialRow = 0, ...props }, forwardedRef) => {
    const tableRef = React2.useRef(null);
    const mountedRef = React2.useRef(false);
    const composedRef = useComposedRefs(tableRef, forwardedRef);
    const [rowIndex, setRowIndex] = React2.useState(initialRow);
    const [colIndex, setColIndex] = React2.useState(initialCol);
    const setTableValues = React2.useCallback(({ colIndex: colIndex2, rowIndex: rowIndex2 }) => {
      setColIndex(colIndex2);
      setRowIndex(rowIndex2);
    }, []);
    React2.useEffect(() => {
      if (mountedRef.current) {
        focusFocusable(tableRef.current);
      }
      if (!mountedRef.current) {
        mountedRef.current = true;
      }
    }, [colIndex, rowIndex]);
    const handleKeyDown = (e) => {
      switch (e.key) {
        case KeyboardKeys.RIGHT: {
          e.preventDefault();
          setColIndex((prevColIndex) => prevColIndex < colCount - 1 ? prevColIndex + 1 : prevColIndex);
          break;
        }
        case KeyboardKeys.LEFT: {
          e.preventDefault();
          setColIndex((prevColIndex) => prevColIndex > 0 ? prevColIndex - 1 : prevColIndex);
          break;
        }
        case KeyboardKeys.UP: {
          e.preventDefault();
          setRowIndex((prevRowIndex) => prevRowIndex > 0 ? prevRowIndex - 1 : prevRowIndex);
          break;
        }
        case KeyboardKeys.DOWN: {
          e.preventDefault();
          setRowIndex((prevRowIndex) => prevRowIndex < rowCount - 1 ? prevRowIndex + 1 : prevRowIndex);
          break;
        }
        case KeyboardKeys.HOME: {
          e.preventDefault();
          if (e.ctrlKey) {
            setRowIndex(0);
          }
          setColIndex(0);
          break;
        }
        case KeyboardKeys.END: {
          e.preventDefault();
          if (e.ctrlKey) {
            setRowIndex(rowCount - 1);
          }
          setColIndex(colCount - 1);
          break;
        }
        case KeyboardKeys.PAGE_DOWN: {
          e.preventDefault();
          setRowIndex((prevRowIndex) => prevRowIndex + jumpStep < rowCount ? prevRowIndex + jumpStep : rowCount - 1);
          break;
        }
        case KeyboardKeys.PAGE_UP: {
          e.preventDefault();
          setRowIndex((prevRowIndex) => prevRowIndex - jumpStep > 0 ? prevRowIndex - jumpStep : 0);
          break;
        }
      }
    };
    const context = React2.useMemo(() => ({ rowIndex, colIndex, setTableValues }), [colIndex, rowIndex, setTableValues]);
    return (0, import_jsx_runtime3.jsx)(RawTableContext.Provider, { value: context, children: (0, import_jsx_runtime3.jsx)(
      "table",
      {
        role: "grid",
        ref: composedRef,
        "aria-rowcount": rowCount,
        "aria-colcount": colCount,
        onKeyDown: handleKeyDown,
        ...props
      }
    ) });
  }
);
var getFocusableNodes = (node, includeNegativeTabIndex) => {
  const nodes = [
    ...node.querySelectorAll(
      'a, button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])'
    )
  ];
  const focusables = nodes.filter((node2) => {
    if (node2.hasAttribute("disabled"))
      return false;
    if (includeNegativeTabIndex)
      return true;
    return node2.getAttribute("tabindex") !== "-1";
  });
  return focusables;
};
var getFocusableNodesWithKeyboardNav = (nodes) => {
  return nodes.filter((node) => {
    if (node.tagName === "INPUT") {
      return node.type !== "checkbox" && node.type !== "radio";
    }
    return false;
  });
};
var RawTd = React2.forwardRef(
  ({ coords = { col: 0, row: 0 }, tag = "td", ...props }, forwardedRef) => {
    const tdRef = React2.useRef(null);
    const composedRef = useComposedRefs(forwardedRef, tdRef);
    const { rowIndex, colIndex, setTableValues } = useTable();
    const [isActive, setIsActive] = React2.useState(false);
    const handleKeyDown = (e) => {
      var _a;
      const focusableNodes = getFocusableNodes(tdRef.current, true);
      if (focusableNodes.length === 0 || focusableNodes.length === 1 && getFocusableNodesWithKeyboardNav(focusableNodes).length === 0) {
        return;
      }
      if (focusableNodes.length > 1 && !focusableNodes.find((node) => node.tagName !== "BUTTON")) {
        e.preventDefault();
        const focussedButtonIndex = focusableNodes.findIndex((node) => node === document.activeElement);
        if (e.key === KeyboardKeys.RIGHT) {
          const nextNode = focusableNodes[focussedButtonIndex + 1];
          if (nextNode) {
            e.stopPropagation();
            nextNode.focus();
          }
        } else if (e.key === KeyboardKeys.LEFT) {
          const nextNode = focusableNodes[focussedButtonIndex - 1];
          if (nextNode) {
            e.stopPropagation();
            nextNode.focus();
          }
        }
        return;
      }
      const isEnterKey = e.key === KeyboardKeys.ENTER;
      if (isEnterKey && !isActive) {
        setIsActive(true);
      } else if ((e.key === KeyboardKeys.ESCAPE || isEnterKey) && isActive) {
        if (isEnterKey && ((_a = document.activeElement) == null ? void 0 : _a.tagName) === "A") {
          return;
        }
        setIsActive(false);
        tdRef.current.focus();
      } else if (isActive) {
        e.stopPropagation();
      }
    };
    const isFocused = rowIndex === coords.row - 1 && colIndex === coords.col - 1;
    useIsomorphicLayoutEffect(() => {
      const focusableNodes = getFocusableNodes(tdRef.current, true);
      if (focusableNodes.length === 0 || focusableNodes.length === 1 && getFocusableNodesWithKeyboardNav(focusableNodes).length !== 0 || focusableNodes.length > 1 && Boolean(focusableNodes.find((node) => node.tagName !== "BUTTON"))) {
        tdRef.current.setAttribute("tabIndex", !isActive && isFocused ? "0" : "-1");
        focusableNodes.forEach((node, index2) => {
          node.setAttribute("tabIndex", isActive ? "0" : "-1");
          if (isActive && index2 === 0) {
            node.focus();
          }
        });
      } else {
        focusableNodes.forEach((node) => {
          node.setAttribute("tabIndex", isFocused ? "0" : "-1");
        });
      }
    }, [isActive, isFocused]);
    const handleFocusableNodeFocus = React2.useCallback(() => {
      const focusableNodes = getFocusableNodes(tdRef.current, true);
      if (focusableNodes.length >= 1 && (getFocusableNodesWithKeyboardNav(focusableNodes).length !== 0 || !focusableNodes.find((node) => node.tagName !== "BUTTON"))) {
        setIsActive(true);
      }
      setTableValues({ rowIndex: coords.row - 1, colIndex: coords.col - 1 });
    }, [coords, setTableValues]);
    useIsomorphicLayoutEffect(() => {
      const cell = tdRef.current;
      const focusableNodes = getFocusableNodes(cell, true);
      focusableNodes.forEach((node) => {
        node.addEventListener("focus", handleFocusableNodeFocus);
      });
      return () => {
        const focusableNodes2 = getFocusableNodes(cell, true);
        focusableNodes2.forEach((node) => {
          node.removeEventListener("focus", handleFocusableNodeFocus);
        });
      };
    }, [handleFocusableNodeFocus]);
    return (0, import_jsx_runtime3.jsx)(Box, { role: "gridcell", tag, ref: composedRef, onKeyDown: handleKeyDown, ...props });
  }
);
var RawTh = (props) => (0, import_jsx_runtime3.jsx)(RawTd, { ...props, tag: "th" });
var RawThead = ({ children, ...props }) => {
  const childrenClone = React2.Children.toArray(children).map((child) => {
    if (React2.isValidElement(child)) {
      return React2.cloneElement(child, { "aria-rowindex": 1 });
    }
    return child;
  });
  return (0, import_jsx_runtime3.jsx)("thead", { ...props, children: childrenClone });
};
var RawTbody = ({ children, ...props }) => {
  const childrenClone = React2.Children.toArray(children).map((child, index2) => {
    if (React2.isValidElement(child)) {
      return React2.cloneElement(child, { "aria-rowindex": index2 + 2 });
    }
    return child;
  });
  return (0, import_jsx_runtime3.jsx)("tbody", { ...props, children: childrenClone });
};
var RawTr = ({ children, ...props }) => {
  const childrenClone = React2.Children.toArray(children).map((child, index2) => {
    if (React2.isValidElement(child)) {
      return React2.cloneElement(child, {
        "aria-colindex": index2 + 1,
        coords: { col: index2 + 1, row: props["aria-rowindex"] }
      });
    }
    return child;
  });
  return (0, import_jsx_runtime3.jsx)(Box, { tag: "tr", ...props, children: childrenClone });
};
var CloseIcon = dt(ForwardRef$45)`
  font-size: 0.5rem;
  path {
    fill: ${({ theme }) => theme.colors.neutral500};
  }
`;
var SearchIcon = dt(ForwardRef$X)`
  font-size: 1rem;
  path {
    fill: ${({ theme }) => theme.colors.neutral500};
  }
`;
var SearchbarWrapper = dt.div`
  border-radius: ${({ theme }) => theme.borderRadius};
  border: 1px solid ${({ theme }) => theme.colors.neutral150}

  &:focus-within {
    ${SearchIcon} {
      fill: ${({ theme }) => theme.colors.primary600};
    }
  }
`;
var SearchbarInput = dt(Input$2)`
  border: 1px solid ${({ theme }) => theme.colors.neutral150}
  height: 16px;
  padding: 0 0 0 8px;
  color: ${({ theme }) => theme.colors.neutral800};

  &::placeholder {
    color: ${({ theme }) => theme.colors.neutral500};
  }

  &:hover {
    button {
      cursor: pointer;
    }
  }

  ${inputFocusStyle()}
`;
var Searchbar = React2.forwardRef(
  ({ name, children, value = "", onClear, clearLabel, ...props }, ref) => {
    const inputRef = React2.useRef(null);
    const isCompleting = value.length > 0;
    const handleClear = (e) => {
      onClear(e);
      inputRef.current.focus();
    };
    const actualRef = composeRefs(ref, inputRef);
    return (0, import_jsx_runtime3.jsx)(SearchbarWrapper, { children: (0, import_jsx_runtime3.jsxs)(Root$6, { name, children: [
      (0, import_jsx_runtime3.jsx)(VisuallyHidden, { children: (0, import_jsx_runtime3.jsx)(Label2, { children }) }),
      (0, import_jsx_runtime3.jsx)(
        SearchbarInput,
        {
          size: "S",
          ref: actualRef,
          value,
          startAction: (0, import_jsx_runtime3.jsx)(SearchIcon, { "aria-hidden": true }),
          endAction: isCompleting ? (0, import_jsx_runtime3.jsx)(
            Action$1,
            {
              label: clearLabel,
              onClick: handleClear,
              onMouseDown: (e) => {
                e.preventDefault();
              },
              children: (0, import_jsx_runtime3.jsx)(CloseIcon, {})
            }
          ) : void 0,
          ...props
        }
      )
    ] }) });
  }
);
var SearchForm = (props) => (0, import_jsx_runtime3.jsx)("form", { ...props, role: "search" });
var ButtonBox$1 = dt(Box)`
  display: inline-flex;
  border: none;

  & > svg {
    height: 1.2rem;
    width: 1.2rem;
  }

  & > svg path {
    fill: ${({ theme, ...p }) => p["aria-disabled"] ? theme.colors.neutral600 : theme.colors.primary600};
  }

  &:hover {
    cursor: ${({ $iconAction }) => $iconAction ? "pointer" : "initial"};
  }
`;
var Tag = ({ children, icon, label, disabled = false, onClick, ...props }) => {
  const handleClick = (e) => {
    if (disabled || !onClick)
      return;
    onClick(e);
  };
  return (0, import_jsx_runtime3.jsxs)(
    Flex,
    {
      inline: true,
      background: disabled ? "neutral200" : "primary100",
      color: disabled ? "neutral700" : "primary600",
      paddingLeft: 3,
      paddingRight: 1,
      borderColor: disabled ? "neutral300" : "primary200",
      hasRadius: true,
      height: "3.2rem",
      ...props,
      children: [
        (0, import_jsx_runtime3.jsx)(TagText, { $disabled: disabled, variant: "pi", fontWeight: "bold", children }),
        (0, import_jsx_runtime3.jsx)(
          ButtonBox$1,
          {
            tag: "button",
            disabled,
            "aria-disabled": disabled,
            "aria-label": label,
            padding: 2,
            onClick: handleClick,
            $iconAction: !!onClick,
            children: icon
          }
        )
      ]
    }
  );
};
var TagText = dt(Typography)`
  color: inherit;
  border-right: 1px solid ${({ theme, $disabled }) => $disabled ? theme.colors.neutral300 : theme.colors.primary200};
  padding-right: ${({ theme }) => theme.spaces[2]};
`;
var MultiSelect = React2.forwardRef(
  ({
    children,
    clearLabel = "Clear",
    customizeContent,
    disabled,
    hasError: hasErrorProp,
    id: idProp,
    name: nameProp,
    onChange,
    onClear,
    onCloseAutoFocus,
    onReachEnd,
    placeholder,
    required: requiredProp,
    size,
    startIcon,
    value: passedValue,
    withTags,
    ...restProps
  }, forwardedRef) => {
    const viewportRef = React2.useRef(null);
    const [internalValue, setInternalValue] = React2.useState();
    const [internalIsOpen, setInternalIsOpen] = React2.useState(false);
    const handleValueChange = (value2) => {
      if (onChange) {
        onChange(value2);
      } else {
        setInternalValue(value2);
      }
    };
    const handleTagClick = (value2) => () => {
      const newValue = Array.isArray(passedValue) ? passedValue.filter((val) => val !== value2) : (internalValue ?? []).filter((val) => val !== value2);
      if (onChange) {
        onChange(newValue);
      } else {
        setInternalValue(newValue);
      }
    };
    const handleOpenChange = (open) => {
      setInternalIsOpen(open);
    };
    const generatedIntersectionId = useId();
    const intersectionId = `intersection-${stripReactIdOfColon(generatedIntersectionId)}`;
    const handleReachEnd = (entry) => {
      if (onReachEnd) {
        onReachEnd(entry);
      }
    };
    useIntersection(viewportRef, handleReachEnd, {
      selectorToWatch: `#${intersectionId}`,
      /**
       * We need to know when the select is open because only then will viewportRef
       * not be null. Because it uses a portal that (sensibly) is not mounted 24/7.
       */
      skipWhen: !internalIsOpen
    });
    const value = typeof passedValue !== "undefined" && passedValue !== null ? passedValue : internalValue;
    const renderTags = (arg) => {
      if (arg && typeof arg === "object" && arg.value) {
        return (0, import_jsx_runtime3.jsx)(
          Tag,
          {
            tabIndex: -1,
            disabled,
            icon: (0, import_jsx_runtime3.jsx)(ForwardRef$45, { width: `${14 / 16}rem`, height: `${14 / 16}rem` }),
            onClick: handleTagClick(arg.value),
            children: arg.textValue
          },
          arg.value
        );
      }
      return null;
    };
    const { error, ...field } = useField("MultiSelect");
    const hasError = Boolean(error) || hasErrorProp;
    const id = field.id ?? idProp;
    const name = field.name ?? nameProp;
    const required = field.required ?? requiredProp;
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (field.hint) {
      ariaDescription = `${id}-hint`;
    }
    return (0, import_jsx_runtime3.jsxs)(
      Root$4,
      {
        onOpenChange: handleOpenChange,
        disabled,
        required,
        onValueChange: handleValueChange,
        value,
        ...restProps,
        multi: true,
        children: [
          (0, import_jsx_runtime3.jsx)(
            Trigger$3,
            {
              ref: forwardedRef,
              id,
              name,
              "aria-label": restProps["aria-label"],
              "aria-describedby": ariaDescription ?? restProps["aria-describedby"],
              startIcon,
              hasError,
              disabled,
              clearLabel,
              onClear: (value == null ? void 0 : value.length) ? onClear : void 0,
              withTags: Boolean(withTags && ((value == null ? void 0 : value.length) ?? 0 > 0)),
              size,
              children: (0, import_jsx_runtime3.jsx)(Value2, { placeholder, textColor: (value == null ? void 0 : value.length) ? "neutral800" : "neutral600", children: (value == null ? void 0 : value.length) ? withTags ? renderTags : customizeContent ? customizeContent(value) : void 0 : void 0 })
            }
          ),
          (0, import_jsx_runtime3.jsx)(Portal2, { children: (0, import_jsx_runtime3.jsx)(Content$3, { position: "popper", sideOffset: 4, onCloseAutoFocus, children: (0, import_jsx_runtime3.jsxs)(Viewport2, { ref: viewportRef, children: [
            children,
            (0, import_jsx_runtime3.jsx)(Box, { id: intersectionId, width: "100%", height: "1px" })
          ] }) }) })
        ]
      }
    );
  }
);
var MultiSelectOption = React2.forwardRef(
  ({ value, children, startIcon, ...restProps }, ref) => {
    return (0, import_jsx_runtime3.jsxs)(Item$2, { ref, value: value.toString(), ...restProps, children: [
      startIcon && (0, import_jsx_runtime3.jsx)(Box, { tag: "span", "aria-hidden": true, children: startIcon }),
      (0, import_jsx_runtime3.jsx)(ItemIndicator2, { children: ({ isSelected, isIntermediate }) => (0, import_jsx_runtime3.jsx)(CheckboxImpl, { checked: isIntermediate ? "indeterminate" : isSelected }) }),
      (0, import_jsx_runtime3.jsx)(Typography, { children: (0, import_jsx_runtime3.jsx)(ItemText2, { children }) })
    ] });
  }
);
var MultiSelectGroup = React2.forwardRef(
  ({ children, label, startIcon, values = [], ...restProps }, ref) => {
    return (0, import_jsx_runtime3.jsxs)(Group$1, { ref, children: [
      (0, import_jsx_runtime3.jsxs)(Item$2, { value: values, ...restProps, children: [
        startIcon && (0, import_jsx_runtime3.jsx)(Box, { tag: "span", "aria-hidden": true, children: startIcon }),
        (0, import_jsx_runtime3.jsx)(ItemIndicator2, { children: ({ isSelected, isIntermediate }) => (0, import_jsx_runtime3.jsx)(CheckboxImpl, { checked: isIntermediate ? "indeterminate" : isSelected }) }),
        (0, import_jsx_runtime3.jsx)(Typography, { children: label })
      ] }),
      children
    ] });
  }
);
var MultiSelectNested = ({ options, ...props }) => {
  return (0, import_jsx_runtime3.jsx)(MultiSelect, { ...props, children: options.map((opt) => {
    if ("children" in opt) {
      return (0, import_jsx_runtime3.jsx)(
        MultiSelectGroup,
        {
          label: opt.label,
          values: opt.children.map((child) => child.value.toString()),
          children: opt.children.map((child) => (0, import_jsx_runtime3.jsx)(NestedOption, { value: child.value, children: child.label }, child.value))
        },
        opt.label
      );
    }
    return (0, import_jsx_runtime3.jsx)(MultiSelectOption, { value: opt.value, children: opt.label }, opt.value);
  }) });
};
var NestedOption = dt(MultiSelectOption)`
  padding-left: ${({ theme }) => theme.spaces[7]};
`;
var SUBNAV_WIDTH = `23.2rem`;
var SubNav = React2.forwardRef(({ ...props }, ref) => {
  return (0, import_jsx_runtime3.jsx)(SubNavWrapper, { ref, ...props, tag: "nav" });
});
var SubNavWrapper = dt(Box)`
  width: ${SUBNAV_WIDTH};
  background: ${({ theme }) => theme.colors.neutral100};
  position: sticky;
  top: 0;
  height: 100vh;
  overflow-y: auto;
  border-right: 1px solid ${({ theme }) => theme.colors.neutral200};
  z-index: 1;
`;
var CustomDivider = dt(Divider)`
  width: 2.4rem;
  background-color: ${({ theme }) => theme.colors.neutral200};
`;
var SubNavHeader = ({
  tag = "h2",
  label,
  searchLabel = "",
  searchable = false,
  onChange = () => {
  },
  value = "",
  onClear = () => {
  },
  onSubmit = () => {
  },
  id,
  placeholder
}) => {
  const [isSearchOpen, setSearchOpen] = React2.useState(false);
  const previousSearchOpenValue = usePrev(isSearchOpen);
  const clearButtonId = useId(id);
  const searchRef = React2.useRef(void 0);
  const searchButtonRef = React2.useRef(void 0);
  React2.useEffect(() => {
    if (isSearchOpen && searchRef.current) {
      searchRef.current.focus();
    }
    if (previousSearchOpenValue && !isSearchOpen && searchButtonRef.current) {
      searchButtonRef.current.focus();
    }
  }, [isSearchOpen, previousSearchOpenValue]);
  const toggleSearch = () => {
    setSearchOpen((isOpen) => !isOpen);
  };
  const handleClear = (e) => {
    onClear(e);
    searchRef.current.focus();
  };
  const handleBlur = (e) => {
    var _a;
    if (((_a = e.relatedTarget) == null ? void 0 : _a.id) !== clearButtonId) {
      setSearchOpen(false);
    }
  };
  const handleKeyDown = (e) => {
    if (e.key === KeyboardKeys.ESCAPE) {
      setSearchOpen(false);
    }
  };
  if (isSearchOpen) {
    return (0, import_jsx_runtime3.jsxs)(Box, { paddingLeft: 4, paddingTop: 5, paddingBottom: 2, paddingRight: 4, children: [
      (0, import_jsx_runtime3.jsx)(SearchForm, { children: (0, import_jsx_runtime3.jsx)(
        Searchbar,
        {
          name: "searchbar",
          value,
          onChange,
          placeholder,
          onKeyDown: handleKeyDown,
          ref: searchRef,
          onBlur: handleBlur,
          onClear: handleClear,
          onSubmit,
          clearLabel: "Clear",
          children: searchLabel
        }
      ) }),
      (0, import_jsx_runtime3.jsx)(Box, { paddingLeft: 2, paddingTop: 4, children: (0, import_jsx_runtime3.jsx)(CustomDivider, {}) })
    ] });
  }
  return (0, import_jsx_runtime3.jsxs)(Flex, { direction: "column", alignItems: "flex-start", paddingLeft: 6, paddingTop: 6, paddingBottom: 2, paddingRight: 4, children: [
    (0, import_jsx_runtime3.jsxs)(Flex, { justifyContent: "space-between", alignItems: "flex-start", width: "100%", gap: 2, children: [
      (0, import_jsx_runtime3.jsx)(Typography, { variant: "beta", tag, children: label }),
      searchable && (0, import_jsx_runtime3.jsx)(IconButton, { ref: searchButtonRef, onClick: toggleSearch, label: searchLabel, children: (0, import_jsx_runtime3.jsx)(ForwardRef$X, {}) })
    ] }),
    (0, import_jsx_runtime3.jsx)(Box, { paddingTop: 4, children: (0, import_jsx_runtime3.jsx)(CustomDivider, {}) })
  ] });
};
var SubNavLink = forwardRef4(
  ({ active, children, icon = null, withBullet = false, isSubSectionChild = false, ...props }, ref) => {
    return (0, import_jsx_runtime3.jsxs)(
      SubNavLinkWrapper,
      {
        background: "neutral100",
        paddingLeft: isSubSectionChild ? 9 : 7,
        paddingBottom: 2,
        paddingTop: 2,
        ref,
        ...props,
        children: [
          (0, import_jsx_runtime3.jsxs)(Flex, { children: [
            icon ? (0, import_jsx_runtime3.jsx)(IconWrapper, { children: icon }) : (0, import_jsx_runtime3.jsx)(CustomBullet, { $active: active }),
            (0, import_jsx_runtime3.jsx)(Typography, { paddingLeft: 2, children })
          ] }),
          withBullet && (0, import_jsx_runtime3.jsx)(Flex, { paddingRight: 4, children: (0, import_jsx_runtime3.jsx)(CustomBullet, { $active: true }) })
        ]
      }
    );
  }
);
var CustomBullet = dt.span`
  width: 0.4rem;
  height: 0.4rem;
  background-color: ${({ theme, $active }) => $active ? theme.colors.primary600 : theme.colors.neutral600};
  border-radius: 50%;
`;
var SubNavLinkWrapper = dt(BaseLinkImpl)`
  display: flex;
  align-items: center;
  justify-content: space-between;
  text-decoration: none;
  color: ${({ theme }) => theme.colors.neutral800};
  svg > * {
    fill: ${({ theme }) => theme.colors.neutral600};
  }

  &.active {
    ${({ theme }) => {
  return lt`
        background-color: ${theme.colors.primary100};
        border-right: 2px solid ${theme.colors.primary600};
        color: ${theme.colors.primary700};
        font-weight: 500;
      `;
}}

    ${CustomBullet} {
      background-color: ${({ theme }) => theme.colors.primary600};
    }
  }

  &:focus-visible {
    outline-offset: -2px;
  }
`;
var IconWrapper = dt.div`
  svg {
    height: 1.6rem;
    width: 1.6rem;
  }
`;
var SubNavLinkSectionButton = dt.button`
  border: none;
  padding: 0;
  background: transparent;
  display: flex;
  align-items: center;
`;
var SubNavLinkSection = ({ label, children, id }) => {
  const [isOpen, setOpenLinks] = React2.useState(true);
  const listId = useId(id);
  const handleClick = () => {
    setOpenLinks((prev) => !prev);
  };
  return (0, import_jsx_runtime3.jsxs)(Box, { children: [
    (0, import_jsx_runtime3.jsx)(Box, { paddingLeft: 7, paddingTop: 2, paddingBottom: 2, paddingRight: 4, children: (0, import_jsx_runtime3.jsx)(Flex, { justifyContent: "space-between", children: (0, import_jsx_runtime3.jsxs)(SubNavLinkSectionButton, { onClick: handleClick, "aria-expanded": isOpen, "aria-controls": listId, children: [
      (0, import_jsx_runtime3.jsx)(
        ForwardRef$4T,
        {
          width: "1.2rem",
          height: "1.2rem",
          "aria-hidden": true,
          fill: "neutral700",
          style: { transform: `rotateX(${isOpen ? "0deg" : "180deg"})` }
        }
      ),
      (0, import_jsx_runtime3.jsx)(Box, { paddingLeft: 2, children: (0, import_jsx_runtime3.jsx)(Typography, { tag: "span", fontWeight: "semiBold", textColor: "neutral800", children: label }) })
    ] }) }) }),
    isOpen && (0, import_jsx_runtime3.jsx)("ul", { id: listId, children: React2.Children.map(children, (child, index2) => {
      return (0, import_jsx_runtime3.jsx)("li", { children: child }, index2);
    }) })
  ] });
};
var SubNavSectionLabel = ({
  collapsable = false,
  label,
  onClick = () => {
  },
  ariaExpanded,
  ariaControls
}) => {
  if (collapsable) {
    return (0, import_jsx_runtime3.jsxs)(
      Flex,
      {
        tag: "button",
        onClick,
        "aria-expanded": ariaExpanded,
        "aria-controls": ariaControls,
        textAlign: "left",
        alignItems: "center",
        children: [
          (0, import_jsx_runtime3.jsx)(Box, { paddingRight: 1, children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: label }) }),
          collapsable && (0, import_jsx_runtime3.jsx)(
            ForwardRef$4T,
            {
              width: "1.2rem",
              "aria-hidden": true,
              fill: "neutral500",
              style: { transform: ariaExpanded ? "rotateX(0deg)" : "rotateX(180deg)" }
            }
          )
        ]
      }
    );
  }
  return (0, import_jsx_runtime3.jsx)(Flex, { children: (0, import_jsx_runtime3.jsx)(Box, { paddingRight: 1, children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "sigma", textColor: "neutral600", children: label }) }) });
};
var SubNavSectionWrapper = dt(Box)`
  & > svg {
    height: 0.4rem;
    fill: ${({ theme }) => theme.colors.neutral500};
  }
`;
var SubNavSection = ({ collapsable = false, label, badgeLabel, children, id }) => {
  const [isOpen, setOpenLinks] = React2.useState(true);
  const listId = useId(id);
  const handleClick = () => {
    setOpenLinks((prev) => !prev);
  };
  return (0, import_jsx_runtime3.jsxs)(Flex, { direction: "column", alignItems: "stretch", gap: 1, children: [
    (0, import_jsx_runtime3.jsx)(SubNavSectionWrapper, { paddingLeft: 6, paddingTop: 2, paddingBottom: 2, paddingRight: 4, children: (0, import_jsx_runtime3.jsxs)(Box, { position: "relative", paddingRight: badgeLabel ? 6 : 0, children: [
      (0, import_jsx_runtime3.jsx)(
        SubNavSectionLabel,
        {
          onClick: handleClick,
          ariaExpanded: isOpen,
          ariaControls: listId,
          collapsable,
          label
        }
      ),
      badgeLabel && (0, import_jsx_runtime3.jsx)(
        Badge,
        {
          backgroundColor: "neutral150",
          textColor: "neutral600",
          position: "absolute",
          right: 0,
          top: "50%",
          transform: "translateY(-50%)",
          children: badgeLabel
        }
      )
    ] }) }),
    (!collapsable || isOpen) && (0, import_jsx_runtime3.jsx)("ol", { id: listId, children: React2.Children.map(children, (child, index2) => {
      return (0, import_jsx_runtime3.jsx)("li", { children: child }, index2);
    }) })
  ] });
};
var SubNavSections = ({ children, spacing = 2, horizontal = false, ...props }) => {
  return (0, import_jsx_runtime3.jsx)(Box, { paddingTop: 2, paddingBottom: 4, children: (0, import_jsx_runtime3.jsx)(
    Flex,
    {
      tag: "ol",
      gap: spacing,
      direction: horizontal ? "row" : "column",
      alignItems: horizontal ? "center" : "stretch",
      ...props,
      children: React2.Children.map(children, (child, index2) => {
        return (0, import_jsx_runtime3.jsx)("li", { children: child }, index2);
      })
    }
  ) });
};
var SwitchImpl = React2.forwardRef(
  ({
    visibleLabels,
    onLabel = "On",
    offLabel = "Off",
    onCheckedChange: onCheckedChangeProp,
    checked: checkedProp,
    defaultChecked,
    disabled,
    ...restProps
  }, forwardedRef) => {
    const [internalChecked, setInternalChecked] = useControllableState$1({
      prop: checkedProp,
      defaultProp: defaultChecked
    });
    const handleCheckChange = (checked) => {
      setInternalChecked(checked);
    };
    return (0, import_jsx_runtime3.jsxs)(Flex, { gap: 3, children: [
      (0, import_jsx_runtime3.jsx)(
        SwitchRoot,
        {
          ref: forwardedRef,
          onCheckedChange: composeEventHandlers(onCheckedChangeProp, handleCheckChange),
          checked: internalChecked,
          disabled,
          ...restProps,
          children: (0, import_jsx_runtime3.jsx)(SwitchThumb, {})
        }
      ),
      visibleLabels ? (0, import_jsx_runtime3.jsx)(LabelTypography, { "aria-hidden": true, "data-disabled": disabled, "data-state": internalChecked ? "checked" : "unchecked", children: internalChecked ? onLabel : offLabel }) : null
    ] });
  }
);
var SwitchRoot = dt($6be4966fd9bbc698$export$be92b6f5f03c0fe9)`
  width: 4rem;
  height: 2.4rem;
  border-radius: 1.2rem;
  background-color: ${({ theme }) => theme.colors.danger500};

  &[data-state='checked'] {
    background-color: ${({ theme }) => theme.colors.success500};
  }

  &[data-disabled] {
    background-color: ${({ theme }) => theme.colors.neutral300};
  }

  @media (prefers-reduced-motion: no-preference) {
    transition: ${(props) => props.theme.transitions.backgroundColor};
  }
`;
var SwitchThumb = dt($6be4966fd9bbc698$export$6521433ed15a34db)`
  display: block;
  height: 1.6rem;
  width: 1.6rem;
  border-radius: 50%;
  background-color: ${({ theme }) => theme.colors.neutral0};
  transform: translateX(4px);

  &[data-state='checked'] {
    transform: translateX(20px);
  }

  @media (prefers-reduced-motion: no-preference) {
    transition: transform ${(props) => props.theme.motion.timings["120"]}
      ${(props) => props.theme.motion.easings.authenticMotion};
  }
`;
var LabelTypography = dt(Typography)`
  color: ${(props) => props.theme.colors.danger600};

  &[data-state='checked'] {
    color: ${(props) => props.theme.colors.success600};
  }

  &[data-disabled='true'] {
    color: ${({ theme }) => theme.colors.neutral500};
  }
`;
var [TabsProvider, useTabs] = createContext2("Tabs");
var Root$12 = React2.forwardRef(
  ({ disabled = false, variant: variant2 = "regular", hasError, ...props }, forwardedRef) => {
    return (0, import_jsx_runtime3.jsx)(TabsProvider, { disabled, hasError, variant: variant2, children: (0, import_jsx_runtime3.jsx)(TabsRoot, { ref: forwardedRef, ...props }) });
  }
);
var TabsRoot = dt($69cb30bb0017df05$export$be92b6f5f03c0fe9)`
  width: 100%;
  position: relative;
`;
var List = React2.forwardRef((props, forwardedRef) => {
  const { variant: variant2 } = useTabs("List");
  return (0, import_jsx_runtime3.jsx)(TabsList, { ref: forwardedRef, ...props, $variant: variant2 });
});
var TabsList = dt($69cb30bb0017df05$export$54c2e3dc7acea9f5)`
  display: flex;
  align-items: ${(props) => props.$variant === "regular" ? "flex-end" : "unset"};
  position: relative;
  z-index: 0;
`;
var Trigger2 = React2.forwardRef(
  ({ children, disabled: disabledProp, ...props }, forwardedRef) => {
    const { disabled: disabledContext, variant: variant2, hasError } = useTabs("Trigger");
    const isDisabled = disabledContext === true || disabledContext === props.value || disabledProp;
    const isErrored = hasError === props.value;
    return (0, import_jsx_runtime3.jsxs)(TabsTrigger, { ref: forwardedRef, ...props, $hasError: isErrored, $variant: variant2, disabled: isDisabled, children: [
      (0, import_jsx_runtime3.jsx)(TriggerTypography, { fontWeight: "bold", variant: variant2 === "simple" ? "sigma" : void 0, children }),
      variant2 === "simple" ? (0, import_jsx_runtime3.jsx)(TabBar, {}) : null
    ] });
  }
);
var TabBar = dt.span`
  display: block;
  width: 100%;
  background-color: currentColor;
  position: absolute;
  bottom: 0;
  left: 0;
  opacity: 0;
  height: 0.2rem;
`;
var TriggerTypography = dt(Typography)``;
var TabsTrigger = dt($69cb30bb0017df05$export$41fb9f06171c75f4)`
  position: relative;
  color: ${(props) => props.$hasError ? props.theme.colors.danger600 : props.theme.colors.neutral600};
  cursor: pointer;
  z-index: 0;

  ${(props) => {
  if (props.$variant === "simple") {
    return lt`
        padding-block: ${(props2) => props2.theme.spaces[4]};
        padding-inline: ${(props2) => props2.theme.spaces[4]};

        & > ${TriggerTypography} {
          line-height: 1.2rem;
        }

        &[data-state='active'] {
          color: ${props.$hasError ? props.theme.colors.danger600 : props.theme.colors.primary700};

          & > ${TabBar} {
            opacity: 1;
          }
        }
      `;
  } else {
    return lt`
        padding-block: ${(props2) => props2.theme.spaces[3]};
        padding-inline: ${(props2) => props2.theme.spaces[3]};
        flex: 1;
        background-color: ${(props2) => props2.theme.colors.neutral100};
        border-bottom: solid 1px ${(props2) => props2.theme.colors.neutral150};

        &:not([data-state='active']) + &:not([data-state='active']) {
          border-left: solid 1px ${(props2) => props2.theme.colors.neutral150};
        }

        &[data-state='active'] {
          padding-block: ${(props2) => props2.theme.spaces[4]};
          padding-inline: ${(props2) => props2.theme.spaces[4]};
          color: ${props.$hasError ? props.theme.colors.danger600 : props.theme.colors.primary700};
          border-top-right-radius: ${(props2) => props2.theme.borderRadius};
          border-top-left-radius: ${(props2) => props2.theme.borderRadius};
          background-color: ${(props2) => props2.theme.colors.neutral0};
          border-bottom: solid 1px ${(props2) => props2.theme.colors.neutral0};
          box-shadow: ${props.theme.shadows.tableShadow};
          z-index: 1;
        }
      `;
  }
}}

  &[data-disabled] {
    cursor: not-allowed;
    color: ${(props) => props.theme.colors.neutral400};
  }
`;
var Content2 = React2.forwardRef((props, forwardedRef) => {
  const { variant: variant2 } = useTabs("Content");
  return (0, import_jsx_runtime3.jsx)(TabsContent, { $variant: variant2, ref: forwardedRef, ...props });
});
var TabsContent = dt($69cb30bb0017df05$export$7c6e2c02157bb7d2)`
  ${(props) => {
  if (props.$variant === "simple") {
    return lt``;
  } else {
    return lt`
        position: relative;
        z-index: 1;
        background-color: ${(props2) => props2.theme.colors.neutral0};
      `;
  }
}}
`;
var Tabs = Object.freeze(Object.defineProperty({
  __proto__: null,
  Content: Content2,
  List,
  Root: Root$12,
  Trigger: Trigger2
}, Symbol.toStringTag, { value: "Module" }));
var TableContainer = dt(Box)`
  overflow: hidden;
  border: 1px solid ${({ theme }) => theme.colors.neutral150};
`;
var TableWrapper = dt(RawTable)`
  width: 100%;
  white-space: nowrap;
`;
var TableBox = dt(Box)`
  &:before {
    // TODO: make sure to add a token for this weird stuff
    background: linear-gradient(90deg, #c0c0cf 0%, rgba(0, 0, 0, 0) 100%);
    opacity: 0.2;
    position: absolute;
    height: 100%;
    content: ${({ $overflowing }) => $overflowing === "both" || $overflowing === "left" ? "''" : void 0};
    box-shadow: ${({ theme }) => theme.shadows.tableShadow};
    width: ${({ theme }) => theme.spaces[2]};
    left: 0;
  }

  &:after {
    // TODO: make sure to add a token for this weird stuff
    background: linear-gradient(270deg, #c0c0cf 0%, rgba(0, 0, 0, 0) 100%);
    opacity: 0.2;
    position: absolute;
    height: 100%;
    content: ${({ $overflowing }) => $overflowing === "both" || $overflowing === "right" ? "''" : void 0};
    box-shadow: ${({ theme }) => theme.shadows.tableShadow};
    width: ${({ theme }) => theme.spaces[2]};
    right: 0;
    top: 0;
  }
`;
var ScrollContainer = dt(Box)`
  overflow-x: auto;
`;
var Table = React2.forwardRef(({ footer, ...props }, forwardedRef) => {
  const tableRef = React2.useRef(null);
  const [overflowing, setOverflowing] = React2.useState();
  const handleScroll = (e) => {
    const maxScrollLeft = e.target.scrollWidth - e.target.clientWidth;
    if (e.target.scrollLeft === 0) {
      setOverflowing("right");
      return;
    }
    if (e.target.scrollLeft === maxScrollLeft) {
      setOverflowing("left");
      return;
    }
    if (e.target.scrollLeft > 0) {
      setOverflowing("both");
    }
  };
  React2.useEffect(() => {
    if (tableRef.current.scrollWidth > tableRef.current.clientWidth) {
      setOverflowing("right");
    }
  }, []);
  return (0, import_jsx_runtime3.jsxs)(TableContainer, { shadow: "tableShadow", hasRadius: true, background: "neutral0", children: [
    (0, import_jsx_runtime3.jsx)(TableBox, { $overflowing: overflowing, position: "relative", children: (0, import_jsx_runtime3.jsx)(ScrollContainer, { ref: tableRef, onScroll: handleScroll, paddingLeft: 6, paddingRight: 6, children: (0, import_jsx_runtime3.jsx)(TableWrapper, { ref: forwardedRef, ...props }) }) }),
    footer
  ] });
});
var TbodyWrapper = dt(RawTbody)`
  & tr:last-of-type {
    border-bottom: none;
  }
`;
var Tbody = ({ children, ...props }) => {
  return (0, import_jsx_runtime3.jsx)(TbodyWrapper, { ...props, children });
};
var TheadWrapper = dt(RawThead)`
  border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};
`;
var Thead = ({ children, ...props }) => {
  return (0, import_jsx_runtime3.jsx)(TheadWrapper, { ...props, children });
};
var TrWrapper = dt(RawTr)`
  border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};

  & td,
  & th {
    padding: ${({ theme }) => theme.spaces[4]};
  }

  & td:first-of-type,
  & th:first-of-type {
    padding: 0 ${({ theme }) => theme.spaces[1]};
  }

  // Resetting padding values and fixing a height
  th {
    padding-top: 0;
    padding-bottom: 0;
    height: 5.6rem;
  }
`;
var Tr = (props) => {
  return (0, import_jsx_runtime3.jsx)(TrWrapper, { ...props });
};
var CellWrapper = dt(RawTd)`
  vertical-align: middle;
  text-align: left;
  outline-offset: -4px;

  /**
  * Hack to make sure the checkbox looks aligned
  */
  input {
    vertical-align: sub;
  }
`;
var Th = React2.forwardRef(({ children, action, ...props }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(CellWrapper, { color: "neutral600", as: RawTh, ref: forwardedRef, ...props, children: (0, import_jsx_runtime3.jsxs)(Flex, { children: [
    children,
    action
  ] }) });
});
var Td = React2.forwardRef(({ children, ...props }, forwardedRef) => {
  return (0, import_jsx_runtime3.jsx)(CellWrapper, { color: "neutral800", ref: forwardedRef, ...props, children });
});
var IconBox = dt(Box)`
  height: 2.4rem;
  width: 2.4rem;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;

  svg {
    height: 1rem;
    width: 1rem;
  }

  svg path {
    fill: ${({ theme }) => theme.colors.primary600};
  }
`;
var ButtonBox = dt(Box)`
  border-radius: 0 0 ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius};
  display: block;
  width: 100%;
  border: none;
`;
var TFooter = ({ children, icon, ...props }) => {
  return (0, import_jsx_runtime3.jsxs)("div", { children: [
    (0, import_jsx_runtime3.jsx)(Divider, {}),
    (0, import_jsx_runtime3.jsx)(ButtonBox, { tag: "button", background: "primary100", padding: 5, ...props, children: (0, import_jsx_runtime3.jsxs)(Flex, { children: [
      (0, import_jsx_runtime3.jsx)(IconBox, { "aria-hidden": true, background: "primary200", children: icon }),
      (0, import_jsx_runtime3.jsx)(Box, { paddingLeft: 3, children: (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", fontWeight: "bold", textColor: "primary600", children }) })
    ] }) })
  ] });
};
var TextButton = forwardRef4(
  ({ children, startIcon, endIcon, disabled = false, loading = false, ...props }, ref) => {
    const isDisabled = disabled || loading;
    return (0, import_jsx_runtime3.jsxs)(
      TextButtonWrapper,
      {
        ref,
        disabled: isDisabled,
        "aria-disabled": isDisabled,
        tag: "button",
        type: "button",
        gap: 2,
        ...props,
        children: [
          loading ? (0, import_jsx_runtime3.jsx)(LoadingWrapper, { "aria-hidden": true, children: (0, import_jsx_runtime3.jsx)(ForwardRef$2j, {}) }) : startIcon,
          (0, import_jsx_runtime3.jsx)(Typography, { variant: "pi", children }),
          endIcon
        ]
      }
    );
  }
);
var rotation = mt`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
`;
var LoadingWrapper = dt.span`
  display: flex;
  animation: ${rotation} 2s infinite linear;
  will-change: transform;
`;
var TextButtonWrapper = dt(Flex)`
  border: none;
  background-color: transparent;
  color: ${(props) => props.theme.colors.primary600};
  cursor: pointer;

  &[aria-disabled='true'] {
    pointer-events: none;
    color: ${(props) => props.theme.colors.neutral600};
  }

  ${focus}
`;
var TextInput2 = React2.forwardRef((props, ref) => {
  return (0, import_jsx_runtime3.jsx)(Input$2, { ref, ...props });
});
TextInput2.displayName = "TextInput";
var Textarea = React2.forwardRef(
  ({ disabled, hasError: hasErrorProp, id: idProp, name: nameProp, required: requiredProp, ...props }, ref) => {
    const { error, ...field } = useField("Textarea");
    const hasError = Boolean(error) || hasErrorProp;
    const id = field.id ?? idProp;
    const name = field.name ?? nameProp;
    const required = field.required || requiredProp;
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (field.hint) {
      ariaDescription = `${id}-hint`;
    }
    return (0, import_jsx_runtime3.jsx)(Wrapper$1, { borderColor: hasError ? "danger600" : "neutral200", $hasError: hasError, hasRadius: true, children: (0, import_jsx_runtime3.jsx)(
      TextareaElement,
      {
        "aria-invalid": hasError,
        "aria-required": required,
        tag: "textarea",
        background: disabled ? "neutral150" : "neutral0",
        color: disabled ? "neutral600" : "neutral800",
        disabled,
        fontSize: 2,
        hasRadius: true,
        ref,
        lineHeight: 4,
        padding: 4,
        width: "100%",
        height: "100%",
        id,
        name,
        "aria-describedby": ariaDescription,
        ...props
      }
    ) });
  }
);
var Wrapper$1 = dt(Box)`
  height: 10.5rem;
  ${inputFocusStyle()}
`;
var TextareaElement = dt(Box)`
  border: none;
  resize: none;

  ::placeholder {
    color: ${({ theme }) => theme.colors.neutral500};
    font-size: ${({ theme }) => theme.fontSizes[2]};
    color: ${({ theme }) => theme.colors.neutral500};
    opacity: 1;
  }

  &:focus-within {
    outline: none;
  }
`;
var Toggle = React2.forwardRef(
  ({
    offLabel,
    onLabel,
    disabled,
    hasError: hasErrorProp,
    required: requiredProp,
    id: idProp,
    name: nameProp,
    checked: checkedProp,
    onChange,
    ...props
  }, forwardedRef) => {
    const [checked = false, setChecked] = useControllableState$1({
      prop: checkedProp
    });
    const isFalseyChecked = checked !== null && !checked;
    const { error, ...field } = useField("Toggle");
    const hasError = Boolean(error) || hasErrorProp;
    const id = field.id ?? idProp;
    const name = field.name ?? nameProp;
    const required = field.required || requiredProp;
    let ariaDescription;
    if (error) {
      ariaDescription = `${id}-error`;
    } else if (field.hint) {
      ariaDescription = `${id}-hint`;
    }
    return (0, import_jsx_runtime3.jsxs)(
      ToggleWrapper,
      {
        position: "relative",
        hasRadius: true,
        padding: 1,
        background: disabled ? "neutral150" : "neutral100",
        borderStyle: "solid",
        borderWidth: "1px",
        borderColor: "neutral200",
        wrap: "wrap",
        cursor: disabled ? "not-allowed" : "pointer",
        $hasError: hasError,
        children: [
          (0, import_jsx_runtime3.jsx)(
            ToggleOption,
            {
              hasRadius: true,
              flex: "1 1 50%",
              paddingTop: 2,
              paddingBottom: 2,
              paddingLeft: 3,
              paddingRight: 3,
              justifyContent: "center",
              background: disabled && isFalseyChecked ? "neutral200" : isFalseyChecked ? "neutral0" : "transparent",
              borderColor: disabled && isFalseyChecked ? "neutral300" : isFalseyChecked ? "neutral200" : disabled ? "neutral150" : "neutral100",
              children: (0, import_jsx_runtime3.jsx)(
                Typography,
                {
                  variant: "pi",
                  fontWeight: "bold",
                  textTransform: "uppercase",
                  textColor: disabled ? "neutral700" : isFalseyChecked ? "danger700" : "neutral600",
                  children: offLabel
                }
              )
            }
          ),
          (0, import_jsx_runtime3.jsx)(
            ToggleOption,
            {
              hasRadius: true,
              flex: "1 1 50%",
              paddingLeft: 3,
              paddingRight: 3,
              justifyContent: "center",
              background: disabled && checked ? "neutral200" : checked ? "neutral0" : "transparent",
              borderColor: disabled && checked ? "neutral300" : checked ? "neutral200" : disabled ? "neutral150" : "neutral100",
              children: (0, import_jsx_runtime3.jsx)(
                Typography,
                {
                  variant: "pi",
                  fontWeight: "bold",
                  textTransform: "uppercase",
                  textColor: disabled ? "neutral700" : checked ? "primary600" : "neutral600",
                  children: onLabel
                }
              )
            }
          ),
          (0, import_jsx_runtime3.jsx)(
            Input,
            {
              ...props,
              id,
              name,
              ref: forwardedRef,
              onChange: (e) => {
                setChecked(e.currentTarget.checked);
                onChange == null ? void 0 : onChange(e);
              },
              type: "checkbox",
              "aria-required": required,
              disabled,
              "aria-disabled": disabled,
              checked: Boolean(checked),
              "aria-describedby": ariaDescription
            }
          )
        ]
      }
    );
  }
);
var ToggleWrapper = dt(Flex)`
  ${inputFocusStyle()}
`;
var ToggleOption = dt(Flex)`
  padding-block: 0.6rem;
`;
var Input = dt.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 0;
  width: 100%;
`;
var Root2 = forwardRef4((props, forwardedRef) => {
  const { gap = 0, gridCols = 12, ...rest } = props;
  return (0, import_jsx_runtime3.jsx)(Wrapper, { ref: forwardedRef, $gap: gap, $gridCols: gridCols, ...rest });
});
var Wrapper = dt(Box)`
  display: grid;
  grid-template-columns: repeat(${({ $gridCols }) => $gridCols}, 1fr);
  ${({ theme, $gap }) => handleResponsiveValues({ gap: $gap }, theme)}
`;
var ItemImpl = forwardRef4(
  ({ col, s, xs, m, ...props }, forwardedRef) => (0, import_jsx_runtime3.jsx)(Item2, { ref: forwardedRef, $col: col, $s: s, $xs: xs, $m: m, ...props })
);
var Item2 = dt(Flex)`
  grid-column: span ${({ $xs }) => $xs ?? 12};
  max-width: 100%;

  ${({ theme }) => theme.breakpoints.small} {
    grid-column: span ${({ $s, $xs }) => $s ?? $xs ?? 12};
  }

  ${({ theme }) => theme.breakpoints.medium} {
    grid-column: span ${({ $m, $s, $xs }) => $m ?? $s ?? $xs ?? 12};
  }

  ${({ theme }) => theme.breakpoints.large} {
    grid-column: span ${({ $col, $m, $s, $xs }) => $col ?? $m ?? $s ?? $xs ?? 12};
  }
`;
var Grid = Object.freeze(Object.defineProperty({
  __proto__: null,
  Item: ItemImpl,
  Root: Root2
}, Symbol.toStringTag, { value: "Module" }));
var KeyboardNavigable = ({ tagName, attributeName = "", ...props }) => {
  const isValidFocusedElement = () => {
    const focused = document.activeElement;
    if (!focused) {
      return false;
    }
    if (tagName) {
      return focused.tagName.toLowerCase() === tagName;
    }
    return focused.hasAttribute(attributeName);
  };
  const queryElement = (parentEl) => {
    if (tagName) {
      return parentEl.querySelectorAll(tagName);
    }
    return parentEl.querySelectorAll(`[${attributeName}]`);
  };
  const handleKeyDown = (e) => {
    switch (e.key) {
      case KeyboardKeys.RIGHT:
      case KeyboardKeys.DOWN: {
        if (isValidFocusedElement()) {
          e.preventDefault();
          const focused = document.activeElement;
          const allElements = [...queryElement(e.currentTarget)];
          const focusedIndex = allElements.findIndex((node) => node === focused);
          const nextIndex = focusedIndex + 1 < allElements.length ? focusedIndex + 1 : 0;
          allElements[nextIndex].focus();
        }
        break;
      }
      case KeyboardKeys.LEFT:
      case KeyboardKeys.UP: {
        if (isValidFocusedElement()) {
          e.preventDefault();
          const focused = document.activeElement;
          const allElements = [...queryElement(e.currentTarget)];
          const focusedIndex = allElements.findIndex((node) => node === focused);
          const nextIndex = focusedIndex - 1 > -1 ? focusedIndex - 1 : allElements.length - 1;
          allElements[nextIndex].focus();
        }
        break;
      }
      case KeyboardKeys.HOME: {
        if (isValidFocusedElement()) {
          e.preventDefault();
          const allElements = queryElement(e.currentTarget);
          const focusElement = allElements.item(0);
          focusElement.focus();
        }
        break;
      }
      case KeyboardKeys.END: {
        if (isValidFocusedElement()) {
          e.preventDefault();
          const allElements = queryElement(e.currentTarget);
          const focusElement = allElements.item(allElements.length - 1);
          focusElement.focus();
        }
        break;
      }
    }
  };
  return (0, import_jsx_runtime3.jsx)(Box, { onKeyDown: handleKeyDown, ...props });
};

// node_modules/@strapi/content-type-builder/dist/admin/chunks/index-DAXXa6S8.mjs
var import_get = __toESM(require_get(), 1);
var import_set = __toESM(require_set(), 1);
var import_snakeCase = __toESM(require_snakeCase(), 1);
var import_pluralize = __toESM(require_pluralize(), 1);
var import_slugify = __toESM(require_slugify(), 1);
var import_cloneDeep = __toESM(require_cloneDeep(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var React3 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var PERMISSIONS = {
  // This permission regards the main component (App) and is used to tell
  // If the plugin link should be displayed in the menu
  // And also if the plugin is accessible. This use case is found when a user types the url of the
  // plugin directly in the browser
  main: [
    {
      action: "plugin::content-type-builder.read",
      subject: null
    }
  ]
};
var MAX_COMPONENT_DEPTH = 6;
var pluginId = "content-type-builder";
var getRelationType = (relation, targetAttribute) => {
  const hasNotTargetAttribute = targetAttribute === void 0 || targetAttribute === null;
  if (relation === "oneToOne" && hasNotTargetAttribute) {
    return "oneWay";
  }
  if (relation === "oneToMany" && hasNotTargetAttribute) {
    return "manyWay";
  }
  return relation;
};
var makeUnique = (array) => [
  ...new Set(array)
];
var retrieveComponentsFromSchema = (attributes, allComponentsData) => {
  const allComponents = attributes.reduce((acc, current) => {
    const type = current.type;
    if (type === "component") {
      const currentComponentName = current.component;
      acc.push(currentComponentName);
      const currentComponentAttributes = (0, import_get.default)(allComponentsData, [
        currentComponentName,
        "schema",
        "attributes"
      ], []);
      acc.push(...retrieveComponentsFromSchema(currentComponentAttributes, allComponentsData));
    }
    if (type === "dynamiczone") {
      const dynamicZoneComponents = current.components;
      const componentsFromDZComponents = dynamicZoneComponents.reduce((acc2, currentUid) => {
        const compoAttrs = (0, import_get.default)(allComponentsData, [
          currentUid,
          "schema",
          "attributes"
        ], []);
        return [
          ...acc2,
          ...retrieveComponentsFromSchema(compoAttrs, allComponentsData)
        ];
      }, []);
      return [
        ...acc,
        ...dynamicZoneComponents,
        ...componentsFromDZComponents
      ];
    }
    return acc;
  }, []);
  return makeUnique(allComponents);
};
var DEFAULT_MODIFIED_DATA = {
  components: {},
  contentTypes: {}
};
var initialState$1 = {
  components: {},
  contentTypes: {},
  initialComponents: {},
  initialContentTypes: {},
  initialData: {},
  modifiedData: {
    ...DEFAULT_MODIFIED_DATA
  },
  reservedNames: {},
  isLoading: true
};
var ONE_SIDE_RELATIONS = [
  "oneWay",
  "manyWay"
];
var getOppositeRelation = (originalRelation) => {
  if (originalRelation === "manyToOne") {
    return "oneToMany";
  }
  if (originalRelation === "oneToMany") {
    return "manyToOne";
  }
  return originalRelation;
};
var findAttributeIndex = (schema, attributeToFind) => {
  return schema.schema.attributes.findIndex(({ name }) => name === attributeToFind);
};
var slice$1 = createSlice({
  name: "data-manager",
  initialState: initialState$1,
  reducers: {
    init: (state, action) => {
      const { components, contentTypes, reservedNames } = action.payload;
      state.components = components;
      state.initialComponents = components;
      state.initialContentTypes = contentTypes;
      state.contentTypes = contentTypes;
      state.reservedNames = reservedNames;
      state.isLoading = false;
      state.modifiedData = {
        ...DEFAULT_MODIFIED_DATA,
        component: state.modifiedData.component ? components[state.modifiedData.component.uid] : void 0,
        contentType: state.modifiedData.contentType ? contentTypes[state.modifiedData.contentType.uid] : void 0,
        components: state.modifiedData.components ? Object.keys(state.modifiedData.components).reduce((acc, key) => {
          acc[key] = components[key];
          return acc;
        }, {}) : {},
        contentTypes: state.modifiedData.contentTypes ? Object.keys(state.modifiedData.contentTypes).reduce((acc, key) => {
          acc[key] = contentTypes[key];
          return acc;
        }, {}) : {}
      };
      state.initialData = state.modifiedData;
    },
    addAttribute: (state, action) => {
      var _a;
      const { attributeToSet, forTarget, targetUid, shouldAddComponentToData } = action.payload;
      const { name, ...rest } = attributeToSet;
      delete rest.createComponent;
      const pathToDataToEdit = [
        "component",
        "contentType"
      ].includes(forTarget) ? [
        forTarget
      ] : [
        forTarget,
        targetUid
      ];
      const currentAttributes = (0, import_get.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "schema",
        "attributes"
      ], []).slice();
      const updatedAttributes = [
        ...currentAttributes,
        {
          ...rest,
          name
        }
      ];
      (0, import_set.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "schema",
        "attributes"
      ], updatedAttributes);
      if (shouldAddComponentToData) {
        const componentToAddUID = rest.component;
        const componentToAdd = state.components[componentToAddUID];
        const isTemporaryComponent = componentToAdd == null ? void 0 : componentToAdd.isTemporary;
        const hasComponentAlreadyBeenAdded = ((_a = state.modifiedData.components) == null ? void 0 : _a[componentToAddUID]) !== void 0;
        if (isTemporaryComponent || hasComponentAlreadyBeenAdded) {
          return;
        }
        if (!state.modifiedData.components) {
          state.modifiedData.components = {};
        }
        state.modifiedData.components[componentToAddUID] = componentToAdd;
        const nestedComponents = retrieveComponentsFromSchema(componentToAdd.schema.attributes, state.components);
        const nestedComponentsToAddInModifiedData = nestedComponents.filter((compoUID) => {
          return (0, import_get.default)(state, [
            "modifiedData",
            "components",
            compoUID
          ]) === void 0;
        });
        nestedComponentsToAddInModifiedData.forEach((compoUID) => {
          const compoSchema = (0, import_get.default)(state, [
            "components",
            compoUID
          ], {});
          const isTemporary = compoSchema.isTemporary || false;
          if (!isTemporary) {
            if (!state.modifiedData.components) {
              state.modifiedData.components = {};
            }
            state.modifiedData.components[compoUID] = compoSchema;
          }
        });
        return;
      }
      const isCreatingRelationAttribute = rest.type === "relation";
      if (isCreatingRelationAttribute) {
        const target = rest.target;
        const targetAttribute = rest.targetAttribute || null;
        const relation = rest.relation;
        const relationType = getRelationType(relation, targetAttribute);
        const currentUid = (0, import_get.default)(state, [
          "modifiedData",
          ...pathToDataToEdit,
          "uid"
        ]);
        if (rest.type === "relation" && relationType !== "oneWay" && relationType !== "manyWay" && target === currentUid) {
          const oppositeAttribute = {
            name: targetAttribute,
            relation: getOppositeRelation(relationType),
            target,
            targetAttribute: name,
            type: "relation"
          };
          if (rest.private) {
            oppositeAttribute.private = rest.private;
          }
          const attributesToSet = [
            ...updatedAttributes,
            oppositeAttribute
          ];
          (0, import_set.default)(state, [
            "modifiedData",
            ...pathToDataToEdit,
            "schema",
            "attributes"
          ], attributesToSet);
        }
      }
    },
    addCreatedComponentToDynamicZone: (state, action) => {
      const { dynamicZoneTarget, componentsToAdd } = action.payload;
      const dzAttributeIndex = findAttributeIndex(state.modifiedData.contentType, dynamicZoneTarget);
      componentsToAdd.forEach((componentUid) => {
        if (!state.modifiedData.contentType) {
          return;
        }
        if (!state.modifiedData.contentType.schema.attributes[dzAttributeIndex].components) {
          state.modifiedData.contentType.schema.attributes[dzAttributeIndex].components = [];
        }
        state.modifiedData.contentType.schema.attributes[dzAttributeIndex].components.push(componentUid);
      });
    },
    addCustomFieldAttribute: (state, action) => {
      const { attributeToSet, forTarget, targetUid } = action.payload;
      const { name, ...rest } = attributeToSet;
      const pathToDataToEdit = [
        "component",
        "contentType"
      ].includes(forTarget) ? [
        forTarget
      ] : [
        forTarget,
        targetUid
      ];
      const currentAttributes = (0, import_get.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "schema",
        "attributes"
      ], []).slice();
      const updatedAttributes = [
        ...currentAttributes,
        {
          ...rest,
          name
        }
      ];
      (0, import_set.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "schema",
        "attributes"
      ], updatedAttributes);
    },
    changeDynamicZoneComponents: (state, action) => {
      var _a, _b, _c;
      const { dynamicZoneTarget, newComponents } = action.payload;
      const dzAttributeIndex = findAttributeIndex(state.modifiedData.contentType, dynamicZoneTarget);
      const currentDZComponents = ((_a = state.modifiedData.contentType) == null ? void 0 : _a.schema.attributes[dzAttributeIndex]).components;
      const updatedComponents = makeUnique([
        ...currentDZComponents,
        ...newComponents
      ]);
      ((_b = state.modifiedData.contentType) == null ? void 0 : _b.schema.attributes[dzAttributeIndex]).components = updatedComponents;
      const nestedComponents = retrieveComponentsFromSchema(R((_c = state.modifiedData.contentType) == null ? void 0 : _c.schema.attributes), state.components);
      const nestedComponentsToAddInModifiedData = nestedComponents.filter((compoUID) => {
        return (0, import_get.default)(state, [
          "modifiedData",
          "components",
          compoUID
        ]) === void 0;
      });
      nestedComponentsToAddInModifiedData.forEach((compoUID) => {
        const compoSchema = (0, import_get.default)(state, [
          "components",
          compoUID
        ], {});
        const isTemporary = compoSchema.isTemporary || false;
        if (!isTemporary) {
          if (!state.modifiedData.components) {
            state.modifiedData.components = {};
          }
          state.modifiedData.components[compoUID] = compoSchema;
        }
      });
    },
    createComponentSchema: (state, action) => {
      const { uid, data, componentCategory, shouldAddComponentToData } = action.payload;
      const newSchema = {
        uid,
        isTemporary: true,
        category: componentCategory,
        schema: {
          ...data,
          attributes: []
        }
      };
      state.components[uid] = newSchema;
      if (shouldAddComponentToData) {
        state.modifiedData.components[uid] = newSchema;
      }
    },
    createSchema: (state, action) => {
      const { uid, data } = action.payload;
      const newSchema = {
        uid,
        isTemporary: true,
        schema: {
          ...data,
          attributes: []
        }
      };
      state.contentTypes[uid] = newSchema;
    },
    editAttribute: (state, action) => {
      const { attributeToSet, forTarget, targetUid, initialAttribute } = action.payload;
      const { name, ...rest } = attributeToSet;
      const initialAttributeName = initialAttribute.name;
      const pathToDataToEdit = [
        "component",
        "contentType"
      ].includes(forTarget) ? [
        forTarget
      ] : [
        forTarget,
        targetUid
      ];
      const initialAttributeIndex = findAttributeIndex((0, import_get.default)(state, [
        "modifiedData",
        ...pathToDataToEdit
      ]), initialAttributeName);
      const isEditingRelation = rest.type === "relation";
      if (!isEditingRelation) {
        (0, import_set.default)(state, [
          "modifiedData",
          ...pathToDataToEdit,
          "schema",
          "attributes",
          initialAttributeIndex
        ], attributeToSet);
        return;
      }
      const updatedAttributes = (0, import_get.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "schema",
        "attributes"
      ]).slice();
      const toSet = {
        name,
        relation: rest.relation,
        target: rest.target,
        targetAttribute: rest.targetAttribute,
        type: "relation"
      };
      if (rest.private) {
        toSet.private = rest.private;
      }
      if (rest.pluginOptions) {
        toSet.pluginOptions = rest.pluginOptions;
      }
      const currentAttributeIndex = updatedAttributes.findIndex((value) => {
        return value.name !== void 0 && value.name === initialAttribute.name;
      });
      if (currentAttributeIndex !== -1) {
        updatedAttributes.splice(currentAttributeIndex, 1, toSet);
      }
      let oppositeAttributeNameToRemove = null;
      let oppositeAttributeNameToUpdate = null;
      let oppositeAttributeToCreate = null;
      let initialOppositeAttribute = null;
      const currentUid = (0, import_get.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "uid"
      ]);
      const didChangeTargetRelation = initialAttribute.target !== rest.target;
      const didCreateInternalRelation = rest.target === currentUid;
      const relationType = getRelationType(rest.relation, rest.targetAttribute);
      const initialRelationType = getRelationType(initialAttribute.relation, initialAttribute.targetAttribute);
      const hadInternalRelation = initialAttribute.target === currentUid;
      const didChangeRelationType = initialRelationType !== relationType;
      const shouldRemoveOppositeAttributeBecauseOfTargetChange = didChangeTargetRelation && !didCreateInternalRelation && hadInternalRelation && isEditingRelation;
      const shouldRemoveOppositeAttributeBecauseOfRelationTypeChange = didChangeRelationType && hadInternalRelation && [
        "oneWay",
        "manyWay"
      ].includes(relationType) && isEditingRelation;
      const shouldUpdateOppositeAttributeBecauseOfRelationTypeChange = !ONE_SIDE_RELATIONS.includes(initialRelationType) && !ONE_SIDE_RELATIONS.includes(relationType) && hadInternalRelation && didCreateInternalRelation && isEditingRelation;
      const shouldCreateOppositeAttributeBecauseOfRelationTypeChange = ONE_SIDE_RELATIONS.includes(initialRelationType) && !ONE_SIDE_RELATIONS.includes(relationType) && hadInternalRelation && didCreateInternalRelation && isEditingRelation;
      const shouldCreateOppositeAttributeBecauseOfTargetChange = didChangeTargetRelation && didCreateInternalRelation && !ONE_SIDE_RELATIONS.includes(relationType);
      if (shouldRemoveOppositeAttributeBecauseOfTargetChange || shouldRemoveOppositeAttributeBecauseOfRelationTypeChange) {
        oppositeAttributeNameToRemove = initialAttribute.targetAttribute;
      }
      if (oppositeAttributeNameToRemove) {
        const indexToRemove = updatedAttributes.findIndex((value) => value.name === oppositeAttributeNameToRemove);
        updatedAttributes.splice(indexToRemove, 1);
      }
      if (!shouldRemoveOppositeAttributeBecauseOfTargetChange) {
        const initialTargetContentType = (0, import_get.default)(state, [
          "initialContentTypes",
          initialAttribute.target
        ]);
        if (initialTargetContentType) {
          const oppositeAttributeIndex = findAttributeIndex(initialTargetContentType, initialAttribute.targetAttribute);
          initialOppositeAttribute = (0, import_get.default)(state, [
            "initialContentTypes",
            initialAttribute.target,
            "schema",
            "attributes",
            oppositeAttributeIndex
          ]);
        }
      }
      if (shouldCreateOppositeAttributeBecauseOfRelationTypeChange || shouldCreateOppositeAttributeBecauseOfTargetChange) {
        oppositeAttributeToCreate = {
          name: rest.targetAttribute,
          relation: getOppositeRelation(relationType),
          target: rest.target,
          targetAttribute: name,
          type: "relation"
        };
        if (rest.private) {
          oppositeAttributeToCreate.private = rest.private;
        }
        if (initialOppositeAttribute && initialOppositeAttribute.pluginOptions) {
          oppositeAttributeToCreate.pluginOptions = initialOppositeAttribute.pluginOptions;
        }
        const indexOfInitialAttribute = updatedAttributes.findIndex(({ name: name2 }) => name2 === initialAttribute.name);
        const indexOfUpdatedAttribute = updatedAttributes.findIndex(({ name: attrName }) => name === attrName);
        const indexToInsert = (indexOfInitialAttribute === -1 ? indexOfUpdatedAttribute : indexOfInitialAttribute) + 1;
        updatedAttributes.splice(indexToInsert, 0, oppositeAttributeToCreate);
      }
      if (shouldUpdateOppositeAttributeBecauseOfRelationTypeChange) {
        oppositeAttributeNameToUpdate = initialAttribute.targetAttribute;
        oppositeAttributeToCreate = {
          name: rest.targetAttribute,
          relation: getOppositeRelation(relationType),
          target: rest.target,
          targetAttribute: name,
          type: "relation"
        };
        if (rest.private) {
          oppositeAttributeToCreate.private = rest.private;
        }
        if (initialOppositeAttribute && initialOppositeAttribute.pluginOptions) {
          oppositeAttributeToCreate.pluginOptions = initialOppositeAttribute.pluginOptions;
        }
        if (oppositeAttributeNameToUpdate) {
          const indexToUpdate = updatedAttributes.findIndex(({ name: name2 }) => name2 === oppositeAttributeNameToUpdate);
          updatedAttributes.splice(indexToUpdate, 1, oppositeAttributeToCreate);
        }
      }
      (0, import_set.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "schema",
        "attributes"
      ], updatedAttributes);
    },
    editCustomFieldAttribute: (state, action) => {
      const { forTarget, targetUid, initialAttribute, attributeToSet } = action.payload;
      const initialAttributeName = initialAttribute.name;
      const pathToDataToEdit = [
        "component",
        "contentType"
      ].includes(forTarget) ? [
        forTarget
      ] : [
        forTarget,
        targetUid
      ];
      const initialAttributeIndex = findAttributeIndex((0, import_get.default)(state, [
        "modifiedData",
        ...pathToDataToEdit
      ]), initialAttributeName);
      (0, import_set.default)(state, [
        "modifiedData",
        ...pathToDataToEdit,
        "schema",
        "attributes",
        initialAttributeIndex
      ], attributeToSet);
    },
    updateInitialState: (state) => {
      state.initialData = state.modifiedData;
    },
    deleteNotSavedType: (state) => {
      state.contentTypes = state.initialContentTypes;
      state.components = state.initialComponents;
    },
    reloadPlugin: () => {
      return initialState$1;
    },
    removeComponentFromDynamicZone: (state, action) => {
      const { dzName, componentToRemoveIndex } = action.payload;
      const dzAttributeIndex = findAttributeIndex(state.modifiedData.contentType, dzName);
      if (state.modifiedData.contentType) {
        state.modifiedData.contentType.schema.attributes[dzAttributeIndex].components.splice(componentToRemoveIndex, 1);
      }
    },
    removeField: (state, action) => {
      var _a, _b, _c;
      const { mainDataKey, attributeToRemoveName } = action.payload;
      const pathToAttributes = [
        "modifiedData",
        mainDataKey,
        "schema",
        "attributes"
      ];
      const attributeToRemoveIndex = findAttributeIndex(state.modifiedData[mainDataKey], attributeToRemoveName);
      const pathToAttributeToRemove = [
        ...pathToAttributes,
        attributeToRemoveIndex
      ];
      const attributeToRemoveData = (0, import_get.default)(state, pathToAttributeToRemove);
      const isRemovingRelationAttribute = attributeToRemoveData.type === "relation";
      const canTheAttributeToRemoveHaveARelationWithItself = mainDataKey === "contentType";
      if (isRemovingRelationAttribute && canTheAttributeToRemoveHaveARelationWithItself) {
        const { target, relation, targetAttribute } = attributeToRemoveData;
        const relationType = getRelationType(relation, targetAttribute);
        const uid = (_a = state.modifiedData.contentType) == null ? void 0 : _a.uid;
        const shouldRemoveOppositeAttribute = target === uid && !ONE_SIDE_RELATIONS.includes(relationType);
        if (shouldRemoveOppositeAttribute) {
          const attributes = (_b = state.modifiedData[mainDataKey]) == null ? void 0 : _b.schema.attributes.slice();
          const nextAttributes = attributes.filter((attribute) => {
            if (attribute.name === attributeToRemoveName) {
              return false;
            }
            if (attribute.target === uid && attribute.targetAttribute === attributeToRemoveName) {
              return false;
            }
            return true;
          });
          const schema = state.modifiedData[mainDataKey];
          if (schema) {
            schema.schema.attributes = nextAttributes;
          }
          return;
        }
      }
      const uidFieldsToUpdate = state.modifiedData[mainDataKey].schema.attributes.slice().reduce((acc, current) => {
        if (current.type !== "uid") {
          return acc;
        }
        if (current.targetField !== attributeToRemoveName) {
          return acc;
        }
        acc.push(current.name);
        return acc;
      }, []);
      uidFieldsToUpdate.forEach((fieldName) => {
        var _a2;
        const fieldIndex = findAttributeIndex(state.modifiedData[mainDataKey], fieldName);
        (_a2 = state.modifiedData[mainDataKey]) == null ? true : delete _a2.schema.attributes[fieldIndex].targetField;
      });
      (_c = state.modifiedData[mainDataKey]) == null ? void 0 : _c.schema.attributes.splice(attributeToRemoveIndex, 1);
    },
    removeFieldFromDisplayedComponent: (state, action) => {
      var _a, _b, _c, _d, _e;
      const { attributeToRemoveName, componentUid } = action.payload;
      const attributeToRemoveIndex = findAttributeIndex((_a = state.modifiedData.components) == null ? void 0 : _a[componentUid], attributeToRemoveName);
      (_e = (_d = (_c = (_b = state.modifiedData.components) == null ? void 0 : _b[componentUid]) == null ? void 0 : _c.schema) == null ? void 0 : _d.attributes) == null ? void 0 : _e.splice(attributeToRemoveIndex, 1);
    },
    setModifiedData: (state, action) => {
      const { schemaToSet, hasJustCreatedSchema } = action.payload;
      const schema = {
        ...DEFAULT_MODIFIED_DATA,
        ...schemaToSet
      };
      state.initialData = schema;
      state.modifiedData = schema;
      if (!hasJustCreatedSchema) {
        state.components = state.initialComponents;
        state.contentTypes = state.initialContentTypes;
      }
    },
    updateSchema: (state, action) => {
      const { data, schemaType } = action.payload;
      const schema = state.modifiedData[schemaType];
      if (!schema) {
        return;
      }
      schema.schema.displayName = data.displayName;
      if (schemaType === "component") {
        const { uid } = action.payload;
        schema.category = data.category;
        schema.schema.icon = data.icon;
        const addedComponent = R(schema);
        state.components[uid] = addedComponent;
      } else {
        schema.schema.kind = data.kind;
      }
    }
  }
});
var { reducer: reducer$1, actions: actions$1 } = slice$1;
var nameToSlug = (name) => (0, import_slugify.default)(name, {
  separator: "-"
});
var createUid = (name) => {
  const modelName = nameToSlug(name);
  return `api::${modelName}.${modelName}`;
};
var createComponentUid = (name, category) => {
  return `${nameToSlug(category)}.${nameToSlug(name)}`;
};
var customFieldDefaultOptionsReducer = (acc, option) => {
  if (option.items) {
    return option.items.reduce(customFieldDefaultOptionsReducer, acc);
  }
  if ("defaultValue" in option) {
    const { name, defaultValue } = option;
    acc.push({
      name,
      defaultValue
    });
  }
  return acc;
};
var shouldPluralizeName = (nature) => [
  "manyToMany",
  "oneToMany",
  "manyWay"
].includes(nature) ? 2 : 1;
var shouldPluralizeTargetAttribute = (nature) => [
  "manyToMany",
  "manyToOne"
].includes(nature) ? 2 : 1;
var initialState = {
  formErrors: {},
  modifiedData: {},
  initialData: {},
  componentToCreate: {},
  isCreatingComponentWhileAddingAField: false
};
var slice = createSlice({
  name: "formModal",
  initialState,
  reducers: {
    onChange: (state, action) => {
      const { keys, value } = action.payload;
      const obj = state.modifiedData;
      const hasDefaultValue = Boolean(obj.default);
      if (hasDefaultValue && keys.length === 1 && keys.includes("type")) {
        const previousType = obj.type;
        if (previousType && [
          "date",
          "datetime",
          "time"
        ].includes(previousType)) {
          delete state.modifiedData.default;
        }
      }
      (0, import_set.default)(state, [
        "modifiedData",
        ...keys
      ], value);
    },
    onChangeRelationTarget: (state, action) => {
      const { target: { oneThatIsCreatingARelationWithAnother, selectedContentTypeFriendlyName, targetContentTypeAllowedRelations, value } } = action.payload;
      let didChangeRelationTypeBecauseOfRestrictedRelation = false;
      let changedRelationType = null;
      (0, import_set.default)(state, [
        "modifiedData",
        "target"
      ], value);
      const modifiedData = state.modifiedData;
      if (Array.isArray(targetContentTypeAllowedRelations)) {
        const currentRelationType = getRelationType(modifiedData.relation, modifiedData.targetAttribute);
        if (currentRelationType && !targetContentTypeAllowedRelations.includes(currentRelationType)) {
          const relationToSet = targetContentTypeAllowedRelations[0];
          didChangeRelationTypeBecauseOfRestrictedRelation = true;
          changedRelationType = relationToSet;
          if (relationToSet === "oneWay") {
            (0, import_set.default)(state, [
              "modifiedData",
              "relation"
            ], "oneToOne");
          } else if (relationToSet === "manyWay") {
            (0, import_set.default)(state, [
              "modifiedData",
              "relation"
            ], "oneToMany");
          } else {
            (0, import_set.default)(state, [
              "modifiedData",
              "relation"
            ], relationToSet);
          }
        }
      }
      let nameToSet;
      if (didChangeRelationTypeBecauseOfRestrictedRelation && changedRelationType) {
        nameToSet = (0, import_pluralize.default)((0, import_snakeCase.default)(nameToSlug(selectedContentTypeFriendlyName)), shouldPluralizeName(changedRelationType));
      } else {
        nameToSet = (0, import_pluralize.default)((0, import_snakeCase.default)(nameToSlug(selectedContentTypeFriendlyName)), shouldPluralizeName(modifiedData.relation));
      }
      (0, import_set.default)(state, [
        "modifiedData",
        "name"
      ], nameToSet);
      const currentTargetAttribute = state.modifiedData.targetAttribute;
      if (currentTargetAttribute === null) {
        return;
      }
      if (didChangeRelationTypeBecauseOfRestrictedRelation && changedRelationType && [
        "oneWay",
        "manyWay"
      ].includes(changedRelationType)) {
        (0, import_set.default)(state, [
          "modifiedData",
          "targetAttribute"
        ], null);
        return;
      }
      const targetAttributeToSet = (0, import_pluralize.default)((0, import_snakeCase.default)(nameToSlug(oneThatIsCreatingARelationWithAnother)), shouldPluralizeTargetAttribute(modifiedData.relation));
      (0, import_set.default)(state, [
        "modifiedData",
        "targetAttribute"
      ], targetAttributeToSet);
    },
    onChangeRelationType: (state, action) => {
      const { target: { oneThatIsCreatingARelationWithAnother, value } } = action.payload;
      const currentName = state.modifiedData.name;
      if (![
        "oneWay",
        "manyWay"
      ].includes(value)) {
        (0, import_set.default)(state, [
          "modifiedData",
          "relation"
        ], value);
        const currentTargetAttribute = state.modifiedData.targetAttribute;
        (0, import_set.default)(state, [
          "modifiedData",
          "name"
        ], (0, import_pluralize.default)((0, import_snakeCase.default)(nameToSlug(currentName)), shouldPluralizeName(value)));
        (0, import_set.default)(state, [
          "modifiedData",
          "targetAttribute"
        ], (0, import_pluralize.default)(currentTargetAttribute || (0, import_snakeCase.default)(nameToSlug(oneThatIsCreatingARelationWithAnother)), shouldPluralizeTargetAttribute(value)));
        return;
      }
      if (value === "oneWay") {
        (0, import_set.default)(state, [
          "modifiedData",
          "relation"
        ], "oneToOne");
        (0, import_set.default)(state, [
          "modifiedData",
          "targetAttribute"
        ], null);
        (0, import_set.default)(state, [
          "modifiedData",
          "name"
        ], (0, import_pluralize.default)((0, import_snakeCase.default)(currentName), 1));
        return;
      }
      (0, import_set.default)(state, [
        "modifiedData",
        "relation"
      ], "oneToMany");
      (0, import_set.default)(state, [
        "modifiedData",
        "targetAttribute"
      ], null);
      (0, import_set.default)(state, [
        "modifiedData",
        "name"
      ], (0, import_pluralize.default)((0, import_snakeCase.default)(currentName), 2));
    },
    resetProps: () => {
      return initialState;
    },
    resetPropsAndSetFormForAddingAnExistingCompo: (state, action) => {
      const { options = {} } = action.payload;
      return {
        ...initialState,
        modifiedData: {
          type: "component",
          repeatable: true,
          ...options
        }
      };
    },
    resetPropsAndSaveCurrentData: (state, action) => {
      const { options = {} } = action.payload;
      const componentToCreate = state.modifiedData.componentToCreate;
      const modifiedData = {
        displayName: componentToCreate.displayName,
        type: "component",
        repeatable: false,
        ...options,
        component: createComponentUid(componentToCreate.displayName, componentToCreate.category)
      };
      return {
        ...initialState,
        componentToCreate,
        modifiedData,
        isCreatingComponentWhileAddingAField: state.modifiedData.createComponent
      };
    },
    resetPropsAndSetTheFormForAddingACompoToADz: (state) => {
      const createdDZ = state.modifiedData;
      const dataToSet = {
        ...createdDZ,
        createComponent: true,
        componentToCreate: {
          type: "component"
        }
      };
      return {
        ...initialState,
        modifiedData: dataToSet
      };
    },
    setDataToEdit: (state, action) => {
      const { data } = action.payload;
      state.modifiedData = data;
      state.initialData = data;
    },
    setAttributeDataSchema: (state, action) => {
      const { isEditing } = action.payload;
      if (isEditing) {
        const { modifiedDataToSetForEditing } = action.payload;
        state.modifiedData = modifiedDataToSetForEditing;
        state.initialData = modifiedDataToSetForEditing;
        return;
      }
      const { attributeType, nameToSetForRelation, targetUid, step, options = {} } = action.payload;
      let dataToSet;
      if (attributeType === "component") {
        if (step === "1") {
          dataToSet = {
            type: "component",
            createComponent: true,
            componentToCreate: {
              type: "component"
            }
          };
        } else {
          dataToSet = {
            ...options,
            type: "component",
            repeatable: true
          };
        }
      } else if (attributeType === "dynamiczone") {
        dataToSet = {
          ...options,
          type: "dynamiczone",
          components: []
        };
      } else if (attributeType === "text") {
        dataToSet = {
          ...options,
          type: "string"
        };
      } else if (attributeType === "number" || attributeType === "date") {
        dataToSet = options;
      } else if (attributeType === "media") {
        dataToSet = {
          allowedTypes: [
            "images",
            "files",
            "videos",
            "audios"
          ],
          type: "media",
          multiple: true,
          ...options
        };
      } else if (attributeType === "enumeration") {
        dataToSet = {
          ...options,
          type: "enumeration",
          enum: []
        };
      } else if (attributeType === "relation") {
        dataToSet = {
          name: (0, import_snakeCase.default)(nameToSetForRelation),
          relation: "oneToOne",
          targetAttribute: null,
          target: targetUid,
          type: "relation"
        };
      } else {
        dataToSet = {
          ...options,
          type: attributeType,
          default: null
        };
      }
      state.modifiedData = dataToSet;
    },
    setCustomFieldDataSchema: (state, action) => {
      var _a, _b;
      const { isEditing } = action.payload;
      if (isEditing) {
        const { modifiedDataToSetForEditing } = action.payload;
        state.modifiedData = modifiedDataToSetForEditing;
        state.initialData = modifiedDataToSetForEditing;
        return;
      }
      const { customField, options = {} } = action.payload;
      state.modifiedData = {
        ...options,
        type: customField.type
      };
      const allOptions = [
        ...((_a = customField == null ? void 0 : customField.options) == null ? void 0 : _a.base) || [],
        ...((_b = customField == null ? void 0 : customField.options) == null ? void 0 : _b.advanced) || []
      ];
      const optionDefaults = allOptions.reduce(customFieldDefaultOptionsReducer, []);
      if (optionDefaults.length) {
        optionDefaults.forEach(({ name, defaultValue }) => (0, import_set.default)(state.modifiedData, name, defaultValue));
      }
    },
    setDynamicZoneDataSchema: (state, action) => {
      const { attributeToEdit } = action.payload;
      state.modifiedData = attributeToEdit;
      state.initialData = attributeToEdit;
    },
    setErrors: (state, action) => {
      state.formErrors = action.payload.errors;
    }
  }
});
var { actions, reducer } = slice;
var reducers = {
  [`${pluginId}_formModal`]: reducer,
  [`${pluginId}_dataManagerProvider`]: reducer$1
};
var formsAPI = {
  components: {
    inputs: {},
    add({ id, component }) {
      if (!this.inputs[id]) {
        this.inputs[id] = component;
      }
    }
  },
  types: {
    attribute: {},
    contentType: {
      validators: [],
      form: {
        advanced: [],
        base: []
      }
    },
    component: {
      validators: [],
      form: {
        advanced: [],
        base: []
      }
    }
  },
  contentTypeSchemaMutations: [],
  addContentTypeSchemaMutation(cb) {
    this.contentTypeSchemaMutations.push(cb);
  },
  extendContentType({ validator, form: { advanced, base } }) {
    const { contentType } = this.types;
    if (validator) {
      contentType.validators.push(validator);
    }
    contentType.form.advanced.push(advanced);
    contentType.form.base.push(base);
  },
  extendFields(fields, { validator, form: { advanced, base } }) {
    const formType = this.types.attribute;
    fields.forEach((field) => {
      if (!formType[field]) {
        formType[field] = {
          validators: [],
          form: {
            advanced: [],
            base: []
          }
        };
      }
      if (validator) {
        formType[field].validators.push(validator);
      }
      formType[field].form.advanced.push(advanced);
      formType[field].form.base.push(base);
    });
  },
  getAdvancedForm(target, props = null) {
    const sectionsToAdd = (0, import_get.default)(this.types, [
      ...target,
      "form",
      "advanced"
    ], []).reduce((acc, current) => {
      const sections = current(props);
      return [
        ...acc,
        ...sections
      ];
    }, []);
    return sectionsToAdd;
  },
  makeCustomFieldValidator(attributeShape, validator, ...validatorArgs) {
    if (!validator) return attributeShape;
    return attributeShape.shape({
      options: create().shape(validator(validatorArgs))
    });
  },
  makeValidator(target, initShape, ...args) {
    const validators = (0, import_get.default)(this.types, [
      ...target,
      "validators"
    ], []);
    const pluginOptionsShape = validators.reduce((acc, current) => {
      const pluginOptionShape = current(args);
      return {
        ...acc,
        ...pluginOptionShape
      };
    }, {});
    return initShape.shape({
      pluginOptions: create().shape(pluginOptionsShape)
    });
  },
  mutateContentTypeSchema(data, initialData) {
    let enhancedData = (0, import_cloneDeep.default)(data);
    const refData = (0, import_cloneDeep.default)(initialData);
    this.contentTypeSchemaMutations.forEach((cb) => {
      enhancedData = cb(enhancedData, refData);
    });
    return enhancedData;
  }
};
var prefixPluginTranslations = (trad, pluginId2) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId2}.${current}`] = trad[current];
    return acc;
  }, {});
};
var AutoReloadOverlayBlockerContext = React3.createContext({});
var MAX_ELAPSED_TIME = 30 * 1e3;
var AutoReloadOverlayBlockerProvider = ({ children }) => {
  const [isOpen, setIsOpen] = React3.useState(false);
  const [config, setConfig] = React3.useState({});
  const [failed, setFailed] = React3.useState(false);
  const lockAppWithAutoreload = React3.useCallback((config2 = {}) => {
    setIsOpen(true);
    setConfig(config2);
  }, []);
  const unlockAppWithAutoreload = React3.useCallback(() => {
    setIsOpen(false);
    setConfig({});
  }, []);
  React3.useEffect(() => {
    if (isOpen) {
      const timeout = setTimeout(() => {
        setFailed(true);
      }, MAX_ELAPSED_TIME);
      return () => {
        clearTimeout(timeout);
      };
    }
  }, [
    isOpen
  ]);
  let displayedIcon = (config == null ? void 0 : config.icon) || "reload";
  let description = {
    id: (config == null ? void 0 : config.description) || "components.OverlayBlocker.description",
    defaultMessage: "You're using a feature that needs the server to restart. The page will reload automatically."
  };
  let title = {
    id: (config == null ? void 0 : config.title) || "components.OverlayBlocker.title",
    defaultMessage: "Waiting for restart"
  };
  if (failed) {
    displayedIcon = "time";
    description = {
      id: "components.OverlayBlocker.description.serverError",
      defaultMessage: "The server should have restarted, please check your logs in the terminal."
    };
    title = {
      id: "components.OverlayBlocker.title.serverError",
      defaultMessage: "The restart is taking longer than expected"
    };
  }
  const autoReloadValue = React3.useMemo(() => ({
    lockAppWithAutoreload,
    unlockAppWithAutoreload
  }), [
    lockAppWithAutoreload,
    unlockAppWithAutoreload
  ]);
  return (0, import_jsx_runtime4.jsxs)(AutoReloadOverlayBlockerContext.Provider, {
    value: autoReloadValue,
    children: [
      (0, import_jsx_runtime4.jsx)(Blocker, {
        displayedIcon,
        isOpen,
        description,
        title
      }),
      children
    ]
  });
};
var Blocker = ({ displayedIcon, description, title, isOpen }) => {
  var _a;
  const { formatMessage } = useIntl();
  return isOpen && ((_a = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : _a.body) ? (0, import_react_dom3.createPortal)(
    (0, import_jsx_runtime4.jsxs)(Overlay2, {
      id: "autoReloadOverlayBlocker",
      direction: "column",
      alignItems: "center",
      gap: 6,
      children: [
        (0, import_jsx_runtime4.jsxs)(Flex, {
          direction: "column",
          alignItems: "center",
          gap: 2,
          children: [
            (0, import_jsx_runtime4.jsx)(Typography, {
              tag: "h1",
              variant: "alpha",
              children: formatMessage(title)
            }),
            (0, import_jsx_runtime4.jsx)(Typography, {
              tag: "h2",
              textColor: "neutral600",
              fontSize: 4,
              fontWeight: "regular",
              children: formatMessage(description)
            })
          ]
        }),
        displayedIcon === "reload" && (0, import_jsx_runtime4.jsx)(IconBox2, {
          padding: 6,
          background: "primary100",
          borderColor: "primary200",
          children: (0, import_jsx_runtime4.jsx)(LoaderReload, {
            width: "4rem",
            height: "4rem"
          })
        }),
        displayedIcon === "time" && (0, import_jsx_runtime4.jsx)(IconBox2, {
          padding: 6,
          background: "primary100",
          borderColor: "primary200",
          children: (0, import_jsx_runtime4.jsx)(ForwardRef$4r, {
            width: "4rem",
            height: "4rem"
          })
        }),
        (0, import_jsx_runtime4.jsx)(Box, {
          marginTop: 2,
          children: (0, import_jsx_runtime4.jsx)(Link, {
            href: "https://docs.strapi.io",
            isExternal: true,
            children: formatMessage({
              id: "global.documentation",
              defaultMessage: "Read the documentation"
            })
          })
        })
      ]
    }),
    // eslint-disable-next-line no-undef
    globalThis.document.body
  ) : null;
};
var rotation2 = mt`
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(359deg);
    }
  `;
var LoaderReload = dt(ForwardRef$5n)`
  animation: ${rotation2} 1s infinite linear;
`;
var Overlay2 = dt(Flex)`
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  /* TODO: set this up in the theme for consistence z-index values */
  z-index: 1140;
  padding-top: 16rem;

  & > * {
    position: relative;
    z-index: 1;
  }

  &:before {
    content: '';
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: ${({ theme }) => theme.colors.neutral0};
    opacity: 0.9;
  }
`;
var IconBox2 = dt(Box)`
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  svg {
    > path {
      fill: ${({ theme }) => theme.colors.primary600} !important;
    }
  }
`;
var useAutoReloadOverlayBlocker = () => React3.useContext(AutoReloadOverlayBlockerContext);
function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case "./translations/ar.json":
      return import("./ar-sRW9VFC--TV4QSNHY.js");
    case "./translations/cs.json":
      return import("./cs-BpQ26jiq-4NUOSOXQ.js");
    case "./translations/de.json":
      return import("./de-DSxx5_x--TLVOWH3L.js");
    case "./translations/dk.json":
      return import("./dk-BnjVZ7A_-F6EUWA2H.js");
    case "./translations/en.json":
      return import("./en-Bhut8Yay-I7WIO2TC.js");
    case "./translations/es.json":
      return import("./es-DG8g9igJ-BWV4OF7A.js");
    case "./translations/fr.json":
      return import("./fr-UpV34MHY-WTF536VZ.js");
    case "./translations/id.json":
      return import("./id-BWM18ljw-R3P2CEBN.js");
    case "./translations/it.json":
      return import("./it-1_vd9gV4-RUTOM7K7.js");
    case "./translations/ja.json":
      return import("./ja-Cx23a2Ui-HCHSSDYI.js");
    case "./translations/ko.json":
      return import("./ko-DC7paEx5-6PSO3PQZ.js");
    case "./translations/ms.json":
      return import("./ms-C3s4kxq6-SD67LGQ7.js");
    case "./translations/nl.json":
      return import("./nl-TzvfktV_-4S656E2X.js");
    case "./translations/pl.json":
      return import("./pl-BdvupIN_-7Z4G6JUG.js");
    case "./translations/pt-BR.json":
      return import("./pt-BR-DPrVmKeZ-NXXTRL25.js");
    case "./translations/pt.json":
      return import("./pt-BTLIwmCv-MCAU76CI.js");
    case "./translations/ru.json":
      return import("./ru-D46no502-WD3WRSXO.js");
    case "./translations/sk.json":
      return import("./sk-Byr_l4Jc-53WTHTFQ.js");
    case "./translations/sv.json":
      return import("./sv-Bbam7IDm-PSOTL7KB.js");
    case "./translations/th.json":
      return import("./th-hfS0Wmk_-BZ5EN2AC.js");
    case "./translations/tr.json":
      return import("./tr-DS7DBOhC-FB2ZVSNT.js");
    case "./translations/uk.json":
      return import("./uk-CjzmJyt1-EWG5SOK4.js");
    case "./translations/zh-Hans.json":
      return import("./zh-Hans-BElOnuRb-OMB4Q6YY.js");
    case "./translations/zh.json":
      return import("./zh-BUVXH75--YE7MFFFP.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var index = {
  register(app) {
    app.addReducers(reducers);
    app.addMenuLink({
      to: `plugins/${pluginId}`,
      icon: ForwardRef$2x,
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: "Content-Type Builder"
      },
      permissions: PERMISSIONS.main,
      Component: () => import("./index-Knq4Ti8R-IQQOE3RT.js").then(function(n) {
        return n.i;
      }),
      position: 5
    });
    app.registerPlugin({
      id: pluginId,
      name: pluginId,
      // Internal APIs exposed by the CTB for the other plugins to use
      apis: {
        forms: formsAPI
      }
    });
  },
  bootstrap() {
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime1__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, pluginId),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};

export {
  ForwardRef$5r,
  ForwardRef$5p,
  ForwardRef$5n,
  ForwardRef$5l,
  ForwardRef$5j,
  ForwardRef$5d,
  ForwardRef$5b,
  ForwardRef$59,
  ForwardRef$55,
  ForwardRef$53,
  ForwardRef$51,
  ForwardRef$4$,
  ForwardRef$4Z,
  ForwardRef$4X,
  ForwardRef$4V,
  ForwardRef$4P,
  ForwardRef$4N,
  ForwardRef$4L,
  ForwardRef$4J,
  ForwardRef$4H,
  ForwardRef$4F,
  ForwardRef$4r,
  ForwardRef$4n,
  ForwardRef$4j,
  ForwardRef$4f,
  ForwardRef$4d,
  ForwardRef$4b,
  ForwardRef$49,
  ForwardRef$47,
  ForwardRef$45,
  ForwardRef$41,
  ForwardRef$3$,
  ForwardRef$3Z,
  ForwardRef$3X,
  ForwardRef$3P,
  ForwardRef$3L,
  ForwardRef$3J,
  ForwardRef$3H,
  ForwardRef$3D,
  ForwardRef$3B,
  ForwardRef$3z,
  ForwardRef$3x,
  ForwardRef$3v,
  ForwardRef$3r,
  ForwardRef$3p,
  ForwardRef$3j,
  ForwardRef$3h,
  ForwardRef$3f,
  ForwardRef$3d,
  ForwardRef$39,
  ForwardRef$37,
  ForwardRef$35,
  ForwardRef$33,
  ForwardRef$2R,
  ForwardRef$2P,
  ForwardRef$2N,
  ForwardRef$2L,
  ForwardRef$2J,
  ForwardRef$2D,
  ForwardRef$2B,
  ForwardRef$2z,
  ForwardRef$2x,
  ForwardRef$2v,
  ForwardRef$2r,
  ForwardRef$2n,
  ForwardRef$2h,
  ForwardRef$2f,
  ForwardRef$2d,
  ForwardRef$2b,
  ForwardRef$29,
  ForwardRef$27,
  ForwardRef$25,
  ForwardRef$23,
  ForwardRef$1Z,
  ForwardRef$1X,
  ForwardRef$1R,
  ForwardRef$1N,
  ForwardRef$1L,
  ForwardRef$1J,
  ForwardRef$1H,
  ForwardRef$1B,
  ForwardRef$1z,
  ForwardRef$1v,
  ForwardRef$1t,
  ForwardRef$1r,
  ForwardRef$1p,
  ForwardRef$1n,
  ForwardRef$1l,
  ForwardRef$1j,
  ForwardRef$1h,
  ForwardRef$1d,
  ForwardRef$1b,
  ForwardRef$19,
  ForwardRef$17,
  ForwardRef$15,
  ForwardRef$13,
  ForwardRef$11,
  ForwardRef$$,
  ForwardRef$X,
  ForwardRef$V,
  ForwardRef$T,
  ForwardRef$R,
  ForwardRef$P,
  ForwardRef$N,
  ForwardRef$J,
  ForwardRef$H,
  ForwardRef$F,
  ForwardRef$D,
  ForwardRef$B,
  ForwardRef$x,
  ForwardRef$v,
  ForwardRef$t,
  ForwardRef$r,
  ForwardRef$p,
  ForwardRef$n,
  ForwardRef$l,
  ForwardRef$j,
  ForwardRef$h,
  ForwardRef$f,
  ForwardRef$b,
  ForwardRef$9,
  ForwardRef$7,
  ForwardRef$5,
  ForwardRef$1,
  require_slugify,
  useCollator,
  useFilter,
  Box,
  Flex,
  Typography,
  VisuallyHidden,
  Breadcrumbs,
  Crumb,
  Button,
  TooltipImpl,
  IconButton,
  Link,
  Menu,
  CheckboxImpl,
  inputFocusStyle,
  Field,
  Combobox2 as Combobox,
  Option,
  Dialog,
  SingleSelect,
  SingleSelectOption,
  DatePicker$1,
  TimePicker$1,
  DateTimePicker,
  Divider,
  EmptyStateLayout,
  JSONInput,
  LinkButton,
  Modal,
  NumberInput,
  Searchbar,
  MultiSelectNested,
  SubNav,
  SubNavHeader,
  SubNavLink,
  SubNavLinkSection,
  SubNavSection,
  SubNavSections,
  Tabs,
  Table,
  Tbody,
  Thead,
  Tr,
  Th,
  Td,
  TFooter,
  TextButton,
  TextInput2 as TextInput,
  Textarea,
  Toggle,
  Grid,
  KeyboardNavigable,
  PERMISSIONS,
  MAX_COMPONENT_DEPTH,
  pluginId,
  getRelationType,
  makeUnique,
  retrieveComponentsFromSchema,
  initialState$1,
  actions$1,
  nameToSlug,
  createUid,
  createComponentUid,
  initialState,
  actions,
  AutoReloadOverlayBlockerProvider,
  useAutoReloadOverlayBlocker,
  index
};
//# sourceMappingURL=chunk-FCEHMXXR.js.map
